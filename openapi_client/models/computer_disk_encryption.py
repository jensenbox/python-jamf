# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerDiskEncryption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'boot_partition_encryption_details': 'ComputerPartitionEncryption',
        'individual_recovery_key_validity_status': 'str',
        'institutional_recovery_key_present': 'bool',
        'disk_encryption_configuration_name': 'str',
        'file_vault2_enabled_user_names': 'list[str]',
        'file_vault2_eligibility_message': 'str'
    }

    attribute_map = {
        'boot_partition_encryption_details': 'bootPartitionEncryptionDetails',
        'individual_recovery_key_validity_status': 'individualRecoveryKeyValidityStatus',
        'institutional_recovery_key_present': 'institutionalRecoveryKeyPresent',
        'disk_encryption_configuration_name': 'diskEncryptionConfigurationName',
        'file_vault2_enabled_user_names': 'fileVault2EnabledUserNames',
        'file_vault2_eligibility_message': 'fileVault2EligibilityMessage'
    }

    def __init__(self, boot_partition_encryption_details=None, individual_recovery_key_validity_status=None, institutional_recovery_key_present=None, disk_encryption_configuration_name=None, file_vault2_enabled_user_names=None, file_vault2_eligibility_message=None, local_vars_configuration=None):  # noqa: E501
        """ComputerDiskEncryption - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._boot_partition_encryption_details = None
        self._individual_recovery_key_validity_status = None
        self._institutional_recovery_key_present = None
        self._disk_encryption_configuration_name = None
        self._file_vault2_enabled_user_names = None
        self._file_vault2_eligibility_message = None
        self.discriminator = None

        if boot_partition_encryption_details is not None:
            self.boot_partition_encryption_details = boot_partition_encryption_details
        if individual_recovery_key_validity_status is not None:
            self.individual_recovery_key_validity_status = individual_recovery_key_validity_status
        if institutional_recovery_key_present is not None:
            self.institutional_recovery_key_present = institutional_recovery_key_present
        if disk_encryption_configuration_name is not None:
            self.disk_encryption_configuration_name = disk_encryption_configuration_name
        if file_vault2_enabled_user_names is not None:
            self.file_vault2_enabled_user_names = file_vault2_enabled_user_names
        if file_vault2_eligibility_message is not None:
            self.file_vault2_eligibility_message = file_vault2_eligibility_message

    @property
    def boot_partition_encryption_details(self):
        """Gets the boot_partition_encryption_details of this ComputerDiskEncryption.  # noqa: E501


        :return: The boot_partition_encryption_details of this ComputerDiskEncryption.  # noqa: E501
        :rtype: ComputerPartitionEncryption
        """
        return self._boot_partition_encryption_details

    @boot_partition_encryption_details.setter
    def boot_partition_encryption_details(self, boot_partition_encryption_details):
        """Sets the boot_partition_encryption_details of this ComputerDiskEncryption.


        :param boot_partition_encryption_details: The boot_partition_encryption_details of this ComputerDiskEncryption.  # noqa: E501
        :type boot_partition_encryption_details: ComputerPartitionEncryption
        """

        self._boot_partition_encryption_details = boot_partition_encryption_details

    @property
    def individual_recovery_key_validity_status(self):
        """Gets the individual_recovery_key_validity_status of this ComputerDiskEncryption.  # noqa: E501


        :return: The individual_recovery_key_validity_status of this ComputerDiskEncryption.  # noqa: E501
        :rtype: str
        """
        return self._individual_recovery_key_validity_status

    @individual_recovery_key_validity_status.setter
    def individual_recovery_key_validity_status(self, individual_recovery_key_validity_status):
        """Sets the individual_recovery_key_validity_status of this ComputerDiskEncryption.


        :param individual_recovery_key_validity_status: The individual_recovery_key_validity_status of this ComputerDiskEncryption.  # noqa: E501
        :type individual_recovery_key_validity_status: str
        """
        allowed_values = ["VALID", "INVALID", "UNKNOWN", "NOT_APPLICABLE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and individual_recovery_key_validity_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `individual_recovery_key_validity_status` ({0}), must be one of {1}"  # noqa: E501
                .format(individual_recovery_key_validity_status, allowed_values)
            )

        self._individual_recovery_key_validity_status = individual_recovery_key_validity_status

    @property
    def institutional_recovery_key_present(self):
        """Gets the institutional_recovery_key_present of this ComputerDiskEncryption.  # noqa: E501


        :return: The institutional_recovery_key_present of this ComputerDiskEncryption.  # noqa: E501
        :rtype: bool
        """
        return self._institutional_recovery_key_present

    @institutional_recovery_key_present.setter
    def institutional_recovery_key_present(self, institutional_recovery_key_present):
        """Sets the institutional_recovery_key_present of this ComputerDiskEncryption.


        :param institutional_recovery_key_present: The institutional_recovery_key_present of this ComputerDiskEncryption.  # noqa: E501
        :type institutional_recovery_key_present: bool
        """

        self._institutional_recovery_key_present = institutional_recovery_key_present

    @property
    def disk_encryption_configuration_name(self):
        """Gets the disk_encryption_configuration_name of this ComputerDiskEncryption.  # noqa: E501


        :return: The disk_encryption_configuration_name of this ComputerDiskEncryption.  # noqa: E501
        :rtype: str
        """
        return self._disk_encryption_configuration_name

    @disk_encryption_configuration_name.setter
    def disk_encryption_configuration_name(self, disk_encryption_configuration_name):
        """Sets the disk_encryption_configuration_name of this ComputerDiskEncryption.


        :param disk_encryption_configuration_name: The disk_encryption_configuration_name of this ComputerDiskEncryption.  # noqa: E501
        :type disk_encryption_configuration_name: str
        """

        self._disk_encryption_configuration_name = disk_encryption_configuration_name

    @property
    def file_vault2_enabled_user_names(self):
        """Gets the file_vault2_enabled_user_names of this ComputerDiskEncryption.  # noqa: E501


        :return: The file_vault2_enabled_user_names of this ComputerDiskEncryption.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_vault2_enabled_user_names

    @file_vault2_enabled_user_names.setter
    def file_vault2_enabled_user_names(self, file_vault2_enabled_user_names):
        """Sets the file_vault2_enabled_user_names of this ComputerDiskEncryption.


        :param file_vault2_enabled_user_names: The file_vault2_enabled_user_names of this ComputerDiskEncryption.  # noqa: E501
        :type file_vault2_enabled_user_names: list[str]
        """

        self._file_vault2_enabled_user_names = file_vault2_enabled_user_names

    @property
    def file_vault2_eligibility_message(self):
        """Gets the file_vault2_eligibility_message of this ComputerDiskEncryption.  # noqa: E501


        :return: The file_vault2_eligibility_message of this ComputerDiskEncryption.  # noqa: E501
        :rtype: str
        """
        return self._file_vault2_eligibility_message

    @file_vault2_eligibility_message.setter
    def file_vault2_eligibility_message(self, file_vault2_eligibility_message):
        """Sets the file_vault2_eligibility_message of this ComputerDiskEncryption.


        :param file_vault2_eligibility_message: The file_vault2_eligibility_message of this ComputerDiskEncryption.  # noqa: E501
        :type file_vault2_eligibility_message: str
        """

        self._file_vault2_eligibility_message = file_vault2_eligibility_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerDiskEncryption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerDiskEncryption):
            return True

        return self.to_dict() != other.to_dict()
