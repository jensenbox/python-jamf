# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SupervisionIdentity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'display_name': 'str',
        'common_name': 'str',
        'expiration_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'displayName',
        'common_name': 'commonName',
        'expiration_date': 'expirationDate'
    }

    def __init__(self, id=None, display_name=None, common_name=None, expiration_date=None, local_vars_configuration=None):  # noqa: E501
        """SupervisionIdentity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._display_name = None
        self._common_name = None
        self._expiration_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if common_name is not None:
            self.common_name = common_name
        if expiration_date is not None:
            self.expiration_date = expiration_date

    @property
    def id(self):
        """Gets the id of this SupervisionIdentity.  # noqa: E501


        :return: The id of this SupervisionIdentity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupervisionIdentity.


        :param id: The id of this SupervisionIdentity.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this SupervisionIdentity.  # noqa: E501


        :return: The display_name of this SupervisionIdentity.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SupervisionIdentity.


        :param display_name: The display_name of this SupervisionIdentity.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def common_name(self):
        """Gets the common_name of this SupervisionIdentity.  # noqa: E501


        :return: The common_name of this SupervisionIdentity.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this SupervisionIdentity.


        :param common_name: The common_name of this SupervisionIdentity.  # noqa: E501
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SupervisionIdentity.  # noqa: E501


        :return: The expiration_date of this SupervisionIdentity.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SupervisionIdentity.


        :param expiration_date: The expiration_date of this SupervisionIdentity.  # noqa: E501
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupervisionIdentity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupervisionIdentity):
            return True

        return self.to_dict() != other.to_dict()
