# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AccountGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_level': 'str',
        'privilege_set': 'str',
        'site_id': 'int',
        'privileges': 'list[str]',
        'member_user_ids': 'list[int]'
    }

    attribute_map = {
        'access_level': 'accessLevel',
        'privilege_set': 'privilegeSet',
        'site_id': 'siteId',
        'privileges': 'privileges',
        'member_user_ids': 'memberUserIds'
    }

    def __init__(self, access_level=None, privilege_set=None, site_id=None, privileges=None, member_user_ids=None, local_vars_configuration=None):  # noqa: E501
        """AccountGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_level = None
        self._privilege_set = None
        self._site_id = None
        self._privileges = None
        self._member_user_ids = None
        self.discriminator = None

        if access_level is not None:
            self.access_level = access_level
        if privilege_set is not None:
            self.privilege_set = privilege_set
        if site_id is not None:
            self.site_id = site_id
        if privileges is not None:
            self.privileges = privileges
        if member_user_ids is not None:
            self.member_user_ids = member_user_ids

    @property
    def access_level(self):
        """Gets the access_level of this AccountGroup.  # noqa: E501


        :return: The access_level of this AccountGroup.  # noqa: E501
        :rtype: str
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this AccountGroup.


        :param access_level: The access_level of this AccountGroup.  # noqa: E501
        :type access_level: str
        """
        allowed_values = ["FullAccess", "SiteAccess", "GroupBasedAccess"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and access_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `access_level` ({0}), must be one of {1}"  # noqa: E501
                .format(access_level, allowed_values)
            )

        self._access_level = access_level

    @property
    def privilege_set(self):
        """Gets the privilege_set of this AccountGroup.  # noqa: E501


        :return: The privilege_set of this AccountGroup.  # noqa: E501
        :rtype: str
        """
        return self._privilege_set

    @privilege_set.setter
    def privilege_set(self, privilege_set):
        """Sets the privilege_set of this AccountGroup.


        :param privilege_set: The privilege_set of this AccountGroup.  # noqa: E501
        :type privilege_set: str
        """
        allowed_values = ["ADMINISTRATOR", "AUDITOR", "ENROLLMENT", "CUSTOM"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and privilege_set not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `privilege_set` ({0}), must be one of {1}"  # noqa: E501
                .format(privilege_set, allowed_values)
            )

        self._privilege_set = privilege_set

    @property
    def site_id(self):
        """Gets the site_id of this AccountGroup.  # noqa: E501


        :return: The site_id of this AccountGroup.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this AccountGroup.


        :param site_id: The site_id of this AccountGroup.  # noqa: E501
        :type site_id: int
        """

        self._site_id = site_id

    @property
    def privileges(self):
        """Gets the privileges of this AccountGroup.  # noqa: E501


        :return: The privileges of this AccountGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this AccountGroup.


        :param privileges: The privileges of this AccountGroup.  # noqa: E501
        :type privileges: list[str]
        """

        self._privileges = privileges

    @property
    def member_user_ids(self):
        """Gets the member_user_ids of this AccountGroup.  # noqa: E501


        :return: The member_user_ids of this AccountGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._member_user_ids

    @member_user_ids.setter
    def member_user_ids(self, member_user_ids):
        """Sets the member_user_ids of this AccountGroup.


        :param member_user_ids: The member_user_ids of this AccountGroup.  # noqa: E501
        :type member_user_ids: list[int]
        """

        self._member_user_ids = member_user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountGroup):
            return True

        return self.to_dict() != other.to_dict()
