# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerContentCaching(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'computer_content_caching_information_id': 'str',
        'parents': 'list[ComputerContentCachingParent]',
        'alerts': 'list[ComputerContentCachingAlert]',
        'activated': 'bool',
        'active': 'bool',
        'actual_cache_bytes_used': 'int',
        'cache_details': 'list[ComputerContentCachingCacheDetail]',
        'cache_bytes_free': 'int',
        'cache_bytes_limit': 'int',
        'cache_status': 'str',
        'cache_bytes_used': 'int',
        'data_migration_completed': 'bool',
        'data_migration_progress_percentage': 'int',
        'data_migration_error': 'ComputerContentCachingDataMigrationError',
        'max_cache_pressure_last1_hour_percentage': 'int',
        'personal_cache_bytes_free': 'int',
        'personal_cache_bytes_limit': 'int',
        'personal_cache_bytes_used': 'int',
        'port': 'int',
        'public_address': 'str',
        'registration_error': 'str',
        'registration_response_code': 'int',
        'registration_started': 'datetime',
        'registration_status': 'str',
        'restricted_media': 'bool',
        'server_guid': 'str',
        'startup_status': 'str',
        'tetherator_status': 'str',
        'total_bytes_are_since': 'datetime',
        'total_bytes_dropped': 'int',
        'total_bytes_imported': 'int',
        'total_bytes_returned_to_children': 'int',
        'total_bytes_returned_to_clients': 'int',
        'total_bytes_returned_to_peers': 'int',
        'total_bytes_stored_from_origin': 'int',
        'total_bytes_stored_from_parents': 'int',
        'total_bytes_stored_from_peers': 'int'
    }

    attribute_map = {
        'computer_content_caching_information_id': 'computerContentCachingInformationId',
        'parents': 'parents',
        'alerts': 'alerts',
        'activated': 'activated',
        'active': 'active',
        'actual_cache_bytes_used': 'actualCacheBytesUsed',
        'cache_details': 'cacheDetails',
        'cache_bytes_free': 'cacheBytesFree',
        'cache_bytes_limit': 'cacheBytesLimit',
        'cache_status': 'cacheStatus',
        'cache_bytes_used': 'cacheBytesUsed',
        'data_migration_completed': 'dataMigrationCompleted',
        'data_migration_progress_percentage': 'dataMigrationProgressPercentage',
        'data_migration_error': 'dataMigrationError',
        'max_cache_pressure_last1_hour_percentage': 'maxCachePressureLast1HourPercentage',
        'personal_cache_bytes_free': 'personalCacheBytesFree',
        'personal_cache_bytes_limit': 'personalCacheBytesLimit',
        'personal_cache_bytes_used': 'personalCacheBytesUsed',
        'port': 'port',
        'public_address': 'publicAddress',
        'registration_error': 'registrationError',
        'registration_response_code': 'registrationResponseCode',
        'registration_started': 'registrationStarted',
        'registration_status': 'registrationStatus',
        'restricted_media': 'restrictedMedia',
        'server_guid': 'serverGuid',
        'startup_status': 'startupStatus',
        'tetherator_status': 'tetheratorStatus',
        'total_bytes_are_since': 'totalBytesAreSince',
        'total_bytes_dropped': 'totalBytesDropped',
        'total_bytes_imported': 'totalBytesImported',
        'total_bytes_returned_to_children': 'totalBytesReturnedToChildren',
        'total_bytes_returned_to_clients': 'totalBytesReturnedToClients',
        'total_bytes_returned_to_peers': 'totalBytesReturnedToPeers',
        'total_bytes_stored_from_origin': 'totalBytesStoredFromOrigin',
        'total_bytes_stored_from_parents': 'totalBytesStoredFromParents',
        'total_bytes_stored_from_peers': 'totalBytesStoredFromPeers'
    }

    def __init__(self, computer_content_caching_information_id=None, parents=None, alerts=None, activated=None, active=None, actual_cache_bytes_used=None, cache_details=None, cache_bytes_free=None, cache_bytes_limit=None, cache_status=None, cache_bytes_used=None, data_migration_completed=None, data_migration_progress_percentage=None, data_migration_error=None, max_cache_pressure_last1_hour_percentage=None, personal_cache_bytes_free=None, personal_cache_bytes_limit=None, personal_cache_bytes_used=None, port=None, public_address=None, registration_error=None, registration_response_code=None, registration_started=None, registration_status=None, restricted_media=None, server_guid=None, startup_status=None, tetherator_status=None, total_bytes_are_since=None, total_bytes_dropped=None, total_bytes_imported=None, total_bytes_returned_to_children=None, total_bytes_returned_to_clients=None, total_bytes_returned_to_peers=None, total_bytes_stored_from_origin=None, total_bytes_stored_from_parents=None, total_bytes_stored_from_peers=None, local_vars_configuration=None):  # noqa: E501
        """ComputerContentCaching - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._computer_content_caching_information_id = None
        self._parents = None
        self._alerts = None
        self._activated = None
        self._active = None
        self._actual_cache_bytes_used = None
        self._cache_details = None
        self._cache_bytes_free = None
        self._cache_bytes_limit = None
        self._cache_status = None
        self._cache_bytes_used = None
        self._data_migration_completed = None
        self._data_migration_progress_percentage = None
        self._data_migration_error = None
        self._max_cache_pressure_last1_hour_percentage = None
        self._personal_cache_bytes_free = None
        self._personal_cache_bytes_limit = None
        self._personal_cache_bytes_used = None
        self._port = None
        self._public_address = None
        self._registration_error = None
        self._registration_response_code = None
        self._registration_started = None
        self._registration_status = None
        self._restricted_media = None
        self._server_guid = None
        self._startup_status = None
        self._tetherator_status = None
        self._total_bytes_are_since = None
        self._total_bytes_dropped = None
        self._total_bytes_imported = None
        self._total_bytes_returned_to_children = None
        self._total_bytes_returned_to_clients = None
        self._total_bytes_returned_to_peers = None
        self._total_bytes_stored_from_origin = None
        self._total_bytes_stored_from_parents = None
        self._total_bytes_stored_from_peers = None
        self.discriminator = None

        if computer_content_caching_information_id is not None:
            self.computer_content_caching_information_id = computer_content_caching_information_id
        if parents is not None:
            self.parents = parents
        if alerts is not None:
            self.alerts = alerts
        if activated is not None:
            self.activated = activated
        if active is not None:
            self.active = active
        if actual_cache_bytes_used is not None:
            self.actual_cache_bytes_used = actual_cache_bytes_used
        if cache_details is not None:
            self.cache_details = cache_details
        if cache_bytes_free is not None:
            self.cache_bytes_free = cache_bytes_free
        if cache_bytes_limit is not None:
            self.cache_bytes_limit = cache_bytes_limit
        if cache_status is not None:
            self.cache_status = cache_status
        if cache_bytes_used is not None:
            self.cache_bytes_used = cache_bytes_used
        if data_migration_completed is not None:
            self.data_migration_completed = data_migration_completed
        if data_migration_progress_percentage is not None:
            self.data_migration_progress_percentage = data_migration_progress_percentage
        if data_migration_error is not None:
            self.data_migration_error = data_migration_error
        if max_cache_pressure_last1_hour_percentage is not None:
            self.max_cache_pressure_last1_hour_percentage = max_cache_pressure_last1_hour_percentage
        if personal_cache_bytes_free is not None:
            self.personal_cache_bytes_free = personal_cache_bytes_free
        if personal_cache_bytes_limit is not None:
            self.personal_cache_bytes_limit = personal_cache_bytes_limit
        if personal_cache_bytes_used is not None:
            self.personal_cache_bytes_used = personal_cache_bytes_used
        if port is not None:
            self.port = port
        if public_address is not None:
            self.public_address = public_address
        if registration_error is not None:
            self.registration_error = registration_error
        if registration_response_code is not None:
            self.registration_response_code = registration_response_code
        if registration_started is not None:
            self.registration_started = registration_started
        if registration_status is not None:
            self.registration_status = registration_status
        if restricted_media is not None:
            self.restricted_media = restricted_media
        if server_guid is not None:
            self.server_guid = server_guid
        if startup_status is not None:
            self.startup_status = startup_status
        if tetherator_status is not None:
            self.tetherator_status = tetherator_status
        if total_bytes_are_since is not None:
            self.total_bytes_are_since = total_bytes_are_since
        if total_bytes_dropped is not None:
            self.total_bytes_dropped = total_bytes_dropped
        if total_bytes_imported is not None:
            self.total_bytes_imported = total_bytes_imported
        if total_bytes_returned_to_children is not None:
            self.total_bytes_returned_to_children = total_bytes_returned_to_children
        if total_bytes_returned_to_clients is not None:
            self.total_bytes_returned_to_clients = total_bytes_returned_to_clients
        if total_bytes_returned_to_peers is not None:
            self.total_bytes_returned_to_peers = total_bytes_returned_to_peers
        if total_bytes_stored_from_origin is not None:
            self.total_bytes_stored_from_origin = total_bytes_stored_from_origin
        if total_bytes_stored_from_parents is not None:
            self.total_bytes_stored_from_parents = total_bytes_stored_from_parents
        if total_bytes_stored_from_peers is not None:
            self.total_bytes_stored_from_peers = total_bytes_stored_from_peers

    @property
    def computer_content_caching_information_id(self):
        """Gets the computer_content_caching_information_id of this ComputerContentCaching.  # noqa: E501


        :return: The computer_content_caching_information_id of this ComputerContentCaching.  # noqa: E501
        :rtype: str
        """
        return self._computer_content_caching_information_id

    @computer_content_caching_information_id.setter
    def computer_content_caching_information_id(self, computer_content_caching_information_id):
        """Sets the computer_content_caching_information_id of this ComputerContentCaching.


        :param computer_content_caching_information_id: The computer_content_caching_information_id of this ComputerContentCaching.  # noqa: E501
        :type computer_content_caching_information_id: str
        """

        self._computer_content_caching_information_id = computer_content_caching_information_id

    @property
    def parents(self):
        """Gets the parents of this ComputerContentCaching.  # noqa: E501


        :return: The parents of this ComputerContentCaching.  # noqa: E501
        :rtype: list[ComputerContentCachingParent]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this ComputerContentCaching.


        :param parents: The parents of this ComputerContentCaching.  # noqa: E501
        :type parents: list[ComputerContentCachingParent]
        """

        self._parents = parents

    @property
    def alerts(self):
        """Gets the alerts of this ComputerContentCaching.  # noqa: E501


        :return: The alerts of this ComputerContentCaching.  # noqa: E501
        :rtype: list[ComputerContentCachingAlert]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this ComputerContentCaching.


        :param alerts: The alerts of this ComputerContentCaching.  # noqa: E501
        :type alerts: list[ComputerContentCachingAlert]
        """

        self._alerts = alerts

    @property
    def activated(self):
        """Gets the activated of this ComputerContentCaching.  # noqa: E501


        :return: The activated of this ComputerContentCaching.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this ComputerContentCaching.


        :param activated: The activated of this ComputerContentCaching.  # noqa: E501
        :type activated: bool
        """

        self._activated = activated

    @property
    def active(self):
        """Gets the active of this ComputerContentCaching.  # noqa: E501


        :return: The active of this ComputerContentCaching.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ComputerContentCaching.


        :param active: The active of this ComputerContentCaching.  # noqa: E501
        :type active: bool
        """

        self._active = active

    @property
    def actual_cache_bytes_used(self):
        """Gets the actual_cache_bytes_used of this ComputerContentCaching.  # noqa: E501


        :return: The actual_cache_bytes_used of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._actual_cache_bytes_used

    @actual_cache_bytes_used.setter
    def actual_cache_bytes_used(self, actual_cache_bytes_used):
        """Sets the actual_cache_bytes_used of this ComputerContentCaching.


        :param actual_cache_bytes_used: The actual_cache_bytes_used of this ComputerContentCaching.  # noqa: E501
        :type actual_cache_bytes_used: int
        """

        self._actual_cache_bytes_used = actual_cache_bytes_used

    @property
    def cache_details(self):
        """Gets the cache_details of this ComputerContentCaching.  # noqa: E501


        :return: The cache_details of this ComputerContentCaching.  # noqa: E501
        :rtype: list[ComputerContentCachingCacheDetail]
        """
        return self._cache_details

    @cache_details.setter
    def cache_details(self, cache_details):
        """Sets the cache_details of this ComputerContentCaching.


        :param cache_details: The cache_details of this ComputerContentCaching.  # noqa: E501
        :type cache_details: list[ComputerContentCachingCacheDetail]
        """

        self._cache_details = cache_details

    @property
    def cache_bytes_free(self):
        """Gets the cache_bytes_free of this ComputerContentCaching.  # noqa: E501


        :return: The cache_bytes_free of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._cache_bytes_free

    @cache_bytes_free.setter
    def cache_bytes_free(self, cache_bytes_free):
        """Sets the cache_bytes_free of this ComputerContentCaching.


        :param cache_bytes_free: The cache_bytes_free of this ComputerContentCaching.  # noqa: E501
        :type cache_bytes_free: int
        """

        self._cache_bytes_free = cache_bytes_free

    @property
    def cache_bytes_limit(self):
        """Gets the cache_bytes_limit of this ComputerContentCaching.  # noqa: E501


        :return: The cache_bytes_limit of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._cache_bytes_limit

    @cache_bytes_limit.setter
    def cache_bytes_limit(self, cache_bytes_limit):
        """Sets the cache_bytes_limit of this ComputerContentCaching.


        :param cache_bytes_limit: The cache_bytes_limit of this ComputerContentCaching.  # noqa: E501
        :type cache_bytes_limit: int
        """

        self._cache_bytes_limit = cache_bytes_limit

    @property
    def cache_status(self):
        """Gets the cache_status of this ComputerContentCaching.  # noqa: E501


        :return: The cache_status of this ComputerContentCaching.  # noqa: E501
        :rtype: str
        """
        return self._cache_status

    @cache_status.setter
    def cache_status(self, cache_status):
        """Sets the cache_status of this ComputerContentCaching.


        :param cache_status: The cache_status of this ComputerContentCaching.  # noqa: E501
        :type cache_status: str
        """

        self._cache_status = cache_status

    @property
    def cache_bytes_used(self):
        """Gets the cache_bytes_used of this ComputerContentCaching.  # noqa: E501


        :return: The cache_bytes_used of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._cache_bytes_used

    @cache_bytes_used.setter
    def cache_bytes_used(self, cache_bytes_used):
        """Sets the cache_bytes_used of this ComputerContentCaching.


        :param cache_bytes_used: The cache_bytes_used of this ComputerContentCaching.  # noqa: E501
        :type cache_bytes_used: int
        """

        self._cache_bytes_used = cache_bytes_used

    @property
    def data_migration_completed(self):
        """Gets the data_migration_completed of this ComputerContentCaching.  # noqa: E501


        :return: The data_migration_completed of this ComputerContentCaching.  # noqa: E501
        :rtype: bool
        """
        return self._data_migration_completed

    @data_migration_completed.setter
    def data_migration_completed(self, data_migration_completed):
        """Sets the data_migration_completed of this ComputerContentCaching.


        :param data_migration_completed: The data_migration_completed of this ComputerContentCaching.  # noqa: E501
        :type data_migration_completed: bool
        """

        self._data_migration_completed = data_migration_completed

    @property
    def data_migration_progress_percentage(self):
        """Gets the data_migration_progress_percentage of this ComputerContentCaching.  # noqa: E501


        :return: The data_migration_progress_percentage of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._data_migration_progress_percentage

    @data_migration_progress_percentage.setter
    def data_migration_progress_percentage(self, data_migration_progress_percentage):
        """Sets the data_migration_progress_percentage of this ComputerContentCaching.


        :param data_migration_progress_percentage: The data_migration_progress_percentage of this ComputerContentCaching.  # noqa: E501
        :type data_migration_progress_percentage: int
        """

        self._data_migration_progress_percentage = data_migration_progress_percentage

    @property
    def data_migration_error(self):
        """Gets the data_migration_error of this ComputerContentCaching.  # noqa: E501


        :return: The data_migration_error of this ComputerContentCaching.  # noqa: E501
        :rtype: ComputerContentCachingDataMigrationError
        """
        return self._data_migration_error

    @data_migration_error.setter
    def data_migration_error(self, data_migration_error):
        """Sets the data_migration_error of this ComputerContentCaching.


        :param data_migration_error: The data_migration_error of this ComputerContentCaching.  # noqa: E501
        :type data_migration_error: ComputerContentCachingDataMigrationError
        """

        self._data_migration_error = data_migration_error

    @property
    def max_cache_pressure_last1_hour_percentage(self):
        """Gets the max_cache_pressure_last1_hour_percentage of this ComputerContentCaching.  # noqa: E501


        :return: The max_cache_pressure_last1_hour_percentage of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._max_cache_pressure_last1_hour_percentage

    @max_cache_pressure_last1_hour_percentage.setter
    def max_cache_pressure_last1_hour_percentage(self, max_cache_pressure_last1_hour_percentage):
        """Sets the max_cache_pressure_last1_hour_percentage of this ComputerContentCaching.


        :param max_cache_pressure_last1_hour_percentage: The max_cache_pressure_last1_hour_percentage of this ComputerContentCaching.  # noqa: E501
        :type max_cache_pressure_last1_hour_percentage: int
        """

        self._max_cache_pressure_last1_hour_percentage = max_cache_pressure_last1_hour_percentage

    @property
    def personal_cache_bytes_free(self):
        """Gets the personal_cache_bytes_free of this ComputerContentCaching.  # noqa: E501


        :return: The personal_cache_bytes_free of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._personal_cache_bytes_free

    @personal_cache_bytes_free.setter
    def personal_cache_bytes_free(self, personal_cache_bytes_free):
        """Sets the personal_cache_bytes_free of this ComputerContentCaching.


        :param personal_cache_bytes_free: The personal_cache_bytes_free of this ComputerContentCaching.  # noqa: E501
        :type personal_cache_bytes_free: int
        """

        self._personal_cache_bytes_free = personal_cache_bytes_free

    @property
    def personal_cache_bytes_limit(self):
        """Gets the personal_cache_bytes_limit of this ComputerContentCaching.  # noqa: E501


        :return: The personal_cache_bytes_limit of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._personal_cache_bytes_limit

    @personal_cache_bytes_limit.setter
    def personal_cache_bytes_limit(self, personal_cache_bytes_limit):
        """Sets the personal_cache_bytes_limit of this ComputerContentCaching.


        :param personal_cache_bytes_limit: The personal_cache_bytes_limit of this ComputerContentCaching.  # noqa: E501
        :type personal_cache_bytes_limit: int
        """

        self._personal_cache_bytes_limit = personal_cache_bytes_limit

    @property
    def personal_cache_bytes_used(self):
        """Gets the personal_cache_bytes_used of this ComputerContentCaching.  # noqa: E501


        :return: The personal_cache_bytes_used of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._personal_cache_bytes_used

    @personal_cache_bytes_used.setter
    def personal_cache_bytes_used(self, personal_cache_bytes_used):
        """Sets the personal_cache_bytes_used of this ComputerContentCaching.


        :param personal_cache_bytes_used: The personal_cache_bytes_used of this ComputerContentCaching.  # noqa: E501
        :type personal_cache_bytes_used: int
        """

        self._personal_cache_bytes_used = personal_cache_bytes_used

    @property
    def port(self):
        """Gets the port of this ComputerContentCaching.  # noqa: E501


        :return: The port of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ComputerContentCaching.


        :param port: The port of this ComputerContentCaching.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def public_address(self):
        """Gets the public_address of this ComputerContentCaching.  # noqa: E501


        :return: The public_address of this ComputerContentCaching.  # noqa: E501
        :rtype: str
        """
        return self._public_address

    @public_address.setter
    def public_address(self, public_address):
        """Sets the public_address of this ComputerContentCaching.


        :param public_address: The public_address of this ComputerContentCaching.  # noqa: E501
        :type public_address: str
        """

        self._public_address = public_address

    @property
    def registration_error(self):
        """Gets the registration_error of this ComputerContentCaching.  # noqa: E501


        :return: The registration_error of this ComputerContentCaching.  # noqa: E501
        :rtype: str
        """
        return self._registration_error

    @registration_error.setter
    def registration_error(self, registration_error):
        """Sets the registration_error of this ComputerContentCaching.


        :param registration_error: The registration_error of this ComputerContentCaching.  # noqa: E501
        :type registration_error: str
        """

        self._registration_error = registration_error

    @property
    def registration_response_code(self):
        """Gets the registration_response_code of this ComputerContentCaching.  # noqa: E501


        :return: The registration_response_code of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._registration_response_code

    @registration_response_code.setter
    def registration_response_code(self, registration_response_code):
        """Sets the registration_response_code of this ComputerContentCaching.


        :param registration_response_code: The registration_response_code of this ComputerContentCaching.  # noqa: E501
        :type registration_response_code: int
        """

        self._registration_response_code = registration_response_code

    @property
    def registration_started(self):
        """Gets the registration_started of this ComputerContentCaching.  # noqa: E501


        :return: The registration_started of this ComputerContentCaching.  # noqa: E501
        :rtype: datetime
        """
        return self._registration_started

    @registration_started.setter
    def registration_started(self, registration_started):
        """Sets the registration_started of this ComputerContentCaching.


        :param registration_started: The registration_started of this ComputerContentCaching.  # noqa: E501
        :type registration_started: datetime
        """

        self._registration_started = registration_started

    @property
    def registration_status(self):
        """Gets the registration_status of this ComputerContentCaching.  # noqa: E501


        :return: The registration_status of this ComputerContentCaching.  # noqa: E501
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this ComputerContentCaching.


        :param registration_status: The registration_status of this ComputerContentCaching.  # noqa: E501
        :type registration_status: str
        """
        allowed_values = ["CONTENT_CACHING_FAILED", "CONTENT_CACHING_PENDING", "CONTENT_CACHING_SUCCEEDED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and registration_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `registration_status` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_status, allowed_values)
            )

        self._registration_status = registration_status

    @property
    def restricted_media(self):
        """Gets the restricted_media of this ComputerContentCaching.  # noqa: E501


        :return: The restricted_media of this ComputerContentCaching.  # noqa: E501
        :rtype: bool
        """
        return self._restricted_media

    @restricted_media.setter
    def restricted_media(self, restricted_media):
        """Sets the restricted_media of this ComputerContentCaching.


        :param restricted_media: The restricted_media of this ComputerContentCaching.  # noqa: E501
        :type restricted_media: bool
        """

        self._restricted_media = restricted_media

    @property
    def server_guid(self):
        """Gets the server_guid of this ComputerContentCaching.  # noqa: E501


        :return: The server_guid of this ComputerContentCaching.  # noqa: E501
        :rtype: str
        """
        return self._server_guid

    @server_guid.setter
    def server_guid(self, server_guid):
        """Sets the server_guid of this ComputerContentCaching.


        :param server_guid: The server_guid of this ComputerContentCaching.  # noqa: E501
        :type server_guid: str
        """

        self._server_guid = server_guid

    @property
    def startup_status(self):
        """Gets the startup_status of this ComputerContentCaching.  # noqa: E501


        :return: The startup_status of this ComputerContentCaching.  # noqa: E501
        :rtype: str
        """
        return self._startup_status

    @startup_status.setter
    def startup_status(self, startup_status):
        """Sets the startup_status of this ComputerContentCaching.


        :param startup_status: The startup_status of this ComputerContentCaching.  # noqa: E501
        :type startup_status: str
        """

        self._startup_status = startup_status

    @property
    def tetherator_status(self):
        """Gets the tetherator_status of this ComputerContentCaching.  # noqa: E501


        :return: The tetherator_status of this ComputerContentCaching.  # noqa: E501
        :rtype: str
        """
        return self._tetherator_status

    @tetherator_status.setter
    def tetherator_status(self, tetherator_status):
        """Sets the tetherator_status of this ComputerContentCaching.


        :param tetherator_status: The tetherator_status of this ComputerContentCaching.  # noqa: E501
        :type tetherator_status: str
        """
        allowed_values = ["CONTENT_CACHING_UNKNOWN", "CONTENT_CACHING_DISABLED", "CONTENT_CACHING_ENABLED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tetherator_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tetherator_status` ({0}), must be one of {1}"  # noqa: E501
                .format(tetherator_status, allowed_values)
            )

        self._tetherator_status = tetherator_status

    @property
    def total_bytes_are_since(self):
        """Gets the total_bytes_are_since of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_are_since of this ComputerContentCaching.  # noqa: E501
        :rtype: datetime
        """
        return self._total_bytes_are_since

    @total_bytes_are_since.setter
    def total_bytes_are_since(self, total_bytes_are_since):
        """Sets the total_bytes_are_since of this ComputerContentCaching.


        :param total_bytes_are_since: The total_bytes_are_since of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_are_since: datetime
        """

        self._total_bytes_are_since = total_bytes_are_since

    @property
    def total_bytes_dropped(self):
        """Gets the total_bytes_dropped of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_dropped of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_dropped

    @total_bytes_dropped.setter
    def total_bytes_dropped(self, total_bytes_dropped):
        """Sets the total_bytes_dropped of this ComputerContentCaching.


        :param total_bytes_dropped: The total_bytes_dropped of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_dropped: int
        """

        self._total_bytes_dropped = total_bytes_dropped

    @property
    def total_bytes_imported(self):
        """Gets the total_bytes_imported of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_imported of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_imported

    @total_bytes_imported.setter
    def total_bytes_imported(self, total_bytes_imported):
        """Sets the total_bytes_imported of this ComputerContentCaching.


        :param total_bytes_imported: The total_bytes_imported of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_imported: int
        """

        self._total_bytes_imported = total_bytes_imported

    @property
    def total_bytes_returned_to_children(self):
        """Gets the total_bytes_returned_to_children of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_returned_to_children of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_returned_to_children

    @total_bytes_returned_to_children.setter
    def total_bytes_returned_to_children(self, total_bytes_returned_to_children):
        """Sets the total_bytes_returned_to_children of this ComputerContentCaching.


        :param total_bytes_returned_to_children: The total_bytes_returned_to_children of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_returned_to_children: int
        """

        self._total_bytes_returned_to_children = total_bytes_returned_to_children

    @property
    def total_bytes_returned_to_clients(self):
        """Gets the total_bytes_returned_to_clients of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_returned_to_clients of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_returned_to_clients

    @total_bytes_returned_to_clients.setter
    def total_bytes_returned_to_clients(self, total_bytes_returned_to_clients):
        """Sets the total_bytes_returned_to_clients of this ComputerContentCaching.


        :param total_bytes_returned_to_clients: The total_bytes_returned_to_clients of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_returned_to_clients: int
        """

        self._total_bytes_returned_to_clients = total_bytes_returned_to_clients

    @property
    def total_bytes_returned_to_peers(self):
        """Gets the total_bytes_returned_to_peers of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_returned_to_peers of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_returned_to_peers

    @total_bytes_returned_to_peers.setter
    def total_bytes_returned_to_peers(self, total_bytes_returned_to_peers):
        """Sets the total_bytes_returned_to_peers of this ComputerContentCaching.


        :param total_bytes_returned_to_peers: The total_bytes_returned_to_peers of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_returned_to_peers: int
        """

        self._total_bytes_returned_to_peers = total_bytes_returned_to_peers

    @property
    def total_bytes_stored_from_origin(self):
        """Gets the total_bytes_stored_from_origin of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_stored_from_origin of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_stored_from_origin

    @total_bytes_stored_from_origin.setter
    def total_bytes_stored_from_origin(self, total_bytes_stored_from_origin):
        """Sets the total_bytes_stored_from_origin of this ComputerContentCaching.


        :param total_bytes_stored_from_origin: The total_bytes_stored_from_origin of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_stored_from_origin: int
        """

        self._total_bytes_stored_from_origin = total_bytes_stored_from_origin

    @property
    def total_bytes_stored_from_parents(self):
        """Gets the total_bytes_stored_from_parents of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_stored_from_parents of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_stored_from_parents

    @total_bytes_stored_from_parents.setter
    def total_bytes_stored_from_parents(self, total_bytes_stored_from_parents):
        """Sets the total_bytes_stored_from_parents of this ComputerContentCaching.


        :param total_bytes_stored_from_parents: The total_bytes_stored_from_parents of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_stored_from_parents: int
        """

        self._total_bytes_stored_from_parents = total_bytes_stored_from_parents

    @property
    def total_bytes_stored_from_peers(self):
        """Gets the total_bytes_stored_from_peers of this ComputerContentCaching.  # noqa: E501


        :return: The total_bytes_stored_from_peers of this ComputerContentCaching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_stored_from_peers

    @total_bytes_stored_from_peers.setter
    def total_bytes_stored_from_peers(self, total_bytes_stored_from_peers):
        """Sets the total_bytes_stored_from_peers of this ComputerContentCaching.


        :param total_bytes_stored_from_peers: The total_bytes_stored_from_peers of this ComputerContentCaching.  # noqa: E501
        :type total_bytes_stored_from_peers: int
        """

        self._total_bytes_stored_from_peers = total_bytes_stored_from_peers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerContentCaching):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerContentCaching):
            return True

        return self.to_dict() != other.to_dict()
