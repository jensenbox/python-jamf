# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerPurchase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'leased': 'bool',
        'purchased': 'bool',
        'po_number': 'str',
        'po_date': 'date',
        'vendor': 'str',
        'warranty_date': 'date',
        'apple_care_id': 'str',
        'lease_date': 'date',
        'purchase_price': 'str',
        'life_expectancy': 'int',
        'purchasing_account': 'str',
        'purchasing_contact': 'str',
        'extension_attributes': 'list[ComputerExtensionAttribute]'
    }

    attribute_map = {
        'leased': 'leased',
        'purchased': 'purchased',
        'po_number': 'poNumber',
        'po_date': 'poDate',
        'vendor': 'vendor',
        'warranty_date': 'warrantyDate',
        'apple_care_id': 'appleCareId',
        'lease_date': 'leaseDate',
        'purchase_price': 'purchasePrice',
        'life_expectancy': 'lifeExpectancy',
        'purchasing_account': 'purchasingAccount',
        'purchasing_contact': 'purchasingContact',
        'extension_attributes': 'extensionAttributes'
    }

    def __init__(self, leased=None, purchased=None, po_number=None, po_date=None, vendor=None, warranty_date=None, apple_care_id=None, lease_date=None, purchase_price=None, life_expectancy=None, purchasing_account=None, purchasing_contact=None, extension_attributes=None, local_vars_configuration=None):  # noqa: E501
        """ComputerPurchase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._leased = None
        self._purchased = None
        self._po_number = None
        self._po_date = None
        self._vendor = None
        self._warranty_date = None
        self._apple_care_id = None
        self._lease_date = None
        self._purchase_price = None
        self._life_expectancy = None
        self._purchasing_account = None
        self._purchasing_contact = None
        self._extension_attributes = None
        self.discriminator = None

        if leased is not None:
            self.leased = leased
        if purchased is not None:
            self.purchased = purchased
        if po_number is not None:
            self.po_number = po_number
        if po_date is not None:
            self.po_date = po_date
        if vendor is not None:
            self.vendor = vendor
        if warranty_date is not None:
            self.warranty_date = warranty_date
        if apple_care_id is not None:
            self.apple_care_id = apple_care_id
        if lease_date is not None:
            self.lease_date = lease_date
        if purchase_price is not None:
            self.purchase_price = purchase_price
        if life_expectancy is not None:
            self.life_expectancy = life_expectancy
        if purchasing_account is not None:
            self.purchasing_account = purchasing_account
        if purchasing_contact is not None:
            self.purchasing_contact = purchasing_contact
        if extension_attributes is not None:
            self.extension_attributes = extension_attributes

    @property
    def leased(self):
        """Gets the leased of this ComputerPurchase.  # noqa: E501


        :return: The leased of this ComputerPurchase.  # noqa: E501
        :rtype: bool
        """
        return self._leased

    @leased.setter
    def leased(self, leased):
        """Sets the leased of this ComputerPurchase.


        :param leased: The leased of this ComputerPurchase.  # noqa: E501
        :type leased: bool
        """

        self._leased = leased

    @property
    def purchased(self):
        """Gets the purchased of this ComputerPurchase.  # noqa: E501


        :return: The purchased of this ComputerPurchase.  # noqa: E501
        :rtype: bool
        """
        return self._purchased

    @purchased.setter
    def purchased(self, purchased):
        """Sets the purchased of this ComputerPurchase.


        :param purchased: The purchased of this ComputerPurchase.  # noqa: E501
        :type purchased: bool
        """

        self._purchased = purchased

    @property
    def po_number(self):
        """Gets the po_number of this ComputerPurchase.  # noqa: E501


        :return: The po_number of this ComputerPurchase.  # noqa: E501
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this ComputerPurchase.


        :param po_number: The po_number of this ComputerPurchase.  # noqa: E501
        :type po_number: str
        """

        self._po_number = po_number

    @property
    def po_date(self):
        """Gets the po_date of this ComputerPurchase.  # noqa: E501


        :return: The po_date of this ComputerPurchase.  # noqa: E501
        :rtype: date
        """
        return self._po_date

    @po_date.setter
    def po_date(self, po_date):
        """Sets the po_date of this ComputerPurchase.


        :param po_date: The po_date of this ComputerPurchase.  # noqa: E501
        :type po_date: date
        """

        self._po_date = po_date

    @property
    def vendor(self):
        """Gets the vendor of this ComputerPurchase.  # noqa: E501


        :return: The vendor of this ComputerPurchase.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ComputerPurchase.


        :param vendor: The vendor of this ComputerPurchase.  # noqa: E501
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def warranty_date(self):
        """Gets the warranty_date of this ComputerPurchase.  # noqa: E501


        :return: The warranty_date of this ComputerPurchase.  # noqa: E501
        :rtype: date
        """
        return self._warranty_date

    @warranty_date.setter
    def warranty_date(self, warranty_date):
        """Sets the warranty_date of this ComputerPurchase.


        :param warranty_date: The warranty_date of this ComputerPurchase.  # noqa: E501
        :type warranty_date: date
        """

        self._warranty_date = warranty_date

    @property
    def apple_care_id(self):
        """Gets the apple_care_id of this ComputerPurchase.  # noqa: E501


        :return: The apple_care_id of this ComputerPurchase.  # noqa: E501
        :rtype: str
        """
        return self._apple_care_id

    @apple_care_id.setter
    def apple_care_id(self, apple_care_id):
        """Sets the apple_care_id of this ComputerPurchase.


        :param apple_care_id: The apple_care_id of this ComputerPurchase.  # noqa: E501
        :type apple_care_id: str
        """

        self._apple_care_id = apple_care_id

    @property
    def lease_date(self):
        """Gets the lease_date of this ComputerPurchase.  # noqa: E501


        :return: The lease_date of this ComputerPurchase.  # noqa: E501
        :rtype: date
        """
        return self._lease_date

    @lease_date.setter
    def lease_date(self, lease_date):
        """Sets the lease_date of this ComputerPurchase.


        :param lease_date: The lease_date of this ComputerPurchase.  # noqa: E501
        :type lease_date: date
        """

        self._lease_date = lease_date

    @property
    def purchase_price(self):
        """Gets the purchase_price of this ComputerPurchase.  # noqa: E501


        :return: The purchase_price of this ComputerPurchase.  # noqa: E501
        :rtype: str
        """
        return self._purchase_price

    @purchase_price.setter
    def purchase_price(self, purchase_price):
        """Sets the purchase_price of this ComputerPurchase.


        :param purchase_price: The purchase_price of this ComputerPurchase.  # noqa: E501
        :type purchase_price: str
        """

        self._purchase_price = purchase_price

    @property
    def life_expectancy(self):
        """Gets the life_expectancy of this ComputerPurchase.  # noqa: E501


        :return: The life_expectancy of this ComputerPurchase.  # noqa: E501
        :rtype: int
        """
        return self._life_expectancy

    @life_expectancy.setter
    def life_expectancy(self, life_expectancy):
        """Sets the life_expectancy of this ComputerPurchase.


        :param life_expectancy: The life_expectancy of this ComputerPurchase.  # noqa: E501
        :type life_expectancy: int
        """

        self._life_expectancy = life_expectancy

    @property
    def purchasing_account(self):
        """Gets the purchasing_account of this ComputerPurchase.  # noqa: E501


        :return: The purchasing_account of this ComputerPurchase.  # noqa: E501
        :rtype: str
        """
        return self._purchasing_account

    @purchasing_account.setter
    def purchasing_account(self, purchasing_account):
        """Sets the purchasing_account of this ComputerPurchase.


        :param purchasing_account: The purchasing_account of this ComputerPurchase.  # noqa: E501
        :type purchasing_account: str
        """

        self._purchasing_account = purchasing_account

    @property
    def purchasing_contact(self):
        """Gets the purchasing_contact of this ComputerPurchase.  # noqa: E501


        :return: The purchasing_contact of this ComputerPurchase.  # noqa: E501
        :rtype: str
        """
        return self._purchasing_contact

    @purchasing_contact.setter
    def purchasing_contact(self, purchasing_contact):
        """Sets the purchasing_contact of this ComputerPurchase.


        :param purchasing_contact: The purchasing_contact of this ComputerPurchase.  # noqa: E501
        :type purchasing_contact: str
        """

        self._purchasing_contact = purchasing_contact

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this ComputerPurchase.  # noqa: E501


        :return: The extension_attributes of this ComputerPurchase.  # noqa: E501
        :rtype: list[ComputerExtensionAttribute]
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this ComputerPurchase.


        :param extension_attributes: The extension_attributes of this ComputerPurchase.  # noqa: E501
        :type extension_attributes: list[ComputerExtensionAttribute]
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerPurchase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerPurchase):
            return True

        return self.to_dict() != other.to_dict()
