# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TimeZone(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'zone_id': 'str',
        'region': 'str',
        'display_name': 'str'
    }

    attribute_map = {
        'zone_id': 'zoneId',
        'region': 'region',
        'display_name': 'displayName'
    }

    def __init__(self, zone_id=None, region=None, display_name=None, local_vars_configuration=None):  # noqa: E501
        """TimeZone - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._zone_id = None
        self._region = None
        self._display_name = None
        self.discriminator = None

        if zone_id is not None:
            self.zone_id = zone_id
        if region is not None:
            self.region = region
        if display_name is not None:
            self.display_name = display_name

    @property
    def zone_id(self):
        """Gets the zone_id of this TimeZone.  # noqa: E501


        :return: The zone_id of this TimeZone.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this TimeZone.


        :param zone_id: The zone_id of this TimeZone.  # noqa: E501
        :type zone_id: str
        """

        self._zone_id = zone_id

    @property
    def region(self):
        """Gets the region of this TimeZone.  # noqa: E501


        :return: The region of this TimeZone.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TimeZone.


        :param region: The region of this TimeZone.  # noqa: E501
        :type region: str
        """
        allowed_values = ["Africa", "America", "Asia", "Atlantic", "Australia", "Europe", "Indian", "Pacific", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and region not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"  # noqa: E501
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def display_name(self):
        """Gets the display_name of this TimeZone.  # noqa: E501


        :return: The display_name of this TimeZone.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TimeZone.


        :param display_name: The display_name of this TimeZone.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeZone):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeZone):
            return True

        return self.to_dict() != other.to_dict()
