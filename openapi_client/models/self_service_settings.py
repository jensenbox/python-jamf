# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SelfServiceSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'install_settings': 'SelfServiceInstallSettings',
        'login_settings': 'SelfServiceLoginSettings',
        'configuration_settings': 'SelfServiceInteractionSettings'
    }

    attribute_map = {
        'install_settings': 'installSettings',
        'login_settings': 'loginSettings',
        'configuration_settings': 'configurationSettings'
    }

    def __init__(self, install_settings=None, login_settings=None, configuration_settings=None, local_vars_configuration=None):  # noqa: E501
        """SelfServiceSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._install_settings = None
        self._login_settings = None
        self._configuration_settings = None
        self.discriminator = None

        if install_settings is not None:
            self.install_settings = install_settings
        if login_settings is not None:
            self.login_settings = login_settings
        if configuration_settings is not None:
            self.configuration_settings = configuration_settings

    @property
    def install_settings(self):
        """Gets the install_settings of this SelfServiceSettings.  # noqa: E501


        :return: The install_settings of this SelfServiceSettings.  # noqa: E501
        :rtype: SelfServiceInstallSettings
        """
        return self._install_settings

    @install_settings.setter
    def install_settings(self, install_settings):
        """Sets the install_settings of this SelfServiceSettings.


        :param install_settings: The install_settings of this SelfServiceSettings.  # noqa: E501
        :type install_settings: SelfServiceInstallSettings
        """

        self._install_settings = install_settings

    @property
    def login_settings(self):
        """Gets the login_settings of this SelfServiceSettings.  # noqa: E501


        :return: The login_settings of this SelfServiceSettings.  # noqa: E501
        :rtype: SelfServiceLoginSettings
        """
        return self._login_settings

    @login_settings.setter
    def login_settings(self, login_settings):
        """Sets the login_settings of this SelfServiceSettings.


        :param login_settings: The login_settings of this SelfServiceSettings.  # noqa: E501
        :type login_settings: SelfServiceLoginSettings
        """

        self._login_settings = login_settings

    @property
    def configuration_settings(self):
        """Gets the configuration_settings of this SelfServiceSettings.  # noqa: E501


        :return: The configuration_settings of this SelfServiceSettings.  # noqa: E501
        :rtype: SelfServiceInteractionSettings
        """
        return self._configuration_settings

    @configuration_settings.setter
    def configuration_settings(self, configuration_settings):
        """Sets the configuration_settings of this SelfServiceSettings.


        :param configuration_settings: The configuration_settings of this SelfServiceSettings.  # noqa: E501
        :type configuration_settings: SelfServiceInteractionSettings
        """

        self._configuration_settings = configuration_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelfServiceSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelfServiceSettings):
            return True

        return self.to_dict() != other.to_dict()
