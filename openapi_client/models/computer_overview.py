# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerOverview(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'location': 'ComputerLocation',
        'name': 'str',
        'udid': 'str',
        'serial_number': 'str',
        'last_contact_date': 'str',
        'last_report_date': 'str',
        'last_enrolled_date': 'str',
        'operating_system_version': 'str',
        'operating_system_build': 'str',
        'ip_address': 'str',
        'mac_address': 'str',
        'asset_tag': 'str',
        'model_identifier': 'str',
        'mdm_access_rights': 'int',
        'is_managed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'name': 'name',
        'udid': 'udid',
        'serial_number': 'serialNumber',
        'last_contact_date': 'lastContactDate',
        'last_report_date': 'lastReportDate',
        'last_enrolled_date': 'lastEnrolledDate',
        'operating_system_version': 'operatingSystemVersion',
        'operating_system_build': 'operatingSystemBuild',
        'ip_address': 'ipAddress',
        'mac_address': 'macAddress',
        'asset_tag': 'assetTag',
        'model_identifier': 'modelIdentifier',
        'mdm_access_rights': 'mdmAccessRights',
        'is_managed': 'isManaged'
    }

    def __init__(self, id=None, location=None, name=None, udid=None, serial_number=None, last_contact_date=None, last_report_date=None, last_enrolled_date=None, operating_system_version=None, operating_system_build=None, ip_address=None, mac_address=None, asset_tag=None, model_identifier=None, mdm_access_rights=None, is_managed=None, local_vars_configuration=None):  # noqa: E501
        """ComputerOverview - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._location = None
        self._name = None
        self._udid = None
        self._serial_number = None
        self._last_contact_date = None
        self._last_report_date = None
        self._last_enrolled_date = None
        self._operating_system_version = None
        self._operating_system_build = None
        self._ip_address = None
        self._mac_address = None
        self._asset_tag = None
        self._model_identifier = None
        self._mdm_access_rights = None
        self._is_managed = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if udid is not None:
            self.udid = udid
        if serial_number is not None:
            self.serial_number = serial_number
        if last_contact_date is not None:
            self.last_contact_date = last_contact_date
        if last_report_date is not None:
            self.last_report_date = last_report_date
        if last_enrolled_date is not None:
            self.last_enrolled_date = last_enrolled_date
        if operating_system_version is not None:
            self.operating_system_version = operating_system_version
        if operating_system_build is not None:
            self.operating_system_build = operating_system_build
        if ip_address is not None:
            self.ip_address = ip_address
        if mac_address is not None:
            self.mac_address = mac_address
        if asset_tag is not None:
            self.asset_tag = asset_tag
        if model_identifier is not None:
            self.model_identifier = model_identifier
        if mdm_access_rights is not None:
            self.mdm_access_rights = mdm_access_rights
        if is_managed is not None:
            self.is_managed = is_managed

    @property
    def id(self):
        """Gets the id of this ComputerOverview.  # noqa: E501


        :return: The id of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComputerOverview.


        :param id: The id of this ComputerOverview.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this ComputerOverview.  # noqa: E501


        :return: The location of this ComputerOverview.  # noqa: E501
        :rtype: ComputerLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ComputerOverview.


        :param location: The location of this ComputerOverview.  # noqa: E501
        :type location: ComputerLocation
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this ComputerOverview.  # noqa: E501


        :return: The name of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputerOverview.


        :param name: The name of this ComputerOverview.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def udid(self):
        """Gets the udid of this ComputerOverview.  # noqa: E501


        :return: The udid of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this ComputerOverview.


        :param udid: The udid of this ComputerOverview.  # noqa: E501
        :type udid: str
        """

        self._udid = udid

    @property
    def serial_number(self):
        """Gets the serial_number of this ComputerOverview.  # noqa: E501


        :return: The serial_number of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ComputerOverview.


        :param serial_number: The serial_number of this ComputerOverview.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def last_contact_date(self):
        """Gets the last_contact_date of this ComputerOverview.  # noqa: E501


        :return: The last_contact_date of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._last_contact_date

    @last_contact_date.setter
    def last_contact_date(self, last_contact_date):
        """Sets the last_contact_date of this ComputerOverview.


        :param last_contact_date: The last_contact_date of this ComputerOverview.  # noqa: E501
        :type last_contact_date: str
        """

        self._last_contact_date = last_contact_date

    @property
    def last_report_date(self):
        """Gets the last_report_date of this ComputerOverview.  # noqa: E501


        :return: The last_report_date of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._last_report_date

    @last_report_date.setter
    def last_report_date(self, last_report_date):
        """Sets the last_report_date of this ComputerOverview.


        :param last_report_date: The last_report_date of this ComputerOverview.  # noqa: E501
        :type last_report_date: str
        """

        self._last_report_date = last_report_date

    @property
    def last_enrolled_date(self):
        """Gets the last_enrolled_date of this ComputerOverview.  # noqa: E501


        :return: The last_enrolled_date of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._last_enrolled_date

    @last_enrolled_date.setter
    def last_enrolled_date(self, last_enrolled_date):
        """Sets the last_enrolled_date of this ComputerOverview.


        :param last_enrolled_date: The last_enrolled_date of this ComputerOverview.  # noqa: E501
        :type last_enrolled_date: str
        """

        self._last_enrolled_date = last_enrolled_date

    @property
    def operating_system_version(self):
        """Gets the operating_system_version of this ComputerOverview.  # noqa: E501


        :return: The operating_system_version of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._operating_system_version

    @operating_system_version.setter
    def operating_system_version(self, operating_system_version):
        """Sets the operating_system_version of this ComputerOverview.


        :param operating_system_version: The operating_system_version of this ComputerOverview.  # noqa: E501
        :type operating_system_version: str
        """

        self._operating_system_version = operating_system_version

    @property
    def operating_system_build(self):
        """Gets the operating_system_build of this ComputerOverview.  # noqa: E501


        :return: The operating_system_build of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._operating_system_build

    @operating_system_build.setter
    def operating_system_build(self, operating_system_build):
        """Sets the operating_system_build of this ComputerOverview.


        :param operating_system_build: The operating_system_build of this ComputerOverview.  # noqa: E501
        :type operating_system_build: str
        """

        self._operating_system_build = operating_system_build

    @property
    def ip_address(self):
        """Gets the ip_address of this ComputerOverview.  # noqa: E501


        :return: The ip_address of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ComputerOverview.


        :param ip_address: The ip_address of this ComputerOverview.  # noqa: E501
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def mac_address(self):
        """Gets the mac_address of this ComputerOverview.  # noqa: E501


        :return: The mac_address of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ComputerOverview.


        :param mac_address: The mac_address of this ComputerOverview.  # noqa: E501
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def asset_tag(self):
        """Gets the asset_tag of this ComputerOverview.  # noqa: E501


        :return: The asset_tag of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this ComputerOverview.


        :param asset_tag: The asset_tag of this ComputerOverview.  # noqa: E501
        :type asset_tag: str
        """

        self._asset_tag = asset_tag

    @property
    def model_identifier(self):
        """Gets the model_identifier of this ComputerOverview.  # noqa: E501


        :return: The model_identifier of this ComputerOverview.  # noqa: E501
        :rtype: str
        """
        return self._model_identifier

    @model_identifier.setter
    def model_identifier(self, model_identifier):
        """Sets the model_identifier of this ComputerOverview.


        :param model_identifier: The model_identifier of this ComputerOverview.  # noqa: E501
        :type model_identifier: str
        """

        self._model_identifier = model_identifier

    @property
    def mdm_access_rights(self):
        """Gets the mdm_access_rights of this ComputerOverview.  # noqa: E501


        :return: The mdm_access_rights of this ComputerOverview.  # noqa: E501
        :rtype: int
        """
        return self._mdm_access_rights

    @mdm_access_rights.setter
    def mdm_access_rights(self, mdm_access_rights):
        """Sets the mdm_access_rights of this ComputerOverview.


        :param mdm_access_rights: The mdm_access_rights of this ComputerOverview.  # noqa: E501
        :type mdm_access_rights: int
        """

        self._mdm_access_rights = mdm_access_rights

    @property
    def is_managed(self):
        """Gets the is_managed of this ComputerOverview.  # noqa: E501


        :return: The is_managed of this ComputerOverview.  # noqa: E501
        :rtype: bool
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this ComputerOverview.


        :param is_managed: The is_managed of this ComputerOverview.  # noqa: E501
        :type is_managed: bool
        """

        self._is_managed = is_managed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerOverview):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerOverview):
            return True

        return self.to_dict() != other.to_dict()
