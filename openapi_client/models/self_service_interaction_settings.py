# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SelfServiceInteractionSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_notifications_enabled': 'bool',
        'default_home_category_id': 'int',
        'bookmarks_name': 'str',
        'application_name': 'str'
    }

    attribute_map = {
        'is_notifications_enabled': 'isNotificationsEnabled',
        'default_home_category_id': 'defaultHomeCategoryId',
        'bookmarks_name': 'bookmarksName',
        'application_name': 'applicationName'
    }

    def __init__(self, is_notifications_enabled=False, default_home_category_id=0, bookmarks_name=None, application_name=None, local_vars_configuration=None):  # noqa: E501
        """SelfServiceInteractionSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_notifications_enabled = None
        self._default_home_category_id = None
        self._bookmarks_name = None
        self._application_name = None
        self.discriminator = None

        if is_notifications_enabled is not None:
            self.is_notifications_enabled = is_notifications_enabled
        if default_home_category_id is not None:
            self.default_home_category_id = default_home_category_id
        self.bookmarks_name = bookmarks_name
        self.application_name = application_name

    @property
    def is_notifications_enabled(self):
        """Gets the is_notifications_enabled of this SelfServiceInteractionSettings.  # noqa: E501

        global Self Service setting for if notifications are on or off   # noqa: E501

        :return: The is_notifications_enabled of this SelfServiceInteractionSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_notifications_enabled

    @is_notifications_enabled.setter
    def is_notifications_enabled(self, is_notifications_enabled):
        """Sets the is_notifications_enabled of this SelfServiceInteractionSettings.

        global Self Service setting for if notifications are on or off   # noqa: E501

        :param is_notifications_enabled: The is_notifications_enabled of this SelfServiceInteractionSettings.  # noqa: E501
        :type is_notifications_enabled: bool
        """

        self._is_notifications_enabled = is_notifications_enabled

    @property
    def default_home_category_id(self):
        """Gets the default_home_category_id of this SelfServiceInteractionSettings.  # noqa: E501

        id for the default home category in Self Service   # noqa: E501

        :return: The default_home_category_id of this SelfServiceInteractionSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_home_category_id

    @default_home_category_id.setter
    def default_home_category_id(self, default_home_category_id):
        """Sets the default_home_category_id of this SelfServiceInteractionSettings.

        id for the default home category in Self Service   # noqa: E501

        :param default_home_category_id: The default_home_category_id of this SelfServiceInteractionSettings.  # noqa: E501
        :type default_home_category_id: int
        """

        self._default_home_category_id = default_home_category_id

    @property
    def bookmarks_name(self):
        """Gets the bookmarks_name of this SelfServiceInteractionSettings.  # noqa: E501

        renamed string for bookmarks if the admin wishes   # noqa: E501

        :return: The bookmarks_name of this SelfServiceInteractionSettings.  # noqa: E501
        :rtype: str
        """
        return self._bookmarks_name

    @bookmarks_name.setter
    def bookmarks_name(self, bookmarks_name):
        """Sets the bookmarks_name of this SelfServiceInteractionSettings.

        renamed string for bookmarks if the admin wishes   # noqa: E501

        :param bookmarks_name: The bookmarks_name of this SelfServiceInteractionSettings.  # noqa: E501
        :type bookmarks_name: str
        """
        if self.local_vars_configuration.client_side_validation and bookmarks_name is None:  # noqa: E501
            raise ValueError("Invalid value for `bookmarks_name`, must not be `None`")  # noqa: E501

        self._bookmarks_name = bookmarks_name

    @property
    def application_name(self):
        """Gets the application_name of this SelfServiceInteractionSettings.  # noqa: E501

        customized application display name   # noqa: E501

        :return: The application_name of this SelfServiceInteractionSettings.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this SelfServiceInteractionSettings.

        customized application display name   # noqa: E501

        :param application_name: The application_name of this SelfServiceInteractionSettings.  # noqa: E501
        :type application_name: str
        """
        if self.local_vars_configuration.client_side_validation and application_name is None:  # noqa: E501
            raise ValueError("Invalid value for `application_name`, must not be `None`")  # noqa: E501

        self._application_name = application_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelfServiceInteractionSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelfServiceInteractionSettings):
            return True

        return self.to_dict() != other.to_dict()
