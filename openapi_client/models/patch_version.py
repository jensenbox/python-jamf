# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PatchVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'absolute_order_id': 'int',
        'version': 'str',
        'on_version': 'int'
    }

    attribute_map = {
        'absolute_order_id': 'absoluteOrderId',
        'version': 'version',
        'on_version': 'onVersion'
    }

    def __init__(self, absolute_order_id=None, version=None, on_version=None, local_vars_configuration=None):  # noqa: E501
        """PatchVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._absolute_order_id = None
        self._version = None
        self._on_version = None
        self.discriminator = None

        if absolute_order_id is not None:
            self.absolute_order_id = absolute_order_id
        if version is not None:
            self.version = version
        if on_version is not None:
            self.on_version = on_version

    @property
    def absolute_order_id(self):
        """Gets the absolute_order_id of this PatchVersion.  # noqa: E501


        :return: The absolute_order_id of this PatchVersion.  # noqa: E501
        :rtype: int
        """
        return self._absolute_order_id

    @absolute_order_id.setter
    def absolute_order_id(self, absolute_order_id):
        """Sets the absolute_order_id of this PatchVersion.


        :param absolute_order_id: The absolute_order_id of this PatchVersion.  # noqa: E501
        :type absolute_order_id: int
        """

        self._absolute_order_id = absolute_order_id

    @property
    def version(self):
        """Gets the version of this PatchVersion.  # noqa: E501


        :return: The version of this PatchVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PatchVersion.


        :param version: The version of this PatchVersion.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def on_version(self):
        """Gets the on_version of this PatchVersion.  # noqa: E501


        :return: The on_version of this PatchVersion.  # noqa: E501
        :rtype: int
        """
        return self._on_version

    @on_version.setter
    def on_version(self, on_version):
        """Sets the on_version of this PatchVersion.


        :param on_version: The on_version of this PatchVersion.  # noqa: E501
        :type on_version: int
        """

        self._on_version = on_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchVersion):
            return True

        return self.to_dict() != other.to_dict()
