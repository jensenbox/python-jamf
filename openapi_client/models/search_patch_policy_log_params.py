# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SearchPatchPolicyLogParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'page_number': 'int',
        'page_size': 'int',
        'order_by': 'list[OrderBy]',
        'filter': 'list[Filter]',
        'is_load_to_end': 'bool',
        'patch_policy_id': 'int',
        'is_latest': 'bool'
    }

    attribute_map = {
        'page_number': 'pageNumber',
        'page_size': 'pageSize',
        'order_by': 'orderBy',
        'filter': 'filter',
        'is_load_to_end': 'isLoadToEnd',
        'patch_policy_id': 'patchPolicyId',
        'is_latest': 'isLatest'
    }

    def __init__(self, page_number=None, page_size=None, order_by=None, filter=None, is_load_to_end=None, patch_policy_id=None, is_latest=False, local_vars_configuration=None):  # noqa: E501
        """SearchPatchPolicyLogParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._page_number = None
        self._page_size = None
        self._order_by = None
        self._filter = None
        self._is_load_to_end = None
        self._patch_policy_id = None
        self._is_latest = None
        self.discriminator = None

        if page_number is not None:
            self.page_number = page_number
        if page_size is not None:
            self.page_size = page_size
        if order_by is not None:
            self.order_by = order_by
        if filter is not None:
            self.filter = filter
        if is_load_to_end is not None:
            self.is_load_to_end = is_load_to_end
        if patch_policy_id is not None:
            self.patch_policy_id = patch_policy_id
        if is_latest is not None:
            self.is_latest = is_latest

    @property
    def page_number(self):
        """Gets the page_number of this SearchPatchPolicyLogParams.  # noqa: E501


        :return: The page_number of this SearchPatchPolicyLogParams.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this SearchPatchPolicyLogParams.


        :param page_number: The page_number of this SearchPatchPolicyLogParams.  # noqa: E501
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this SearchPatchPolicyLogParams.  # noqa: E501


        :return: The page_size of this SearchPatchPolicyLogParams.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchPatchPolicyLogParams.


        :param page_size: The page_size of this SearchPatchPolicyLogParams.  # noqa: E501
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def order_by(self):
        """Gets the order_by of this SearchPatchPolicyLogParams.  # noqa: E501


        :return: The order_by of this SearchPatchPolicyLogParams.  # noqa: E501
        :rtype: list[OrderBy]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SearchPatchPolicyLogParams.


        :param order_by: The order_by of this SearchPatchPolicyLogParams.  # noqa: E501
        :type order_by: list[OrderBy]
        """

        self._order_by = order_by

    @property
    def filter(self):
        """Gets the filter of this SearchPatchPolicyLogParams.  # noqa: E501


        :return: The filter of this SearchPatchPolicyLogParams.  # noqa: E501
        :rtype: list[Filter]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SearchPatchPolicyLogParams.


        :param filter: The filter of this SearchPatchPolicyLogParams.  # noqa: E501
        :type filter: list[Filter]
        """

        self._filter = filter

    @property
    def is_load_to_end(self):
        """Gets the is_load_to_end of this SearchPatchPolicyLogParams.  # noqa: E501


        :return: The is_load_to_end of this SearchPatchPolicyLogParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_load_to_end

    @is_load_to_end.setter
    def is_load_to_end(self, is_load_to_end):
        """Sets the is_load_to_end of this SearchPatchPolicyLogParams.


        :param is_load_to_end: The is_load_to_end of this SearchPatchPolicyLogParams.  # noqa: E501
        :type is_load_to_end: bool
        """

        self._is_load_to_end = is_load_to_end

    @property
    def patch_policy_id(self):
        """Gets the patch_policy_id of this SearchPatchPolicyLogParams.  # noqa: E501


        :return: The patch_policy_id of this SearchPatchPolicyLogParams.  # noqa: E501
        :rtype: int
        """
        return self._patch_policy_id

    @patch_policy_id.setter
    def patch_policy_id(self, patch_policy_id):
        """Sets the patch_policy_id of this SearchPatchPolicyLogParams.


        :param patch_policy_id: The patch_policy_id of this SearchPatchPolicyLogParams.  # noqa: E501
        :type patch_policy_id: int
        """

        self._patch_policy_id = patch_policy_id

    @property
    def is_latest(self):
        """Gets the is_latest of this SearchPatchPolicyLogParams.  # noqa: E501


        :return: The is_latest of this SearchPatchPolicyLogParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this SearchPatchPolicyLogParams.


        :param is_latest: The is_latest of this SearchPatchPolicyLogParams.  # noqa: E501
        :type is_latest: bool
        """

        self._is_latest = is_latest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchPatchPolicyLogParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchPatchPolicyLogParams):
            return True

        return self.to_dict() != other.to_dict()
