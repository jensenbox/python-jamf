# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VenafiCaRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'username': 'str',
        'password': 'str',
        'password_configured': 'bool',
        'proxy_address': 'str',
        'revocation_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'username': 'username',
        'password': 'password',
        'password_configured': 'passwordConfigured',
        'proxy_address': 'proxyAddress',
        'revocation_enabled': 'revocationEnabled'
    }

    def __init__(self, id=None, name=None, username=None, password=None, password_configured=None, proxy_address=None, revocation_enabled=None, local_vars_configuration=None):  # noqa: E501
        """VenafiCaRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._username = None
        self._password = None
        self._password_configured = None
        self._proxy_address = None
        self._revocation_enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if password_configured is not None:
            self.password_configured = password_configured
        if proxy_address is not None:
            self.proxy_address = proxy_address
        if revocation_enabled is not None:
            self.revocation_enabled = revocation_enabled

    @property
    def id(self):
        """Gets the id of this VenafiCaRecord.  # noqa: E501


        :return: The id of this VenafiCaRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VenafiCaRecord.


        :param id: The id of this VenafiCaRecord.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VenafiCaRecord.  # noqa: E501


        :return: The name of this VenafiCaRecord.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VenafiCaRecord.


        :param name: The name of this VenafiCaRecord.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def username(self):
        """Gets the username of this VenafiCaRecord.  # noqa: E501


        :return: The username of this VenafiCaRecord.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VenafiCaRecord.


        :param username: The username of this VenafiCaRecord.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this VenafiCaRecord.  # noqa: E501


        :return: The password of this VenafiCaRecord.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this VenafiCaRecord.


        :param password: The password of this VenafiCaRecord.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def password_configured(self):
        """Gets the password_configured of this VenafiCaRecord.  # noqa: E501


        :return: The password_configured of this VenafiCaRecord.  # noqa: E501
        :rtype: bool
        """
        return self._password_configured

    @password_configured.setter
    def password_configured(self, password_configured):
        """Sets the password_configured of this VenafiCaRecord.


        :param password_configured: The password_configured of this VenafiCaRecord.  # noqa: E501
        :type password_configured: bool
        """

        self._password_configured = password_configured

    @property
    def proxy_address(self):
        """Gets the proxy_address of this VenafiCaRecord.  # noqa: E501


        :return: The proxy_address of this VenafiCaRecord.  # noqa: E501
        :rtype: str
        """
        return self._proxy_address

    @proxy_address.setter
    def proxy_address(self, proxy_address):
        """Sets the proxy_address of this VenafiCaRecord.


        :param proxy_address: The proxy_address of this VenafiCaRecord.  # noqa: E501
        :type proxy_address: str
        """

        self._proxy_address = proxy_address

    @property
    def revocation_enabled(self):
        """Gets the revocation_enabled of this VenafiCaRecord.  # noqa: E501


        :return: The revocation_enabled of this VenafiCaRecord.  # noqa: E501
        :rtype: bool
        """
        return self._revocation_enabled

    @revocation_enabled.setter
    def revocation_enabled(self, revocation_enabled):
        """Sets the revocation_enabled of this VenafiCaRecord.


        :param revocation_enabled: The revocation_enabled of this VenafiCaRecord.  # noqa: E501
        :type revocation_enabled: bool
        """

        self._revocation_enabled = revocation_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VenafiCaRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VenafiCaRecord):
            return True

        return self.to_dict() != other.to_dict()
