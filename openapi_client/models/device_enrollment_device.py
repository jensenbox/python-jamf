# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DeviceEnrollmentDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'device_enrollment_program_instance_id': 'str',
        'prestage_id': 'str',
        'serial_number': 'str',
        'description': 'str',
        'model': 'str',
        'color': 'str',
        'asset_tag': 'str',
        'profile_status': 'str',
        'sync_state': 'AssignRemoveProfileResponseSyncState',
        'profile_assign_time': 'str',
        'profile_push_time': 'str',
        'device_assigned_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'device_enrollment_program_instance_id': 'deviceEnrollmentProgramInstanceId',
        'prestage_id': 'prestageId',
        'serial_number': 'serialNumber',
        'description': 'description',
        'model': 'model',
        'color': 'color',
        'asset_tag': 'assetTag',
        'profile_status': 'profileStatus',
        'sync_state': 'syncState',
        'profile_assign_time': 'profileAssignTime',
        'profile_push_time': 'profilePushTime',
        'device_assigned_date': 'deviceAssignedDate'
    }

    def __init__(self, id=None, device_enrollment_program_instance_id=None, prestage_id=None, serial_number=None, description=None, model=None, color=None, asset_tag=None, profile_status=None, sync_state=None, profile_assign_time=None, profile_push_time=None, device_assigned_date=None, local_vars_configuration=None):  # noqa: E501
        """DeviceEnrollmentDevice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._device_enrollment_program_instance_id = None
        self._prestage_id = None
        self._serial_number = None
        self._description = None
        self._model = None
        self._color = None
        self._asset_tag = None
        self._profile_status = None
        self._sync_state = None
        self._profile_assign_time = None
        self._profile_push_time = None
        self._device_assigned_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device_enrollment_program_instance_id is not None:
            self.device_enrollment_program_instance_id = device_enrollment_program_instance_id
        if prestage_id is not None:
            self.prestage_id = prestage_id
        if serial_number is not None:
            self.serial_number = serial_number
        if description is not None:
            self.description = description
        if model is not None:
            self.model = model
        if color is not None:
            self.color = color
        if asset_tag is not None:
            self.asset_tag = asset_tag
        if profile_status is not None:
            self.profile_status = profile_status
        if sync_state is not None:
            self.sync_state = sync_state
        if profile_assign_time is not None:
            self.profile_assign_time = profile_assign_time
        if profile_push_time is not None:
            self.profile_push_time = profile_push_time
        if device_assigned_date is not None:
            self.device_assigned_date = device_assigned_date

    @property
    def id(self):
        """Gets the id of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The id of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceEnrollmentDevice.


        :param id: The id of this DeviceEnrollmentDevice.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def device_enrollment_program_instance_id(self):
        """Gets the device_enrollment_program_instance_id of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The device_enrollment_program_instance_id of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._device_enrollment_program_instance_id

    @device_enrollment_program_instance_id.setter
    def device_enrollment_program_instance_id(self, device_enrollment_program_instance_id):
        """Sets the device_enrollment_program_instance_id of this DeviceEnrollmentDevice.


        :param device_enrollment_program_instance_id: The device_enrollment_program_instance_id of this DeviceEnrollmentDevice.  # noqa: E501
        :type device_enrollment_program_instance_id: str
        """

        self._device_enrollment_program_instance_id = device_enrollment_program_instance_id

    @property
    def prestage_id(self):
        """Gets the prestage_id of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The prestage_id of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._prestage_id

    @prestage_id.setter
    def prestage_id(self, prestage_id):
        """Sets the prestage_id of this DeviceEnrollmentDevice.


        :param prestage_id: The prestage_id of this DeviceEnrollmentDevice.  # noqa: E501
        :type prestage_id: str
        """

        self._prestage_id = prestage_id

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The serial_number of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceEnrollmentDevice.


        :param serial_number: The serial_number of this DeviceEnrollmentDevice.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def description(self):
        """Gets the description of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The description of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceEnrollmentDevice.


        :param description: The description of this DeviceEnrollmentDevice.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def model(self):
        """Gets the model of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The model of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceEnrollmentDevice.


        :param model: The model of this DeviceEnrollmentDevice.  # noqa: E501
        :type model: str
        """

        self._model = model

    @property
    def color(self):
        """Gets the color of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The color of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DeviceEnrollmentDevice.


        :param color: The color of this DeviceEnrollmentDevice.  # noqa: E501
        :type color: str
        """

        self._color = color

    @property
    def asset_tag(self):
        """Gets the asset_tag of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The asset_tag of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this DeviceEnrollmentDevice.


        :param asset_tag: The asset_tag of this DeviceEnrollmentDevice.  # noqa: E501
        :type asset_tag: str
        """

        self._asset_tag = asset_tag

    @property
    def profile_status(self):
        """Gets the profile_status of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The profile_status of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._profile_status

    @profile_status.setter
    def profile_status(self, profile_status):
        """Sets the profile_status of this DeviceEnrollmentDevice.


        :param profile_status: The profile_status of this DeviceEnrollmentDevice.  # noqa: E501
        :type profile_status: str
        """
        allowed_values = ["EMPTY", "ASSIGNED", "PUSHED", "REMOVED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and profile_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `profile_status` ({0}), must be one of {1}"  # noqa: E501
                .format(profile_status, allowed_values)
            )

        self._profile_status = profile_status

    @property
    def sync_state(self):
        """Gets the sync_state of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The sync_state of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: AssignRemoveProfileResponseSyncState
        """
        return self._sync_state

    @sync_state.setter
    def sync_state(self, sync_state):
        """Sets the sync_state of this DeviceEnrollmentDevice.


        :param sync_state: The sync_state of this DeviceEnrollmentDevice.  # noqa: E501
        :type sync_state: AssignRemoveProfileResponseSyncState
        """

        self._sync_state = sync_state

    @property
    def profile_assign_time(self):
        """Gets the profile_assign_time of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The profile_assign_time of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._profile_assign_time

    @profile_assign_time.setter
    def profile_assign_time(self, profile_assign_time):
        """Sets the profile_assign_time of this DeviceEnrollmentDevice.


        :param profile_assign_time: The profile_assign_time of this DeviceEnrollmentDevice.  # noqa: E501
        :type profile_assign_time: str
        """

        self._profile_assign_time = profile_assign_time

    @property
    def profile_push_time(self):
        """Gets the profile_push_time of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The profile_push_time of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._profile_push_time

    @profile_push_time.setter
    def profile_push_time(self, profile_push_time):
        """Sets the profile_push_time of this DeviceEnrollmentDevice.


        :param profile_push_time: The profile_push_time of this DeviceEnrollmentDevice.  # noqa: E501
        :type profile_push_time: str
        """

        self._profile_push_time = profile_push_time

    @property
    def device_assigned_date(self):
        """Gets the device_assigned_date of this DeviceEnrollmentDevice.  # noqa: E501


        :return: The device_assigned_date of this DeviceEnrollmentDevice.  # noqa: E501
        :rtype: str
        """
        return self._device_assigned_date

    @device_assigned_date.setter
    def device_assigned_date(self, device_assigned_date):
        """Sets the device_assigned_date of this DeviceEnrollmentDevice.


        :param device_assigned_date: The device_assigned_date of this DeviceEnrollmentDevice.  # noqa: E501
        :type device_assigned_date: str
        """

        self._device_assigned_date = device_assigned_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceEnrollmentDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceEnrollmentDevice):
            return True

        return self.to_dict() != other.to_dict()
