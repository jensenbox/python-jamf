# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ClientCheckInV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'check_in_frequency': 'int',
        'create_hooks': 'bool',
        'hook_log': 'bool',
        'hook_policies': 'bool',
        'hook_hide_restore': 'bool',
        'hook_mcx': 'bool',
        'background_hooks': 'bool',
        'hook_display_status': 'bool',
        'create_startup_script': 'bool',
        'startup_log': 'bool',
        'startup_policies': 'bool',
        'startup_ssh': 'bool',
        'startup_mcx': 'bool',
        'enable_local_configuration_profiles': 'bool'
    }

    attribute_map = {
        'check_in_frequency': 'checkInFrequency',
        'create_hooks': 'createHooks',
        'hook_log': 'hookLog',
        'hook_policies': 'hookPolicies',
        'hook_hide_restore': 'hookHideRestore',
        'hook_mcx': 'hookMcx',
        'background_hooks': 'backgroundHooks',
        'hook_display_status': 'hookDisplayStatus',
        'create_startup_script': 'createStartupScript',
        'startup_log': 'startupLog',
        'startup_policies': 'startupPolicies',
        'startup_ssh': 'startupSsh',
        'startup_mcx': 'startupMcx',
        'enable_local_configuration_profiles': 'enableLocalConfigurationProfiles'
    }

    def __init__(self, check_in_frequency=15, create_hooks=False, hook_log=False, hook_policies=False, hook_hide_restore=False, hook_mcx=False, background_hooks=False, hook_display_status=False, create_startup_script=False, startup_log=False, startup_policies=False, startup_ssh=False, startup_mcx=False, enable_local_configuration_profiles=False, local_vars_configuration=None):  # noqa: E501
        """ClientCheckInV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._check_in_frequency = None
        self._create_hooks = None
        self._hook_log = None
        self._hook_policies = None
        self._hook_hide_restore = None
        self._hook_mcx = None
        self._background_hooks = None
        self._hook_display_status = None
        self._create_startup_script = None
        self._startup_log = None
        self._startup_policies = None
        self._startup_ssh = None
        self._startup_mcx = None
        self._enable_local_configuration_profiles = None
        self.discriminator = None

        if check_in_frequency is not None:
            self.check_in_frequency = check_in_frequency
        if create_hooks is not None:
            self.create_hooks = create_hooks
        if hook_log is not None:
            self.hook_log = hook_log
        if hook_policies is not None:
            self.hook_policies = hook_policies
        if hook_hide_restore is not None:
            self.hook_hide_restore = hook_hide_restore
        if hook_mcx is not None:
            self.hook_mcx = hook_mcx
        if background_hooks is not None:
            self.background_hooks = background_hooks
        if hook_display_status is not None:
            self.hook_display_status = hook_display_status
        if create_startup_script is not None:
            self.create_startup_script = create_startup_script
        if startup_log is not None:
            self.startup_log = startup_log
        if startup_policies is not None:
            self.startup_policies = startup_policies
        if startup_ssh is not None:
            self.startup_ssh = startup_ssh
        if startup_mcx is not None:
            self.startup_mcx = startup_mcx
        if enable_local_configuration_profiles is not None:
            self.enable_local_configuration_profiles = enable_local_configuration_profiles

    @property
    def check_in_frequency(self):
        """Gets the check_in_frequency of this ClientCheckInV2.  # noqa: E501

        Suggested values are 5, 15, 30, or 60. Web interface will not display correctly if not one of those. Minimim is 5, maximum is 60.  # noqa: E501

        :return: The check_in_frequency of this ClientCheckInV2.  # noqa: E501
        :rtype: int
        """
        return self._check_in_frequency

    @check_in_frequency.setter
    def check_in_frequency(self, check_in_frequency):
        """Sets the check_in_frequency of this ClientCheckInV2.

        Suggested values are 5, 15, 30, or 60. Web interface will not display correctly if not one of those. Minimim is 5, maximum is 60.  # noqa: E501

        :param check_in_frequency: The check_in_frequency of this ClientCheckInV2.  # noqa: E501
        :type check_in_frequency: int
        """

        self._check_in_frequency = check_in_frequency

    @property
    def create_hooks(self):
        """Gets the create_hooks of this ClientCheckInV2.  # noqa: E501


        :return: The create_hooks of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._create_hooks

    @create_hooks.setter
    def create_hooks(self, create_hooks):
        """Sets the create_hooks of this ClientCheckInV2.


        :param create_hooks: The create_hooks of this ClientCheckInV2.  # noqa: E501
        :type create_hooks: bool
        """

        self._create_hooks = create_hooks

    @property
    def hook_log(self):
        """Gets the hook_log of this ClientCheckInV2.  # noqa: E501


        :return: The hook_log of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._hook_log

    @hook_log.setter
    def hook_log(self, hook_log):
        """Sets the hook_log of this ClientCheckInV2.


        :param hook_log: The hook_log of this ClientCheckInV2.  # noqa: E501
        :type hook_log: bool
        """

        self._hook_log = hook_log

    @property
    def hook_policies(self):
        """Gets the hook_policies of this ClientCheckInV2.  # noqa: E501


        :return: The hook_policies of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._hook_policies

    @hook_policies.setter
    def hook_policies(self, hook_policies):
        """Sets the hook_policies of this ClientCheckInV2.


        :param hook_policies: The hook_policies of this ClientCheckInV2.  # noqa: E501
        :type hook_policies: bool
        """

        self._hook_policies = hook_policies

    @property
    def hook_hide_restore(self):
        """Gets the hook_hide_restore of this ClientCheckInV2.  # noqa: E501


        :return: The hook_hide_restore of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._hook_hide_restore

    @hook_hide_restore.setter
    def hook_hide_restore(self, hook_hide_restore):
        """Sets the hook_hide_restore of this ClientCheckInV2.


        :param hook_hide_restore: The hook_hide_restore of this ClientCheckInV2.  # noqa: E501
        :type hook_hide_restore: bool
        """

        self._hook_hide_restore = hook_hide_restore

    @property
    def hook_mcx(self):
        """Gets the hook_mcx of this ClientCheckInV2.  # noqa: E501


        :return: The hook_mcx of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._hook_mcx

    @hook_mcx.setter
    def hook_mcx(self, hook_mcx):
        """Sets the hook_mcx of this ClientCheckInV2.


        :param hook_mcx: The hook_mcx of this ClientCheckInV2.  # noqa: E501
        :type hook_mcx: bool
        """

        self._hook_mcx = hook_mcx

    @property
    def background_hooks(self):
        """Gets the background_hooks of this ClientCheckInV2.  # noqa: E501


        :return: The background_hooks of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._background_hooks

    @background_hooks.setter
    def background_hooks(self, background_hooks):
        """Sets the background_hooks of this ClientCheckInV2.


        :param background_hooks: The background_hooks of this ClientCheckInV2.  # noqa: E501
        :type background_hooks: bool
        """

        self._background_hooks = background_hooks

    @property
    def hook_display_status(self):
        """Gets the hook_display_status of this ClientCheckInV2.  # noqa: E501


        :return: The hook_display_status of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._hook_display_status

    @hook_display_status.setter
    def hook_display_status(self, hook_display_status):
        """Sets the hook_display_status of this ClientCheckInV2.


        :param hook_display_status: The hook_display_status of this ClientCheckInV2.  # noqa: E501
        :type hook_display_status: bool
        """

        self._hook_display_status = hook_display_status

    @property
    def create_startup_script(self):
        """Gets the create_startup_script of this ClientCheckInV2.  # noqa: E501


        :return: The create_startup_script of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._create_startup_script

    @create_startup_script.setter
    def create_startup_script(self, create_startup_script):
        """Sets the create_startup_script of this ClientCheckInV2.


        :param create_startup_script: The create_startup_script of this ClientCheckInV2.  # noqa: E501
        :type create_startup_script: bool
        """

        self._create_startup_script = create_startup_script

    @property
    def startup_log(self):
        """Gets the startup_log of this ClientCheckInV2.  # noqa: E501


        :return: The startup_log of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._startup_log

    @startup_log.setter
    def startup_log(self, startup_log):
        """Sets the startup_log of this ClientCheckInV2.


        :param startup_log: The startup_log of this ClientCheckInV2.  # noqa: E501
        :type startup_log: bool
        """

        self._startup_log = startup_log

    @property
    def startup_policies(self):
        """Gets the startup_policies of this ClientCheckInV2.  # noqa: E501


        :return: The startup_policies of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._startup_policies

    @startup_policies.setter
    def startup_policies(self, startup_policies):
        """Sets the startup_policies of this ClientCheckInV2.


        :param startup_policies: The startup_policies of this ClientCheckInV2.  # noqa: E501
        :type startup_policies: bool
        """

        self._startup_policies = startup_policies

    @property
    def startup_ssh(self):
        """Gets the startup_ssh of this ClientCheckInV2.  # noqa: E501


        :return: The startup_ssh of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._startup_ssh

    @startup_ssh.setter
    def startup_ssh(self, startup_ssh):
        """Sets the startup_ssh of this ClientCheckInV2.


        :param startup_ssh: The startup_ssh of this ClientCheckInV2.  # noqa: E501
        :type startup_ssh: bool
        """

        self._startup_ssh = startup_ssh

    @property
    def startup_mcx(self):
        """Gets the startup_mcx of this ClientCheckInV2.  # noqa: E501


        :return: The startup_mcx of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._startup_mcx

    @startup_mcx.setter
    def startup_mcx(self, startup_mcx):
        """Sets the startup_mcx of this ClientCheckInV2.


        :param startup_mcx: The startup_mcx of this ClientCheckInV2.  # noqa: E501
        :type startup_mcx: bool
        """

        self._startup_mcx = startup_mcx

    @property
    def enable_local_configuration_profiles(self):
        """Gets the enable_local_configuration_profiles of this ClientCheckInV2.  # noqa: E501


        :return: The enable_local_configuration_profiles of this ClientCheckInV2.  # noqa: E501
        :rtype: bool
        """
        return self._enable_local_configuration_profiles

    @enable_local_configuration_profiles.setter
    def enable_local_configuration_profiles(self, enable_local_configuration_profiles):
        """Sets the enable_local_configuration_profiles of this ClientCheckInV2.


        :param enable_local_configuration_profiles: The enable_local_configuration_profiles of this ClientCheckInV2.  # noqa: E501
        :type enable_local_configuration_profiles: bool
        """

        self._enable_local_configuration_profiles = enable_local_configuration_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientCheckInV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientCheckInV2):
            return True

        return self.to_dict() != other.to_dict()
