# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Location(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'real_name': 'str',
        'email_address': 'str',
        'position': 'str',
        'phone_number': 'str',
        'department': 'LocationDepartment',
        'building': 'LocationBuilding',
        'room': 'str'
    }

    attribute_map = {
        'username': 'username',
        'real_name': 'realName',
        'email_address': 'emailAddress',
        'position': 'position',
        'phone_number': 'phoneNumber',
        'department': 'department',
        'building': 'building',
        'room': 'room'
    }

    def __init__(self, username=None, real_name=None, email_address=None, position=None, phone_number=None, department=None, building=None, room=None, local_vars_configuration=None):  # noqa: E501
        """Location - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._real_name = None
        self._email_address = None
        self._position = None
        self._phone_number = None
        self._department = None
        self._building = None
        self._room = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if real_name is not None:
            self.real_name = real_name
        if email_address is not None:
            self.email_address = email_address
        if position is not None:
            self.position = position
        if phone_number is not None:
            self.phone_number = phone_number
        if department is not None:
            self.department = department
        if building is not None:
            self.building = building
        if room is not None:
            self.room = room

    @property
    def username(self):
        """Gets the username of this Location.  # noqa: E501


        :return: The username of this Location.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Location.


        :param username: The username of this Location.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def real_name(self):
        """Gets the real_name of this Location.  # noqa: E501


        :return: The real_name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this Location.


        :param real_name: The real_name of this Location.  # noqa: E501
        :type real_name: str
        """

        self._real_name = real_name

    @property
    def email_address(self):
        """Gets the email_address of this Location.  # noqa: E501


        :return: The email_address of this Location.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Location.


        :param email_address: The email_address of this Location.  # noqa: E501
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def position(self):
        """Gets the position of this Location.  # noqa: E501


        :return: The position of this Location.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Location.


        :param position: The position of this Location.  # noqa: E501
        :type position: str
        """

        self._position = position

    @property
    def phone_number(self):
        """Gets the phone_number of this Location.  # noqa: E501


        :return: The phone_number of this Location.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Location.


        :param phone_number: The phone_number of this Location.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def department(self):
        """Gets the department of this Location.  # noqa: E501


        :return: The department of this Location.  # noqa: E501
        :rtype: LocationDepartment
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Location.


        :param department: The department of this Location.  # noqa: E501
        :type department: LocationDepartment
        """

        self._department = department

    @property
    def building(self):
        """Gets the building of this Location.  # noqa: E501


        :return: The building of this Location.  # noqa: E501
        :rtype: LocationBuilding
        """
        return self._building

    @building.setter
    def building(self, building):
        """Sets the building of this Location.


        :param building: The building of this Location.  # noqa: E501
        :type building: LocationBuilding
        """

        self._building = building

    @property
    def room(self):
        """Gets the room of this Location.  # noqa: E501


        :return: The room of this Location.  # noqa: E501
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this Location.


        :param room: The room of this Location.  # noqa: E501
        :type room: str
        """

        self._room = room

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Location):
            return True

        return self.to_dict() != other.to_dict()
