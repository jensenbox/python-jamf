# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SupervisionIdentityCertificateUpload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'password': 'str',
        'certificate_data': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'password': 'password',
        'certificate_data': 'certificateData'
    }

    def __init__(self, display_name=None, password=None, certificate_data=None, local_vars_configuration=None):  # noqa: E501
        """SupervisionIdentityCertificateUpload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._password = None
        self._certificate_data = None
        self.discriminator = None

        self.display_name = display_name
        self.password = password
        if certificate_data is not None:
            self.certificate_data = certificate_data

    @property
    def display_name(self):
        """Gets the display_name of this SupervisionIdentityCertificateUpload.  # noqa: E501


        :return: The display_name of this SupervisionIdentityCertificateUpload.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SupervisionIdentityCertificateUpload.


        :param display_name: The display_name of this SupervisionIdentityCertificateUpload.  # noqa: E501
        :type display_name: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def password(self):
        """Gets the password of this SupervisionIdentityCertificateUpload.  # noqa: E501


        :return: The password of this SupervisionIdentityCertificateUpload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SupervisionIdentityCertificateUpload.


        :param password: The password of this SupervisionIdentityCertificateUpload.  # noqa: E501
        :type password: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def certificate_data(self):
        """Gets the certificate_data of this SupervisionIdentityCertificateUpload.  # noqa: E501

        The base 64 encoded supervision identity certificate data  # noqa: E501

        :return: The certificate_data of this SupervisionIdentityCertificateUpload.  # noqa: E501
        :rtype: str
        """
        return self._certificate_data

    @certificate_data.setter
    def certificate_data(self, certificate_data):
        """Sets the certificate_data of this SupervisionIdentityCertificateUpload.

        The base 64 encoded supervision identity certificate data  # noqa: E501

        :param certificate_data: The certificate_data of this SupervisionIdentityCertificateUpload.  # noqa: E501
        :type certificate_data: str
        """
        if (self.local_vars_configuration.client_side_validation and
                certificate_data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', certificate_data)):  # noqa: E501
            raise ValueError(r"Invalid value for `certificate_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._certificate_data = certificate_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupervisionIdentityCertificateUpload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupervisionIdentityCertificateUpload):
            return True

        return self.to_dict() != other.to_dict()
