# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DeviceEnrollmentToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token_file_name': 'str',
        'encoded_token': 'str'
    }

    attribute_map = {
        'token_file_name': 'tokenFileName',
        'encoded_token': 'encodedToken'
    }

    def __init__(self, token_file_name=None, encoded_token=None, local_vars_configuration=None):  # noqa: E501
        """DeviceEnrollmentToken - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._token_file_name = None
        self._encoded_token = None
        self.discriminator = None

        if token_file_name is not None:
            self.token_file_name = token_file_name
        if encoded_token is not None:
            self.encoded_token = encoded_token

    @property
    def token_file_name(self):
        """Gets the token_file_name of this DeviceEnrollmentToken.  # noqa: E501

        Optional name of the token to be saved, if no name is provided one will be auto-generated  # noqa: E501

        :return: The token_file_name of this DeviceEnrollmentToken.  # noqa: E501
        :rtype: str
        """
        return self._token_file_name

    @token_file_name.setter
    def token_file_name(self, token_file_name):
        """Sets the token_file_name of this DeviceEnrollmentToken.

        Optional name of the token to be saved, if no name is provided one will be auto-generated  # noqa: E501

        :param token_file_name: The token_file_name of this DeviceEnrollmentToken.  # noqa: E501
        :type token_file_name: str
        """

        self._token_file_name = token_file_name

    @property
    def encoded_token(self):
        """Gets the encoded_token of this DeviceEnrollmentToken.  # noqa: E501

        The base 64 encoded token  # noqa: E501

        :return: The encoded_token of this DeviceEnrollmentToken.  # noqa: E501
        :rtype: str
        """
        return self._encoded_token

    @encoded_token.setter
    def encoded_token(self, encoded_token):
        """Sets the encoded_token of this DeviceEnrollmentToken.

        The base 64 encoded token  # noqa: E501

        :param encoded_token: The encoded_token of this DeviceEnrollmentToken.  # noqa: E501
        :type encoded_token: str
        """
        if (self.local_vars_configuration.client_side_validation and
                encoded_token is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', encoded_token)):  # noqa: E501
            raise ValueError(r"Invalid value for `encoded_token`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._encoded_token = encoded_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceEnrollmentToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceEnrollmentToken):
            return True

        return self.to_dict() != other.to_dict()
