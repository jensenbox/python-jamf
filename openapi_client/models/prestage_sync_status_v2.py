# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PrestageSyncStatusV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sync_state': 'str',
        'prestage_id': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'sync_state': 'syncState',
        'prestage_id': 'prestageId',
        'timestamp': 'timestamp'
    }

    def __init__(self, sync_state=None, prestage_id=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """PrestageSyncStatusV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sync_state = None
        self._prestage_id = None
        self._timestamp = None
        self.discriminator = None

        if sync_state is not None:
            self.sync_state = sync_state
        if prestage_id is not None:
            self.prestage_id = prestage_id
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def sync_state(self):
        """Gets the sync_state of this PrestageSyncStatusV2.  # noqa: E501


        :return: The sync_state of this PrestageSyncStatusV2.  # noqa: E501
        :rtype: str
        """
        return self._sync_state

    @sync_state.setter
    def sync_state(self, sync_state):
        """Sets the sync_state of this PrestageSyncStatusV2.


        :param sync_state: The sync_state of this PrestageSyncStatusV2.  # noqa: E501
        :type sync_state: str
        """

        self._sync_state = sync_state

    @property
    def prestage_id(self):
        """Gets the prestage_id of this PrestageSyncStatusV2.  # noqa: E501


        :return: The prestage_id of this PrestageSyncStatusV2.  # noqa: E501
        :rtype: str
        """
        return self._prestage_id

    @prestage_id.setter
    def prestage_id(self, prestage_id):
        """Sets the prestage_id of this PrestageSyncStatusV2.


        :param prestage_id: The prestage_id of this PrestageSyncStatusV2.  # noqa: E501
        :type prestage_id: str
        """

        self._prestage_id = prestage_id

    @property
    def timestamp(self):
        """Gets the timestamp of this PrestageSyncStatusV2.  # noqa: E501


        :return: The timestamp of this PrestageSyncStatusV2.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PrestageSyncStatusV2.


        :param timestamp: The timestamp of this PrestageSyncStatusV2.  # noqa: E501
        :type timestamp: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrestageSyncStatusV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrestageSyncStatusV2):
            return True

        return self.to_dict() != other.to_dict()
