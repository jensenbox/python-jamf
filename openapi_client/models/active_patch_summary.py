# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ActivePatchSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'software_title_id': 'int',
        'title': 'str',
        'latest_version': 'str',
        'release_date': 'datetime',
        'up_to_date': 'int',
        'out_of_date': 'int',
        'is_on_dashboard': 'bool',
        'software_title_configuration_id': 'int'
    }

    attribute_map = {
        'software_title_id': 'softwareTitleID',
        'title': 'title',
        'latest_version': 'latestVersion',
        'release_date': 'releaseDate',
        'up_to_date': 'upToDate',
        'out_of_date': 'outOfDate',
        'is_on_dashboard': 'isOnDashboard',
        'software_title_configuration_id': 'softwareTitleConfigurationID'
    }

    def __init__(self, software_title_id=None, title=None, latest_version=None, release_date=None, up_to_date=None, out_of_date=None, is_on_dashboard=None, software_title_configuration_id=None, local_vars_configuration=None):  # noqa: E501
        """ActivePatchSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._software_title_id = None
        self._title = None
        self._latest_version = None
        self._release_date = None
        self._up_to_date = None
        self._out_of_date = None
        self._is_on_dashboard = None
        self._software_title_configuration_id = None
        self.discriminator = None

        if software_title_id is not None:
            self.software_title_id = software_title_id
        if title is not None:
            self.title = title
        if latest_version is not None:
            self.latest_version = latest_version
        if release_date is not None:
            self.release_date = release_date
        if up_to_date is not None:
            self.up_to_date = up_to_date
        if out_of_date is not None:
            self.out_of_date = out_of_date
        if is_on_dashboard is not None:
            self.is_on_dashboard = is_on_dashboard
        if software_title_configuration_id is not None:
            self.software_title_configuration_id = software_title_configuration_id

    @property
    def software_title_id(self):
        """Gets the software_title_id of this ActivePatchSummary.  # noqa: E501


        :return: The software_title_id of this ActivePatchSummary.  # noqa: E501
        :rtype: int
        """
        return self._software_title_id

    @software_title_id.setter
    def software_title_id(self, software_title_id):
        """Sets the software_title_id of this ActivePatchSummary.


        :param software_title_id: The software_title_id of this ActivePatchSummary.  # noqa: E501
        :type software_title_id: int
        """

        self._software_title_id = software_title_id

    @property
    def title(self):
        """Gets the title of this ActivePatchSummary.  # noqa: E501


        :return: The title of this ActivePatchSummary.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActivePatchSummary.


        :param title: The title of this ActivePatchSummary.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def latest_version(self):
        """Gets the latest_version of this ActivePatchSummary.  # noqa: E501


        :return: The latest_version of this ActivePatchSummary.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this ActivePatchSummary.


        :param latest_version: The latest_version of this ActivePatchSummary.  # noqa: E501
        :type latest_version: str
        """

        self._latest_version = latest_version

    @property
    def release_date(self):
        """Gets the release_date of this ActivePatchSummary.  # noqa: E501


        :return: The release_date of this ActivePatchSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this ActivePatchSummary.


        :param release_date: The release_date of this ActivePatchSummary.  # noqa: E501
        :type release_date: datetime
        """

        self._release_date = release_date

    @property
    def up_to_date(self):
        """Gets the up_to_date of this ActivePatchSummary.  # noqa: E501


        :return: The up_to_date of this ActivePatchSummary.  # noqa: E501
        :rtype: int
        """
        return self._up_to_date

    @up_to_date.setter
    def up_to_date(self, up_to_date):
        """Sets the up_to_date of this ActivePatchSummary.


        :param up_to_date: The up_to_date of this ActivePatchSummary.  # noqa: E501
        :type up_to_date: int
        """

        self._up_to_date = up_to_date

    @property
    def out_of_date(self):
        """Gets the out_of_date of this ActivePatchSummary.  # noqa: E501


        :return: The out_of_date of this ActivePatchSummary.  # noqa: E501
        :rtype: int
        """
        return self._out_of_date

    @out_of_date.setter
    def out_of_date(self, out_of_date):
        """Sets the out_of_date of this ActivePatchSummary.


        :param out_of_date: The out_of_date of this ActivePatchSummary.  # noqa: E501
        :type out_of_date: int
        """

        self._out_of_date = out_of_date

    @property
    def is_on_dashboard(self):
        """Gets the is_on_dashboard of this ActivePatchSummary.  # noqa: E501


        :return: The is_on_dashboard of this ActivePatchSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_on_dashboard

    @is_on_dashboard.setter
    def is_on_dashboard(self, is_on_dashboard):
        """Sets the is_on_dashboard of this ActivePatchSummary.


        :param is_on_dashboard: The is_on_dashboard of this ActivePatchSummary.  # noqa: E501
        :type is_on_dashboard: bool
        """

        self._is_on_dashboard = is_on_dashboard

    @property
    def software_title_configuration_id(self):
        """Gets the software_title_configuration_id of this ActivePatchSummary.  # noqa: E501


        :return: The software_title_configuration_id of this ActivePatchSummary.  # noqa: E501
        :rtype: int
        """
        return self._software_title_configuration_id

    @software_title_configuration_id.setter
    def software_title_configuration_id(self, software_title_configuration_id):
        """Sets the software_title_configuration_id of this ActivePatchSummary.


        :param software_title_configuration_id: The software_title_configuration_id of this ActivePatchSummary.  # noqa: E501
        :type software_title_configuration_id: int
        """

        self._software_title_configuration_id = software_title_configuration_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivePatchSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivePatchSummary):
            return True

        return self.to_dict() != other.to_dict()
