# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerContentCachingParent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_caching_parent_id': 'str',
        'address': 'str',
        'alerts': 'ComputerContentCachingParentAlert',
        'details': 'ComputerContentCachingParentDetails',
        'guid': 'str',
        'healthy': 'bool',
        'port': 'int',
        'version': 'str'
    }

    attribute_map = {
        'content_caching_parent_id': 'contentCachingParentId',
        'address': 'address',
        'alerts': 'alerts',
        'details': 'details',
        'guid': 'guid',
        'healthy': 'healthy',
        'port': 'port',
        'version': 'version'
    }

    def __init__(self, content_caching_parent_id=None, address=None, alerts=None, details=None, guid=None, healthy=None, port=None, version=None, local_vars_configuration=None):  # noqa: E501
        """ComputerContentCachingParent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_caching_parent_id = None
        self._address = None
        self._alerts = None
        self._details = None
        self._guid = None
        self._healthy = None
        self._port = None
        self._version = None
        self.discriminator = None

        if content_caching_parent_id is not None:
            self.content_caching_parent_id = content_caching_parent_id
        if address is not None:
            self.address = address
        if alerts is not None:
            self.alerts = alerts
        if details is not None:
            self.details = details
        if guid is not None:
            self.guid = guid
        if healthy is not None:
            self.healthy = healthy
        if port is not None:
            self.port = port
        if version is not None:
            self.version = version

    @property
    def content_caching_parent_id(self):
        """Gets the content_caching_parent_id of this ComputerContentCachingParent.  # noqa: E501


        :return: The content_caching_parent_id of this ComputerContentCachingParent.  # noqa: E501
        :rtype: str
        """
        return self._content_caching_parent_id

    @content_caching_parent_id.setter
    def content_caching_parent_id(self, content_caching_parent_id):
        """Sets the content_caching_parent_id of this ComputerContentCachingParent.


        :param content_caching_parent_id: The content_caching_parent_id of this ComputerContentCachingParent.  # noqa: E501
        :type content_caching_parent_id: str
        """

        self._content_caching_parent_id = content_caching_parent_id

    @property
    def address(self):
        """Gets the address of this ComputerContentCachingParent.  # noqa: E501


        :return: The address of this ComputerContentCachingParent.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ComputerContentCachingParent.


        :param address: The address of this ComputerContentCachingParent.  # noqa: E501
        :type address: str
        """

        self._address = address

    @property
    def alerts(self):
        """Gets the alerts of this ComputerContentCachingParent.  # noqa: E501


        :return: The alerts of this ComputerContentCachingParent.  # noqa: E501
        :rtype: ComputerContentCachingParentAlert
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this ComputerContentCachingParent.


        :param alerts: The alerts of this ComputerContentCachingParent.  # noqa: E501
        :type alerts: ComputerContentCachingParentAlert
        """

        self._alerts = alerts

    @property
    def details(self):
        """Gets the details of this ComputerContentCachingParent.  # noqa: E501


        :return: The details of this ComputerContentCachingParent.  # noqa: E501
        :rtype: ComputerContentCachingParentDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ComputerContentCachingParent.


        :param details: The details of this ComputerContentCachingParent.  # noqa: E501
        :type details: ComputerContentCachingParentDetails
        """

        self._details = details

    @property
    def guid(self):
        """Gets the guid of this ComputerContentCachingParent.  # noqa: E501


        :return: The guid of this ComputerContentCachingParent.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ComputerContentCachingParent.


        :param guid: The guid of this ComputerContentCachingParent.  # noqa: E501
        :type guid: str
        """

        self._guid = guid

    @property
    def healthy(self):
        """Gets the healthy of this ComputerContentCachingParent.  # noqa: E501


        :return: The healthy of this ComputerContentCachingParent.  # noqa: E501
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this ComputerContentCachingParent.


        :param healthy: The healthy of this ComputerContentCachingParent.  # noqa: E501
        :type healthy: bool
        """

        self._healthy = healthy

    @property
    def port(self):
        """Gets the port of this ComputerContentCachingParent.  # noqa: E501


        :return: The port of this ComputerContentCachingParent.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ComputerContentCachingParent.


        :param port: The port of this ComputerContentCachingParent.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def version(self):
        """Gets the version of this ComputerContentCachingParent.  # noqa: E501


        :return: The version of this ComputerContentCachingParent.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComputerContentCachingParent.


        :param version: The version of this ComputerContentCachingParent.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerContentCachingParent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerContentCachingParent):
            return True

        return self.to_dict() != other.to_dict()
