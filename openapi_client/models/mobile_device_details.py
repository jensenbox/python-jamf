# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MobileDeviceDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'asset_tag': 'str',
        'last_inventory_update_timestamp': 'datetime',
        'os_version': 'str',
        'os_build': 'str',
        'serial_number': 'str',
        'udid': 'str',
        'ip_address': 'str',
        'wifi_mac_address': 'str',
        'bluetooth_mac_address': 'str',
        'is_managed': 'bool',
        'initial_entry_timestamp': 'datetime',
        'last_enrollment_timestamp': 'datetime',
        'device_ownership_level': 'str',
        'site': 'LocationBuilding',
        'extension_attributes': 'list[ExtensionAttribute]',
        'location': 'Location',
        'type': 'str',
        'ios': 'IosDetails',
        'apple_tv': 'AppleTvDetails',
        'android': 'AndroidDetails'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'asset_tag': 'assetTag',
        'last_inventory_update_timestamp': 'lastInventoryUpdateTimestamp',
        'os_version': 'osVersion',
        'os_build': 'osBuild',
        'serial_number': 'serialNumber',
        'udid': 'udid',
        'ip_address': 'ipAddress',
        'wifi_mac_address': 'wifiMacAddress',
        'bluetooth_mac_address': 'bluetoothMacAddress',
        'is_managed': 'isManaged',
        'initial_entry_timestamp': 'initialEntryTimestamp',
        'last_enrollment_timestamp': 'lastEnrollmentTimestamp',
        'device_ownership_level': 'deviceOwnershipLevel',
        'site': 'site',
        'extension_attributes': 'extensionAttributes',
        'location': 'location',
        'type': 'type',
        'ios': 'ios',
        'apple_tv': 'appleTv',
        'android': 'android'
    }

    def __init__(self, id=None, name=None, asset_tag=None, last_inventory_update_timestamp=None, os_version=None, os_build=None, serial_number=None, udid=None, ip_address=None, wifi_mac_address=None, bluetooth_mac_address=None, is_managed=None, initial_entry_timestamp=None, last_enrollment_timestamp=None, device_ownership_level=None, site=None, extension_attributes=None, location=None, type=None, ios=None, apple_tv=None, android=None, local_vars_configuration=None):  # noqa: E501
        """MobileDeviceDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._asset_tag = None
        self._last_inventory_update_timestamp = None
        self._os_version = None
        self._os_build = None
        self._serial_number = None
        self._udid = None
        self._ip_address = None
        self._wifi_mac_address = None
        self._bluetooth_mac_address = None
        self._is_managed = None
        self._initial_entry_timestamp = None
        self._last_enrollment_timestamp = None
        self._device_ownership_level = None
        self._site = None
        self._extension_attributes = None
        self._location = None
        self._type = None
        self._ios = None
        self._apple_tv = None
        self._android = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if asset_tag is not None:
            self.asset_tag = asset_tag
        if last_inventory_update_timestamp is not None:
            self.last_inventory_update_timestamp = last_inventory_update_timestamp
        if os_version is not None:
            self.os_version = os_version
        if os_build is not None:
            self.os_build = os_build
        if serial_number is not None:
            self.serial_number = serial_number
        if udid is not None:
            self.udid = udid
        if ip_address is not None:
            self.ip_address = ip_address
        if wifi_mac_address is not None:
            self.wifi_mac_address = wifi_mac_address
        if bluetooth_mac_address is not None:
            self.bluetooth_mac_address = bluetooth_mac_address
        if is_managed is not None:
            self.is_managed = is_managed
        if initial_entry_timestamp is not None:
            self.initial_entry_timestamp = initial_entry_timestamp
        if last_enrollment_timestamp is not None:
            self.last_enrollment_timestamp = last_enrollment_timestamp
        if device_ownership_level is not None:
            self.device_ownership_level = device_ownership_level
        if site is not None:
            self.site = site
        if extension_attributes is not None:
            self.extension_attributes = extension_attributes
        if location is not None:
            self.location = location
        if type is not None:
            self.type = type
        if ios is not None:
            self.ios = ios
        if apple_tv is not None:
            self.apple_tv = apple_tv
        if android is not None:
            self.android = android

    @property
    def id(self):
        """Gets the id of this MobileDeviceDetails.  # noqa: E501


        :return: The id of this MobileDeviceDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MobileDeviceDetails.


        :param id: The id of this MobileDeviceDetails.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MobileDeviceDetails.  # noqa: E501


        :return: The name of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MobileDeviceDetails.


        :param name: The name of this MobileDeviceDetails.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def asset_tag(self):
        """Gets the asset_tag of this MobileDeviceDetails.  # noqa: E501


        :return: The asset_tag of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this MobileDeviceDetails.


        :param asset_tag: The asset_tag of this MobileDeviceDetails.  # noqa: E501
        :type asset_tag: str
        """

        self._asset_tag = asset_tag

    @property
    def last_inventory_update_timestamp(self):
        """Gets the last_inventory_update_timestamp of this MobileDeviceDetails.  # noqa: E501


        :return: The last_inventory_update_timestamp of this MobileDeviceDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_inventory_update_timestamp

    @last_inventory_update_timestamp.setter
    def last_inventory_update_timestamp(self, last_inventory_update_timestamp):
        """Sets the last_inventory_update_timestamp of this MobileDeviceDetails.


        :param last_inventory_update_timestamp: The last_inventory_update_timestamp of this MobileDeviceDetails.  # noqa: E501
        :type last_inventory_update_timestamp: datetime
        """

        self._last_inventory_update_timestamp = last_inventory_update_timestamp

    @property
    def os_version(self):
        """Gets the os_version of this MobileDeviceDetails.  # noqa: E501


        :return: The os_version of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this MobileDeviceDetails.


        :param os_version: The os_version of this MobileDeviceDetails.  # noqa: E501
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def os_build(self):
        """Gets the os_build of this MobileDeviceDetails.  # noqa: E501


        :return: The os_build of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._os_build

    @os_build.setter
    def os_build(self, os_build):
        """Sets the os_build of this MobileDeviceDetails.


        :param os_build: The os_build of this MobileDeviceDetails.  # noqa: E501
        :type os_build: str
        """

        self._os_build = os_build

    @property
    def serial_number(self):
        """Gets the serial_number of this MobileDeviceDetails.  # noqa: E501


        :return: The serial_number of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this MobileDeviceDetails.


        :param serial_number: The serial_number of this MobileDeviceDetails.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def udid(self):
        """Gets the udid of this MobileDeviceDetails.  # noqa: E501


        :return: The udid of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this MobileDeviceDetails.


        :param udid: The udid of this MobileDeviceDetails.  # noqa: E501
        :type udid: str
        """

        self._udid = udid

    @property
    def ip_address(self):
        """Gets the ip_address of this MobileDeviceDetails.  # noqa: E501


        :return: The ip_address of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this MobileDeviceDetails.


        :param ip_address: The ip_address of this MobileDeviceDetails.  # noqa: E501
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def wifi_mac_address(self):
        """Gets the wifi_mac_address of this MobileDeviceDetails.  # noqa: E501


        :return: The wifi_mac_address of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._wifi_mac_address

    @wifi_mac_address.setter
    def wifi_mac_address(self, wifi_mac_address):
        """Sets the wifi_mac_address of this MobileDeviceDetails.


        :param wifi_mac_address: The wifi_mac_address of this MobileDeviceDetails.  # noqa: E501
        :type wifi_mac_address: str
        """

        self._wifi_mac_address = wifi_mac_address

    @property
    def bluetooth_mac_address(self):
        """Gets the bluetooth_mac_address of this MobileDeviceDetails.  # noqa: E501


        :return: The bluetooth_mac_address of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._bluetooth_mac_address

    @bluetooth_mac_address.setter
    def bluetooth_mac_address(self, bluetooth_mac_address):
        """Sets the bluetooth_mac_address of this MobileDeviceDetails.


        :param bluetooth_mac_address: The bluetooth_mac_address of this MobileDeviceDetails.  # noqa: E501
        :type bluetooth_mac_address: str
        """

        self._bluetooth_mac_address = bluetooth_mac_address

    @property
    def is_managed(self):
        """Gets the is_managed of this MobileDeviceDetails.  # noqa: E501


        :return: The is_managed of this MobileDeviceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this MobileDeviceDetails.


        :param is_managed: The is_managed of this MobileDeviceDetails.  # noqa: E501
        :type is_managed: bool
        """

        self._is_managed = is_managed

    @property
    def initial_entry_timestamp(self):
        """Gets the initial_entry_timestamp of this MobileDeviceDetails.  # noqa: E501


        :return: The initial_entry_timestamp of this MobileDeviceDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_entry_timestamp

    @initial_entry_timestamp.setter
    def initial_entry_timestamp(self, initial_entry_timestamp):
        """Sets the initial_entry_timestamp of this MobileDeviceDetails.


        :param initial_entry_timestamp: The initial_entry_timestamp of this MobileDeviceDetails.  # noqa: E501
        :type initial_entry_timestamp: datetime
        """

        self._initial_entry_timestamp = initial_entry_timestamp

    @property
    def last_enrollment_timestamp(self):
        """Gets the last_enrollment_timestamp of this MobileDeviceDetails.  # noqa: E501


        :return: The last_enrollment_timestamp of this MobileDeviceDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_enrollment_timestamp

    @last_enrollment_timestamp.setter
    def last_enrollment_timestamp(self, last_enrollment_timestamp):
        """Sets the last_enrollment_timestamp of this MobileDeviceDetails.


        :param last_enrollment_timestamp: The last_enrollment_timestamp of this MobileDeviceDetails.  # noqa: E501
        :type last_enrollment_timestamp: datetime
        """

        self._last_enrollment_timestamp = last_enrollment_timestamp

    @property
    def device_ownership_level(self):
        """Gets the device_ownership_level of this MobileDeviceDetails.  # noqa: E501


        :return: The device_ownership_level of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._device_ownership_level

    @device_ownership_level.setter
    def device_ownership_level(self, device_ownership_level):
        """Sets the device_ownership_level of this MobileDeviceDetails.


        :param device_ownership_level: The device_ownership_level of this MobileDeviceDetails.  # noqa: E501
        :type device_ownership_level: str
        """

        self._device_ownership_level = device_ownership_level

    @property
    def site(self):
        """Gets the site of this MobileDeviceDetails.  # noqa: E501


        :return: The site of this MobileDeviceDetails.  # noqa: E501
        :rtype: LocationBuilding
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this MobileDeviceDetails.


        :param site: The site of this MobileDeviceDetails.  # noqa: E501
        :type site: LocationBuilding
        """

        self._site = site

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this MobileDeviceDetails.  # noqa: E501


        :return: The extension_attributes of this MobileDeviceDetails.  # noqa: E501
        :rtype: list[ExtensionAttribute]
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this MobileDeviceDetails.


        :param extension_attributes: The extension_attributes of this MobileDeviceDetails.  # noqa: E501
        :type extension_attributes: list[ExtensionAttribute]
        """

        self._extension_attributes = extension_attributes

    @property
    def location(self):
        """Gets the location of this MobileDeviceDetails.  # noqa: E501


        :return: The location of this MobileDeviceDetails.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MobileDeviceDetails.


        :param location: The location of this MobileDeviceDetails.  # noqa: E501
        :type location: Location
        """

        self._location = location

    @property
    def type(self):
        """Gets the type of this MobileDeviceDetails.  # noqa: E501

        Based on the value of this either ios, appleTv, android objects will be populated.  # noqa: E501

        :return: The type of this MobileDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MobileDeviceDetails.

        Based on the value of this either ios, appleTv, android objects will be populated.  # noqa: E501

        :param type: The type of this MobileDeviceDetails.  # noqa: E501
        :type type: str
        """
        allowed_values = ["ios", "appleTv", "android", "unknown"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ios(self):
        """Gets the ios of this MobileDeviceDetails.  # noqa: E501


        :return: The ios of this MobileDeviceDetails.  # noqa: E501
        :rtype: IosDetails
        """
        return self._ios

    @ios.setter
    def ios(self, ios):
        """Sets the ios of this MobileDeviceDetails.


        :param ios: The ios of this MobileDeviceDetails.  # noqa: E501
        :type ios: IosDetails
        """

        self._ios = ios

    @property
    def apple_tv(self):
        """Gets the apple_tv of this MobileDeviceDetails.  # noqa: E501


        :return: The apple_tv of this MobileDeviceDetails.  # noqa: E501
        :rtype: AppleTvDetails
        """
        return self._apple_tv

    @apple_tv.setter
    def apple_tv(self, apple_tv):
        """Sets the apple_tv of this MobileDeviceDetails.


        :param apple_tv: The apple_tv of this MobileDeviceDetails.  # noqa: E501
        :type apple_tv: AppleTvDetails
        """

        self._apple_tv = apple_tv

    @property
    def android(self):
        """Gets the android of this MobileDeviceDetails.  # noqa: E501


        :return: The android of this MobileDeviceDetails.  # noqa: E501
        :rtype: AndroidDetails
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this MobileDeviceDetails.


        :param android: The android of this MobileDeviceDetails.  # noqa: E501
        :type android: AndroidDetails
        """

        self._android = android

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MobileDeviceDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MobileDeviceDetails):
            return True

        return self.to_dict() != other.to_dict()
