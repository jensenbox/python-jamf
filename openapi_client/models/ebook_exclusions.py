# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EbookExclusions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'computer_ids': 'list[str]',
        'computer_group_ids': 'list[str]',
        'mobile_device_ids': 'list[str]',
        'mobile_device_group_ids': 'list[str]',
        'building_ids': 'list[str]',
        'department_ids': 'list[str]',
        'user_ids': 'list[str]',
        'user_group_ids': 'list[str]',
        'limitations': 'EbookLimitations'
    }

    attribute_map = {
        'computer_ids': 'computerIds',
        'computer_group_ids': 'computerGroupIds',
        'mobile_device_ids': 'mobileDeviceIds',
        'mobile_device_group_ids': 'mobileDeviceGroupIds',
        'building_ids': 'buildingIds',
        'department_ids': 'departmentIds',
        'user_ids': 'userIds',
        'user_group_ids': 'userGroupIds',
        'limitations': 'limitations'
    }

    def __init__(self, computer_ids=None, computer_group_ids=None, mobile_device_ids=None, mobile_device_group_ids=None, building_ids=None, department_ids=None, user_ids=None, user_group_ids=None, limitations=None, local_vars_configuration=None):  # noqa: E501
        """EbookExclusions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._computer_ids = None
        self._computer_group_ids = None
        self._mobile_device_ids = None
        self._mobile_device_group_ids = None
        self._building_ids = None
        self._department_ids = None
        self._user_ids = None
        self._user_group_ids = None
        self._limitations = None
        self.discriminator = None

        if computer_ids is not None:
            self.computer_ids = computer_ids
        if computer_group_ids is not None:
            self.computer_group_ids = computer_group_ids
        if mobile_device_ids is not None:
            self.mobile_device_ids = mobile_device_ids
        if mobile_device_group_ids is not None:
            self.mobile_device_group_ids = mobile_device_group_ids
        if building_ids is not None:
            self.building_ids = building_ids
        if department_ids is not None:
            self.department_ids = department_ids
        if user_ids is not None:
            self.user_ids = user_ids
        if user_group_ids is not None:
            self.user_group_ids = user_group_ids
        if limitations is not None:
            self.limitations = limitations

    @property
    def computer_ids(self):
        """Gets the computer_ids of this EbookExclusions.  # noqa: E501


        :return: The computer_ids of this EbookExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._computer_ids

    @computer_ids.setter
    def computer_ids(self, computer_ids):
        """Sets the computer_ids of this EbookExclusions.


        :param computer_ids: The computer_ids of this EbookExclusions.  # noqa: E501
        :type computer_ids: list[str]
        """

        self._computer_ids = computer_ids

    @property
    def computer_group_ids(self):
        """Gets the computer_group_ids of this EbookExclusions.  # noqa: E501


        :return: The computer_group_ids of this EbookExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._computer_group_ids

    @computer_group_ids.setter
    def computer_group_ids(self, computer_group_ids):
        """Sets the computer_group_ids of this EbookExclusions.


        :param computer_group_ids: The computer_group_ids of this EbookExclusions.  # noqa: E501
        :type computer_group_ids: list[str]
        """

        self._computer_group_ids = computer_group_ids

    @property
    def mobile_device_ids(self):
        """Gets the mobile_device_ids of this EbookExclusions.  # noqa: E501


        :return: The mobile_device_ids of this EbookExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._mobile_device_ids

    @mobile_device_ids.setter
    def mobile_device_ids(self, mobile_device_ids):
        """Sets the mobile_device_ids of this EbookExclusions.


        :param mobile_device_ids: The mobile_device_ids of this EbookExclusions.  # noqa: E501
        :type mobile_device_ids: list[str]
        """

        self._mobile_device_ids = mobile_device_ids

    @property
    def mobile_device_group_ids(self):
        """Gets the mobile_device_group_ids of this EbookExclusions.  # noqa: E501


        :return: The mobile_device_group_ids of this EbookExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._mobile_device_group_ids

    @mobile_device_group_ids.setter
    def mobile_device_group_ids(self, mobile_device_group_ids):
        """Sets the mobile_device_group_ids of this EbookExclusions.


        :param mobile_device_group_ids: The mobile_device_group_ids of this EbookExclusions.  # noqa: E501
        :type mobile_device_group_ids: list[str]
        """

        self._mobile_device_group_ids = mobile_device_group_ids

    @property
    def building_ids(self):
        """Gets the building_ids of this EbookExclusions.  # noqa: E501


        :return: The building_ids of this EbookExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._building_ids

    @building_ids.setter
    def building_ids(self, building_ids):
        """Sets the building_ids of this EbookExclusions.


        :param building_ids: The building_ids of this EbookExclusions.  # noqa: E501
        :type building_ids: list[str]
        """

        self._building_ids = building_ids

    @property
    def department_ids(self):
        """Gets the department_ids of this EbookExclusions.  # noqa: E501


        :return: The department_ids of this EbookExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._department_ids

    @department_ids.setter
    def department_ids(self, department_ids):
        """Sets the department_ids of this EbookExclusions.


        :param department_ids: The department_ids of this EbookExclusions.  # noqa: E501
        :type department_ids: list[str]
        """

        self._department_ids = department_ids

    @property
    def user_ids(self):
        """Gets the user_ids of this EbookExclusions.  # noqa: E501


        :return: The user_ids of this EbookExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this EbookExclusions.


        :param user_ids: The user_ids of this EbookExclusions.  # noqa: E501
        :type user_ids: list[str]
        """

        self._user_ids = user_ids

    @property
    def user_group_ids(self):
        """Gets the user_group_ids of this EbookExclusions.  # noqa: E501


        :return: The user_group_ids of this EbookExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_group_ids

    @user_group_ids.setter
    def user_group_ids(self, user_group_ids):
        """Sets the user_group_ids of this EbookExclusions.


        :param user_group_ids: The user_group_ids of this EbookExclusions.  # noqa: E501
        :type user_group_ids: list[str]
        """

        self._user_group_ids = user_group_ids

    @property
    def limitations(self):
        """Gets the limitations of this EbookExclusions.  # noqa: E501


        :return: The limitations of this EbookExclusions.  # noqa: E501
        :rtype: EbookLimitations
        """
        return self._limitations

    @limitations.setter
    def limitations(self, limitations):
        """Sets the limitations of this EbookExclusions.


        :param limitations: The limitations of this EbookExclusions.  # noqa: E501
        :type limitations: EbookLimitations
        """

        self._limitations = limitations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EbookExclusions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EbookExclusions):
            return True

        return self.to_dict() != other.to_dict()
