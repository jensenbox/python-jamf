# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MobileDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'serial_number': 'str',
        'wifi_mac_address': 'str',
        'udid': 'str',
        'phone_number': 'str',
        'model': 'str',
        'model_identifier': 'str',
        'username': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'serial_number': 'serialNumber',
        'wifi_mac_address': 'wifiMacAddress',
        'udid': 'udid',
        'phone_number': 'phoneNumber',
        'model': 'model',
        'model_identifier': 'modelIdentifier',
        'username': 'username',
        'type': 'type'
    }

    def __init__(self, id=None, name=None, serial_number=None, wifi_mac_address=None, udid=None, phone_number=None, model=None, model_identifier=None, username=None, type=None, local_vars_configuration=None):  # noqa: E501
        """MobileDevice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._serial_number = None
        self._wifi_mac_address = None
        self._udid = None
        self._phone_number = None
        self._model = None
        self._model_identifier = None
        self._username = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if serial_number is not None:
            self.serial_number = serial_number
        if wifi_mac_address is not None:
            self.wifi_mac_address = wifi_mac_address
        if udid is not None:
            self.udid = udid
        if phone_number is not None:
            self.phone_number = phone_number
        if model is not None:
            self.model = model
        if model_identifier is not None:
            self.model_identifier = model_identifier
        if username is not None:
            self.username = username
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this MobileDevice.  # noqa: E501


        :return: The id of this MobileDevice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MobileDevice.


        :param id: The id of this MobileDevice.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MobileDevice.  # noqa: E501


        :return: The name of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MobileDevice.


        :param name: The name of this MobileDevice.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def serial_number(self):
        """Gets the serial_number of this MobileDevice.  # noqa: E501


        :return: The serial_number of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this MobileDevice.


        :param serial_number: The serial_number of this MobileDevice.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def wifi_mac_address(self):
        """Gets the wifi_mac_address of this MobileDevice.  # noqa: E501


        :return: The wifi_mac_address of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._wifi_mac_address

    @wifi_mac_address.setter
    def wifi_mac_address(self, wifi_mac_address):
        """Sets the wifi_mac_address of this MobileDevice.


        :param wifi_mac_address: The wifi_mac_address of this MobileDevice.  # noqa: E501
        :type wifi_mac_address: str
        """

        self._wifi_mac_address = wifi_mac_address

    @property
    def udid(self):
        """Gets the udid of this MobileDevice.  # noqa: E501


        :return: The udid of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this MobileDevice.


        :param udid: The udid of this MobileDevice.  # noqa: E501
        :type udid: str
        """

        self._udid = udid

    @property
    def phone_number(self):
        """Gets the phone_number of this MobileDevice.  # noqa: E501


        :return: The phone_number of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this MobileDevice.


        :param phone_number: The phone_number of this MobileDevice.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def model(self):
        """Gets the model of this MobileDevice.  # noqa: E501


        :return: The model of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this MobileDevice.


        :param model: The model of this MobileDevice.  # noqa: E501
        :type model: str
        """

        self._model = model

    @property
    def model_identifier(self):
        """Gets the model_identifier of this MobileDevice.  # noqa: E501


        :return: The model_identifier of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._model_identifier

    @model_identifier.setter
    def model_identifier(self, model_identifier):
        """Sets the model_identifier of this MobileDevice.


        :param model_identifier: The model_identifier of this MobileDevice.  # noqa: E501
        :type model_identifier: str
        """

        self._model_identifier = model_identifier

    @property
    def username(self):
        """Gets the username of this MobileDevice.  # noqa: E501


        :return: The username of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MobileDevice.


        :param username: The username of this MobileDevice.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def type(self):
        """Gets the type of this MobileDevice.  # noqa: E501


        :return: The type of this MobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MobileDevice.


        :param type: The type of this MobileDevice.  # noqa: E501
        :type type: str
        """
        allowed_values = ["ios", "appleTv", "android", "unknown"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MobileDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MobileDevice):
            return True

        return self.to_dict() != other.to_dict()
