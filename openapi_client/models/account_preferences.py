# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AccountPreferences(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language': 'str',
        'date_format': 'str',
        'region': 'str',
        'timezone': 'str',
        'is_disable_relative_dates': 'bool'
    }

    attribute_map = {
        'language': 'language',
        'date_format': 'dateFormat',
        'region': 'region',
        'timezone': 'timezone',
        'is_disable_relative_dates': 'isDisableRelativeDates'
    }

    def __init__(self, language=None, date_format=None, region=None, timezone=None, is_disable_relative_dates=None, local_vars_configuration=None):  # noqa: E501
        """AccountPreferences - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language = None
        self._date_format = None
        self._region = None
        self._timezone = None
        self._is_disable_relative_dates = None
        self.discriminator = None

        if language is not None:
            self.language = language
        if date_format is not None:
            self.date_format = date_format
        if region is not None:
            self.region = region
        if timezone is not None:
            self.timezone = timezone
        if is_disable_relative_dates is not None:
            self.is_disable_relative_dates = is_disable_relative_dates

    @property
    def language(self):
        """Gets the language of this AccountPreferences.  # noqa: E501


        :return: The language of this AccountPreferences.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AccountPreferences.


        :param language: The language of this AccountPreferences.  # noqa: E501
        :type language: str
        """

        self._language = language

    @property
    def date_format(self):
        """Gets the date_format of this AccountPreferences.  # noqa: E501


        :return: The date_format of this AccountPreferences.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this AccountPreferences.


        :param date_format: The date_format of this AccountPreferences.  # noqa: E501
        :type date_format: str
        """

        self._date_format = date_format

    @property
    def region(self):
        """Gets the region of this AccountPreferences.  # noqa: E501


        :return: The region of this AccountPreferences.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AccountPreferences.


        :param region: The region of this AccountPreferences.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def timezone(self):
        """Gets the timezone of this AccountPreferences.  # noqa: E501


        :return: The timezone of this AccountPreferences.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AccountPreferences.


        :param timezone: The timezone of this AccountPreferences.  # noqa: E501
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def is_disable_relative_dates(self):
        """Gets the is_disable_relative_dates of this AccountPreferences.  # noqa: E501


        :return: The is_disable_relative_dates of this AccountPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._is_disable_relative_dates

    @is_disable_relative_dates.setter
    def is_disable_relative_dates(self, is_disable_relative_dates):
        """Sets the is_disable_relative_dates of this AccountPreferences.


        :param is_disable_relative_dates: The is_disable_relative_dates of this AccountPreferences.  # noqa: E501
        :type is_disable_relative_dates: bool
        """

        self._is_disable_relative_dates = is_disable_relative_dates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountPreferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountPreferences):
            return True

        return self.to_dict() != other.to_dict()
