# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EnrollmentSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_install_single_profile': 'bool',
        'is_signing_mdm_profile_enabled': 'bool',
        'mdm_signing_certificate': 'MDMSigningCertificate',
        'is_restrict_reenrollment': 'bool',
        'is_flush_location_information': 'bool',
        'is_flush_location_history_information': 'bool',
        'is_flush_policy_history': 'bool',
        'is_flush_extension_attributes': 'bool',
        'flush_mdm_commands_on_reenroll': 'str',
        'is_enabled_macos_enterprise_enrollment': 'bool',
        'management_username': 'str',
        'management_password': 'str',
        'password_type': 'str',
        'random_password_length': 'int',
        'is_create_management_account': 'bool',
        'is_hide_management_account': 'bool',
        'is_allow_ssh_only_management_account': 'bool',
        'is_ensure_ssh_running': 'bool',
        'is_launch_self_service': 'bool',
        'is_sign_quick_add': 'bool',
        'developer_certificate_identity': 'EnrollmentSettingsDeveloperCertificateIdentity',
        'developer_certificate_identity_details': 'CertificateDetails',
        'mdm_signing_certificate_details': 'CertificateDetails',
        'is_enable_ios_enterprise_enrollment': 'bool',
        'is_enable_ios_personal_enrollment': 'bool',
        'personal_device_enrollment_type': 'str'
    }

    attribute_map = {
        'is_install_single_profile': 'isInstallSingleProfile',
        'is_signing_mdm_profile_enabled': 'isSigningMdmProfileEnabled',
        'mdm_signing_certificate': 'mdmSigningCertificate',
        'is_restrict_reenrollment': 'isRestrictReenrollment',
        'is_flush_location_information': 'isFlushLocationInformation',
        'is_flush_location_history_information': 'isFlushLocationHistoryInformation',
        'is_flush_policy_history': 'isFlushPolicyHistory',
        'is_flush_extension_attributes': 'isFlushExtensionAttributes',
        'flush_mdm_commands_on_reenroll': 'flushMdmCommandsOnReenroll',
        'is_enabled_macos_enterprise_enrollment': 'isEnabledMacosEnterpriseEnrollment',
        'management_username': 'managementUsername',
        'management_password': 'managementPassword',
        'password_type': 'passwordType',
        'random_password_length': 'randomPasswordLength',
        'is_create_management_account': 'isCreateManagementAccount',
        'is_hide_management_account': 'isHideManagementAccount',
        'is_allow_ssh_only_management_account': 'isAllowSshOnlyManagementAccount',
        'is_ensure_ssh_running': 'isEnsureSshRunning',
        'is_launch_self_service': 'isLaunchSelfService',
        'is_sign_quick_add': 'isSignQuickAdd',
        'developer_certificate_identity': 'developerCertificateIdentity',
        'developer_certificate_identity_details': 'developerCertificateIdentityDetails',
        'mdm_signing_certificate_details': 'mdmSigningCertificateDetails',
        'is_enable_ios_enterprise_enrollment': 'isEnableIosEnterpriseEnrollment',
        'is_enable_ios_personal_enrollment': 'isEnableIosPersonalEnrollment',
        'personal_device_enrollment_type': 'personalDeviceEnrollmentType'
    }

    def __init__(self, is_install_single_profile=False, is_signing_mdm_profile_enabled=False, mdm_signing_certificate=None, is_restrict_reenrollment=False, is_flush_location_information=False, is_flush_location_history_information=False, is_flush_policy_history=False, is_flush_extension_attributes=False, flush_mdm_commands_on_reenroll='DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED', is_enabled_macos_enterprise_enrollment=False, management_username='', management_password='null', password_type='STATIC', random_password_length=8, is_create_management_account=True, is_hide_management_account=False, is_allow_ssh_only_management_account=False, is_ensure_ssh_running=True, is_launch_self_service=False, is_sign_quick_add=False, developer_certificate_identity=None, developer_certificate_identity_details=None, mdm_signing_certificate_details=None, is_enable_ios_enterprise_enrollment=True, is_enable_ios_personal_enrollment=False, personal_device_enrollment_type='PERSONALDEVICEPROFILES', local_vars_configuration=None):  # noqa: E501
        """EnrollmentSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_install_single_profile = None
        self._is_signing_mdm_profile_enabled = None
        self._mdm_signing_certificate = None
        self._is_restrict_reenrollment = None
        self._is_flush_location_information = None
        self._is_flush_location_history_information = None
        self._is_flush_policy_history = None
        self._is_flush_extension_attributes = None
        self._flush_mdm_commands_on_reenroll = None
        self._is_enabled_macos_enterprise_enrollment = None
        self._management_username = None
        self._management_password = None
        self._password_type = None
        self._random_password_length = None
        self._is_create_management_account = None
        self._is_hide_management_account = None
        self._is_allow_ssh_only_management_account = None
        self._is_ensure_ssh_running = None
        self._is_launch_self_service = None
        self._is_sign_quick_add = None
        self._developer_certificate_identity = None
        self._developer_certificate_identity_details = None
        self._mdm_signing_certificate_details = None
        self._is_enable_ios_enterprise_enrollment = None
        self._is_enable_ios_personal_enrollment = None
        self._personal_device_enrollment_type = None
        self.discriminator = None

        if is_install_single_profile is not None:
            self.is_install_single_profile = is_install_single_profile
        if is_signing_mdm_profile_enabled is not None:
            self.is_signing_mdm_profile_enabled = is_signing_mdm_profile_enabled
        if mdm_signing_certificate is not None:
            self.mdm_signing_certificate = mdm_signing_certificate
        if is_restrict_reenrollment is not None:
            self.is_restrict_reenrollment = is_restrict_reenrollment
        if is_flush_location_information is not None:
            self.is_flush_location_information = is_flush_location_information
        if is_flush_location_history_information is not None:
            self.is_flush_location_history_information = is_flush_location_history_information
        if is_flush_policy_history is not None:
            self.is_flush_policy_history = is_flush_policy_history
        if is_flush_extension_attributes is not None:
            self.is_flush_extension_attributes = is_flush_extension_attributes
        if flush_mdm_commands_on_reenroll is not None:
            self.flush_mdm_commands_on_reenroll = flush_mdm_commands_on_reenroll
        if is_enabled_macos_enterprise_enrollment is not None:
            self.is_enabled_macos_enterprise_enrollment = is_enabled_macos_enterprise_enrollment
        if management_username is not None:
            self.management_username = management_username
        if management_password is not None:
            self.management_password = management_password
        if password_type is not None:
            self.password_type = password_type
        if random_password_length is not None:
            self.random_password_length = random_password_length
        if is_create_management_account is not None:
            self.is_create_management_account = is_create_management_account
        if is_hide_management_account is not None:
            self.is_hide_management_account = is_hide_management_account
        if is_allow_ssh_only_management_account is not None:
            self.is_allow_ssh_only_management_account = is_allow_ssh_only_management_account
        if is_ensure_ssh_running is not None:
            self.is_ensure_ssh_running = is_ensure_ssh_running
        if is_launch_self_service is not None:
            self.is_launch_self_service = is_launch_self_service
        if is_sign_quick_add is not None:
            self.is_sign_quick_add = is_sign_quick_add
        if developer_certificate_identity is not None:
            self.developer_certificate_identity = developer_certificate_identity
        if developer_certificate_identity_details is not None:
            self.developer_certificate_identity_details = developer_certificate_identity_details
        if mdm_signing_certificate_details is not None:
            self.mdm_signing_certificate_details = mdm_signing_certificate_details
        if is_enable_ios_enterprise_enrollment is not None:
            self.is_enable_ios_enterprise_enrollment = is_enable_ios_enterprise_enrollment
        if is_enable_ios_personal_enrollment is not None:
            self.is_enable_ios_personal_enrollment = is_enable_ios_personal_enrollment
        if personal_device_enrollment_type is not None:
            self.personal_device_enrollment_type = personal_device_enrollment_type

    @property
    def is_install_single_profile(self):
        """Gets the is_install_single_profile of this EnrollmentSettings.  # noqa: E501


        :return: The is_install_single_profile of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_install_single_profile

    @is_install_single_profile.setter
    def is_install_single_profile(self, is_install_single_profile):
        """Sets the is_install_single_profile of this EnrollmentSettings.


        :param is_install_single_profile: The is_install_single_profile of this EnrollmentSettings.  # noqa: E501
        :type is_install_single_profile: bool
        """

        self._is_install_single_profile = is_install_single_profile

    @property
    def is_signing_mdm_profile_enabled(self):
        """Gets the is_signing_mdm_profile_enabled of this EnrollmentSettings.  # noqa: E501


        :return: The is_signing_mdm_profile_enabled of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_signing_mdm_profile_enabled

    @is_signing_mdm_profile_enabled.setter
    def is_signing_mdm_profile_enabled(self, is_signing_mdm_profile_enabled):
        """Sets the is_signing_mdm_profile_enabled of this EnrollmentSettings.


        :param is_signing_mdm_profile_enabled: The is_signing_mdm_profile_enabled of this EnrollmentSettings.  # noqa: E501
        :type is_signing_mdm_profile_enabled: bool
        """

        self._is_signing_mdm_profile_enabled = is_signing_mdm_profile_enabled

    @property
    def mdm_signing_certificate(self):
        """Gets the mdm_signing_certificate of this EnrollmentSettings.  # noqa: E501


        :return: The mdm_signing_certificate of this EnrollmentSettings.  # noqa: E501
        :rtype: MDMSigningCertificate
        """
        return self._mdm_signing_certificate

    @mdm_signing_certificate.setter
    def mdm_signing_certificate(self, mdm_signing_certificate):
        """Sets the mdm_signing_certificate of this EnrollmentSettings.


        :param mdm_signing_certificate: The mdm_signing_certificate of this EnrollmentSettings.  # noqa: E501
        :type mdm_signing_certificate: MDMSigningCertificate
        """

        self._mdm_signing_certificate = mdm_signing_certificate

    @property
    def is_restrict_reenrollment(self):
        """Gets the is_restrict_reenrollment of this EnrollmentSettings.  # noqa: E501


        :return: The is_restrict_reenrollment of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_restrict_reenrollment

    @is_restrict_reenrollment.setter
    def is_restrict_reenrollment(self, is_restrict_reenrollment):
        """Sets the is_restrict_reenrollment of this EnrollmentSettings.


        :param is_restrict_reenrollment: The is_restrict_reenrollment of this EnrollmentSettings.  # noqa: E501
        :type is_restrict_reenrollment: bool
        """

        self._is_restrict_reenrollment = is_restrict_reenrollment

    @property
    def is_flush_location_information(self):
        """Gets the is_flush_location_information of this EnrollmentSettings.  # noqa: E501


        :return: The is_flush_location_information of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_flush_location_information

    @is_flush_location_information.setter
    def is_flush_location_information(self, is_flush_location_information):
        """Sets the is_flush_location_information of this EnrollmentSettings.


        :param is_flush_location_information: The is_flush_location_information of this EnrollmentSettings.  # noqa: E501
        :type is_flush_location_information: bool
        """

        self._is_flush_location_information = is_flush_location_information

    @property
    def is_flush_location_history_information(self):
        """Gets the is_flush_location_history_information of this EnrollmentSettings.  # noqa: E501


        :return: The is_flush_location_history_information of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_flush_location_history_information

    @is_flush_location_history_information.setter
    def is_flush_location_history_information(self, is_flush_location_history_information):
        """Sets the is_flush_location_history_information of this EnrollmentSettings.


        :param is_flush_location_history_information: The is_flush_location_history_information of this EnrollmentSettings.  # noqa: E501
        :type is_flush_location_history_information: bool
        """

        self._is_flush_location_history_information = is_flush_location_history_information

    @property
    def is_flush_policy_history(self):
        """Gets the is_flush_policy_history of this EnrollmentSettings.  # noqa: E501


        :return: The is_flush_policy_history of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_flush_policy_history

    @is_flush_policy_history.setter
    def is_flush_policy_history(self, is_flush_policy_history):
        """Sets the is_flush_policy_history of this EnrollmentSettings.


        :param is_flush_policy_history: The is_flush_policy_history of this EnrollmentSettings.  # noqa: E501
        :type is_flush_policy_history: bool
        """

        self._is_flush_policy_history = is_flush_policy_history

    @property
    def is_flush_extension_attributes(self):
        """Gets the is_flush_extension_attributes of this EnrollmentSettings.  # noqa: E501


        :return: The is_flush_extension_attributes of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_flush_extension_attributes

    @is_flush_extension_attributes.setter
    def is_flush_extension_attributes(self, is_flush_extension_attributes):
        """Sets the is_flush_extension_attributes of this EnrollmentSettings.


        :param is_flush_extension_attributes: The is_flush_extension_attributes of this EnrollmentSettings.  # noqa: E501
        :type is_flush_extension_attributes: bool
        """

        self._is_flush_extension_attributes = is_flush_extension_attributes

    @property
    def flush_mdm_commands_on_reenroll(self):
        """Gets the flush_mdm_commands_on_reenroll of this EnrollmentSettings.  # noqa: E501


        :return: The flush_mdm_commands_on_reenroll of this EnrollmentSettings.  # noqa: E501
        :rtype: str
        """
        return self._flush_mdm_commands_on_reenroll

    @flush_mdm_commands_on_reenroll.setter
    def flush_mdm_commands_on_reenroll(self, flush_mdm_commands_on_reenroll):
        """Sets the flush_mdm_commands_on_reenroll of this EnrollmentSettings.


        :param flush_mdm_commands_on_reenroll: The flush_mdm_commands_on_reenroll of this EnrollmentSettings.  # noqa: E501
        :type flush_mdm_commands_on_reenroll: str
        """
        allowed_values = ["DELETE_NOTHING", "DELETE_ERRORS", "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED", "DELETE_EVERYTHING"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and flush_mdm_commands_on_reenroll not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `flush_mdm_commands_on_reenroll` ({0}), must be one of {1}"  # noqa: E501
                .format(flush_mdm_commands_on_reenroll, allowed_values)
            )

        self._flush_mdm_commands_on_reenroll = flush_mdm_commands_on_reenroll

    @property
    def is_enabled_macos_enterprise_enrollment(self):
        """Gets the is_enabled_macos_enterprise_enrollment of this EnrollmentSettings.  # noqa: E501


        :return: The is_enabled_macos_enterprise_enrollment of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled_macos_enterprise_enrollment

    @is_enabled_macos_enterprise_enrollment.setter
    def is_enabled_macos_enterprise_enrollment(self, is_enabled_macos_enterprise_enrollment):
        """Sets the is_enabled_macos_enterprise_enrollment of this EnrollmentSettings.


        :param is_enabled_macos_enterprise_enrollment: The is_enabled_macos_enterprise_enrollment of this EnrollmentSettings.  # noqa: E501
        :type is_enabled_macos_enterprise_enrollment: bool
        """

        self._is_enabled_macos_enterprise_enrollment = is_enabled_macos_enterprise_enrollment

    @property
    def management_username(self):
        """Gets the management_username of this EnrollmentSettings.  # noqa: E501


        :return: The management_username of this EnrollmentSettings.  # noqa: E501
        :rtype: str
        """
        return self._management_username

    @management_username.setter
    def management_username(self, management_username):
        """Sets the management_username of this EnrollmentSettings.


        :param management_username: The management_username of this EnrollmentSettings.  # noqa: E501
        :type management_username: str
        """

        self._management_username = management_username

    @property
    def management_password(self):
        """Gets the management_password of this EnrollmentSettings.  # noqa: E501


        :return: The management_password of this EnrollmentSettings.  # noqa: E501
        :rtype: str
        """
        return self._management_password

    @management_password.setter
    def management_password(self, management_password):
        """Sets the management_password of this EnrollmentSettings.


        :param management_password: The management_password of this EnrollmentSettings.  # noqa: E501
        :type management_password: str
        """

        self._management_password = management_password

    @property
    def password_type(self):
        """Gets the password_type of this EnrollmentSettings.  # noqa: E501


        :return: The password_type of this EnrollmentSettings.  # noqa: E501
        :rtype: str
        """
        return self._password_type

    @password_type.setter
    def password_type(self, password_type):
        """Sets the password_type of this EnrollmentSettings.


        :param password_type: The password_type of this EnrollmentSettings.  # noqa: E501
        :type password_type: str
        """
        allowed_values = ["STATIC", "RANDOM"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and password_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `password_type` ({0}), must be one of {1}"  # noqa: E501
                .format(password_type, allowed_values)
            )

        self._password_type = password_type

    @property
    def random_password_length(self):
        """Gets the random_password_length of this EnrollmentSettings.  # noqa: E501


        :return: The random_password_length of this EnrollmentSettings.  # noqa: E501
        :rtype: int
        """
        return self._random_password_length

    @random_password_length.setter
    def random_password_length(self, random_password_length):
        """Sets the random_password_length of this EnrollmentSettings.


        :param random_password_length: The random_password_length of this EnrollmentSettings.  # noqa: E501
        :type random_password_length: int
        """

        self._random_password_length = random_password_length

    @property
    def is_create_management_account(self):
        """Gets the is_create_management_account of this EnrollmentSettings.  # noqa: E501


        :return: The is_create_management_account of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_create_management_account

    @is_create_management_account.setter
    def is_create_management_account(self, is_create_management_account):
        """Sets the is_create_management_account of this EnrollmentSettings.


        :param is_create_management_account: The is_create_management_account of this EnrollmentSettings.  # noqa: E501
        :type is_create_management_account: bool
        """

        self._is_create_management_account = is_create_management_account

    @property
    def is_hide_management_account(self):
        """Gets the is_hide_management_account of this EnrollmentSettings.  # noqa: E501


        :return: The is_hide_management_account of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_hide_management_account

    @is_hide_management_account.setter
    def is_hide_management_account(self, is_hide_management_account):
        """Sets the is_hide_management_account of this EnrollmentSettings.


        :param is_hide_management_account: The is_hide_management_account of this EnrollmentSettings.  # noqa: E501
        :type is_hide_management_account: bool
        """

        self._is_hide_management_account = is_hide_management_account

    @property
    def is_allow_ssh_only_management_account(self):
        """Gets the is_allow_ssh_only_management_account of this EnrollmentSettings.  # noqa: E501


        :return: The is_allow_ssh_only_management_account of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_ssh_only_management_account

    @is_allow_ssh_only_management_account.setter
    def is_allow_ssh_only_management_account(self, is_allow_ssh_only_management_account):
        """Sets the is_allow_ssh_only_management_account of this EnrollmentSettings.


        :param is_allow_ssh_only_management_account: The is_allow_ssh_only_management_account of this EnrollmentSettings.  # noqa: E501
        :type is_allow_ssh_only_management_account: bool
        """

        self._is_allow_ssh_only_management_account = is_allow_ssh_only_management_account

    @property
    def is_ensure_ssh_running(self):
        """Gets the is_ensure_ssh_running of this EnrollmentSettings.  # noqa: E501


        :return: The is_ensure_ssh_running of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_ensure_ssh_running

    @is_ensure_ssh_running.setter
    def is_ensure_ssh_running(self, is_ensure_ssh_running):
        """Sets the is_ensure_ssh_running of this EnrollmentSettings.


        :param is_ensure_ssh_running: The is_ensure_ssh_running of this EnrollmentSettings.  # noqa: E501
        :type is_ensure_ssh_running: bool
        """

        self._is_ensure_ssh_running = is_ensure_ssh_running

    @property
    def is_launch_self_service(self):
        """Gets the is_launch_self_service of this EnrollmentSettings.  # noqa: E501


        :return: The is_launch_self_service of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_launch_self_service

    @is_launch_self_service.setter
    def is_launch_self_service(self, is_launch_self_service):
        """Sets the is_launch_self_service of this EnrollmentSettings.


        :param is_launch_self_service: The is_launch_self_service of this EnrollmentSettings.  # noqa: E501
        :type is_launch_self_service: bool
        """

        self._is_launch_self_service = is_launch_self_service

    @property
    def is_sign_quick_add(self):
        """Gets the is_sign_quick_add of this EnrollmentSettings.  # noqa: E501


        :return: The is_sign_quick_add of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_sign_quick_add

    @is_sign_quick_add.setter
    def is_sign_quick_add(self, is_sign_quick_add):
        """Sets the is_sign_quick_add of this EnrollmentSettings.


        :param is_sign_quick_add: The is_sign_quick_add of this EnrollmentSettings.  # noqa: E501
        :type is_sign_quick_add: bool
        """

        self._is_sign_quick_add = is_sign_quick_add

    @property
    def developer_certificate_identity(self):
        """Gets the developer_certificate_identity of this EnrollmentSettings.  # noqa: E501


        :return: The developer_certificate_identity of this EnrollmentSettings.  # noqa: E501
        :rtype: EnrollmentSettingsDeveloperCertificateIdentity
        """
        return self._developer_certificate_identity

    @developer_certificate_identity.setter
    def developer_certificate_identity(self, developer_certificate_identity):
        """Sets the developer_certificate_identity of this EnrollmentSettings.


        :param developer_certificate_identity: The developer_certificate_identity of this EnrollmentSettings.  # noqa: E501
        :type developer_certificate_identity: EnrollmentSettingsDeveloperCertificateIdentity
        """

        self._developer_certificate_identity = developer_certificate_identity

    @property
    def developer_certificate_identity_details(self):
        """Gets the developer_certificate_identity_details of this EnrollmentSettings.  # noqa: E501


        :return: The developer_certificate_identity_details of this EnrollmentSettings.  # noqa: E501
        :rtype: CertificateDetails
        """
        return self._developer_certificate_identity_details

    @developer_certificate_identity_details.setter
    def developer_certificate_identity_details(self, developer_certificate_identity_details):
        """Sets the developer_certificate_identity_details of this EnrollmentSettings.


        :param developer_certificate_identity_details: The developer_certificate_identity_details of this EnrollmentSettings.  # noqa: E501
        :type developer_certificate_identity_details: CertificateDetails
        """

        self._developer_certificate_identity_details = developer_certificate_identity_details

    @property
    def mdm_signing_certificate_details(self):
        """Gets the mdm_signing_certificate_details of this EnrollmentSettings.  # noqa: E501


        :return: The mdm_signing_certificate_details of this EnrollmentSettings.  # noqa: E501
        :rtype: CertificateDetails
        """
        return self._mdm_signing_certificate_details

    @mdm_signing_certificate_details.setter
    def mdm_signing_certificate_details(self, mdm_signing_certificate_details):
        """Sets the mdm_signing_certificate_details of this EnrollmentSettings.


        :param mdm_signing_certificate_details: The mdm_signing_certificate_details of this EnrollmentSettings.  # noqa: E501
        :type mdm_signing_certificate_details: CertificateDetails
        """

        self._mdm_signing_certificate_details = mdm_signing_certificate_details

    @property
    def is_enable_ios_enterprise_enrollment(self):
        """Gets the is_enable_ios_enterprise_enrollment of this EnrollmentSettings.  # noqa: E501


        :return: The is_enable_ios_enterprise_enrollment of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_enable_ios_enterprise_enrollment

    @is_enable_ios_enterprise_enrollment.setter
    def is_enable_ios_enterprise_enrollment(self, is_enable_ios_enterprise_enrollment):
        """Sets the is_enable_ios_enterprise_enrollment of this EnrollmentSettings.


        :param is_enable_ios_enterprise_enrollment: The is_enable_ios_enterprise_enrollment of this EnrollmentSettings.  # noqa: E501
        :type is_enable_ios_enterprise_enrollment: bool
        """

        self._is_enable_ios_enterprise_enrollment = is_enable_ios_enterprise_enrollment

    @property
    def is_enable_ios_personal_enrollment(self):
        """Gets the is_enable_ios_personal_enrollment of this EnrollmentSettings.  # noqa: E501


        :return: The is_enable_ios_personal_enrollment of this EnrollmentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_enable_ios_personal_enrollment

    @is_enable_ios_personal_enrollment.setter
    def is_enable_ios_personal_enrollment(self, is_enable_ios_personal_enrollment):
        """Sets the is_enable_ios_personal_enrollment of this EnrollmentSettings.


        :param is_enable_ios_personal_enrollment: The is_enable_ios_personal_enrollment of this EnrollmentSettings.  # noqa: E501
        :type is_enable_ios_personal_enrollment: bool
        """

        self._is_enable_ios_personal_enrollment = is_enable_ios_personal_enrollment

    @property
    def personal_device_enrollment_type(self):
        """Gets the personal_device_enrollment_type of this EnrollmentSettings.  # noqa: E501


        :return: The personal_device_enrollment_type of this EnrollmentSettings.  # noqa: E501
        :rtype: str
        """
        return self._personal_device_enrollment_type

    @personal_device_enrollment_type.setter
    def personal_device_enrollment_type(self, personal_device_enrollment_type):
        """Sets the personal_device_enrollment_type of this EnrollmentSettings.


        :param personal_device_enrollment_type: The personal_device_enrollment_type of this EnrollmentSettings.  # noqa: E501
        :type personal_device_enrollment_type: str
        """
        allowed_values = ["USERENROLLMENT", "PERSONALDEVICEPROFILES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and personal_device_enrollment_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `personal_device_enrollment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(personal_device_enrollment_type, allowed_values)
            )

        self._personal_device_enrollment_type = personal_device_enrollment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentSettings):
            return True

        return self.to_dict() != other.to_dict()
