# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerUserAndLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'realname': 'str',
        'email': 'str',
        'position': 'str',
        'phone': 'str',
        'department_id': 'str',
        'building_id': 'str',
        'room': 'str',
        'extension_attributes': 'list[ComputerExtensionAttribute]'
    }

    attribute_map = {
        'username': 'username',
        'realname': 'realname',
        'email': 'email',
        'position': 'position',
        'phone': 'phone',
        'department_id': 'departmentId',
        'building_id': 'buildingId',
        'room': 'room',
        'extension_attributes': 'extensionAttributes'
    }

    def __init__(self, username=None, realname=None, email=None, position=None, phone=None, department_id=None, building_id=None, room=None, extension_attributes=None, local_vars_configuration=None):  # noqa: E501
        """ComputerUserAndLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._realname = None
        self._email = None
        self._position = None
        self._phone = None
        self._department_id = None
        self._building_id = None
        self._room = None
        self._extension_attributes = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if realname is not None:
            self.realname = realname
        if email is not None:
            self.email = email
        if position is not None:
            self.position = position
        if phone is not None:
            self.phone = phone
        if department_id is not None:
            self.department_id = department_id
        if building_id is not None:
            self.building_id = building_id
        if room is not None:
            self.room = room
        if extension_attributes is not None:
            self.extension_attributes = extension_attributes

    @property
    def username(self):
        """Gets the username of this ComputerUserAndLocation.  # noqa: E501


        :return: The username of this ComputerUserAndLocation.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ComputerUserAndLocation.


        :param username: The username of this ComputerUserAndLocation.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def realname(self):
        """Gets the realname of this ComputerUserAndLocation.  # noqa: E501


        :return: The realname of this ComputerUserAndLocation.  # noqa: E501
        :rtype: str
        """
        return self._realname

    @realname.setter
    def realname(self, realname):
        """Sets the realname of this ComputerUserAndLocation.


        :param realname: The realname of this ComputerUserAndLocation.  # noqa: E501
        :type realname: str
        """

        self._realname = realname

    @property
    def email(self):
        """Gets the email of this ComputerUserAndLocation.  # noqa: E501


        :return: The email of this ComputerUserAndLocation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ComputerUserAndLocation.


        :param email: The email of this ComputerUserAndLocation.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def position(self):
        """Gets the position of this ComputerUserAndLocation.  # noqa: E501


        :return: The position of this ComputerUserAndLocation.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ComputerUserAndLocation.


        :param position: The position of this ComputerUserAndLocation.  # noqa: E501
        :type position: str
        """

        self._position = position

    @property
    def phone(self):
        """Gets the phone of this ComputerUserAndLocation.  # noqa: E501


        :return: The phone of this ComputerUserAndLocation.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ComputerUserAndLocation.


        :param phone: The phone of this ComputerUserAndLocation.  # noqa: E501
        :type phone: str
        """

        self._phone = phone

    @property
    def department_id(self):
        """Gets the department_id of this ComputerUserAndLocation.  # noqa: E501


        :return: The department_id of this ComputerUserAndLocation.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this ComputerUserAndLocation.


        :param department_id: The department_id of this ComputerUserAndLocation.  # noqa: E501
        :type department_id: str
        """

        self._department_id = department_id

    @property
    def building_id(self):
        """Gets the building_id of this ComputerUserAndLocation.  # noqa: E501


        :return: The building_id of this ComputerUserAndLocation.  # noqa: E501
        :rtype: str
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this ComputerUserAndLocation.


        :param building_id: The building_id of this ComputerUserAndLocation.  # noqa: E501
        :type building_id: str
        """

        self._building_id = building_id

    @property
    def room(self):
        """Gets the room of this ComputerUserAndLocation.  # noqa: E501


        :return: The room of this ComputerUserAndLocation.  # noqa: E501
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this ComputerUserAndLocation.


        :param room: The room of this ComputerUserAndLocation.  # noqa: E501
        :type room: str
        """

        self._room = room

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this ComputerUserAndLocation.  # noqa: E501


        :return: The extension_attributes of this ComputerUserAndLocation.  # noqa: E501
        :rtype: list[ComputerExtensionAttribute]
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this ComputerUserAndLocation.


        :param extension_attributes: The extension_attributes of this ComputerUserAndLocation.  # noqa: E501
        :type extension_attributes: list[ComputerExtensionAttribute]
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerUserAndLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerUserAndLocation):
            return True

        return self.to_dict() != other.to_dict()
