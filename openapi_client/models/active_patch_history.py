# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ActivePatchHistory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'patch_id': 'int',
        'patch_history_id': 'int',
        'device_id': 'int',
        'device_name': 'str',
        'building_id': 'int',
        'building_name': 'str',
        'department_id': 'int',
        'department_name': 'str',
        'site_id': 'int',
        'site_name': 'str',
        'username': 'str',
        'os_version': 'str',
        'last_check_in': 'datetime',
        'installed_version': 'str'
    }

    attribute_map = {
        'patch_id': 'patchId',
        'patch_history_id': 'patchHistoryId',
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'building_id': 'buildingId',
        'building_name': 'buildingName',
        'department_id': 'departmentId',
        'department_name': 'departmentName',
        'site_id': 'siteId',
        'site_name': 'siteName',
        'username': 'username',
        'os_version': 'osVersion',
        'last_check_in': 'lastCheckIn',
        'installed_version': 'installedVersion'
    }

    def __init__(self, patch_id=None, patch_history_id=None, device_id=None, device_name=None, building_id=None, building_name=None, department_id=None, department_name=None, site_id=None, site_name=None, username=None, os_version=None, last_check_in=None, installed_version=None, local_vars_configuration=None):  # noqa: E501
        """ActivePatchHistory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._patch_id = None
        self._patch_history_id = None
        self._device_id = None
        self._device_name = None
        self._building_id = None
        self._building_name = None
        self._department_id = None
        self._department_name = None
        self._site_id = None
        self._site_name = None
        self._username = None
        self._os_version = None
        self._last_check_in = None
        self._installed_version = None
        self.discriminator = None

        if patch_id is not None:
            self.patch_id = patch_id
        if patch_history_id is not None:
            self.patch_history_id = patch_history_id
        if device_id is not None:
            self.device_id = device_id
        if device_name is not None:
            self.device_name = device_name
        if building_id is not None:
            self.building_id = building_id
        if building_name is not None:
            self.building_name = building_name
        if department_id is not None:
            self.department_id = department_id
        if department_name is not None:
            self.department_name = department_name
        if site_id is not None:
            self.site_id = site_id
        if site_name is not None:
            self.site_name = site_name
        if username is not None:
            self.username = username
        if os_version is not None:
            self.os_version = os_version
        if last_check_in is not None:
            self.last_check_in = last_check_in
        if installed_version is not None:
            self.installed_version = installed_version

    @property
    def patch_id(self):
        """Gets the patch_id of this ActivePatchHistory.  # noqa: E501


        :return: The patch_id of this ActivePatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._patch_id

    @patch_id.setter
    def patch_id(self, patch_id):
        """Sets the patch_id of this ActivePatchHistory.


        :param patch_id: The patch_id of this ActivePatchHistory.  # noqa: E501
        :type patch_id: int
        """

        self._patch_id = patch_id

    @property
    def patch_history_id(self):
        """Gets the patch_history_id of this ActivePatchHistory.  # noqa: E501


        :return: The patch_history_id of this ActivePatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._patch_history_id

    @patch_history_id.setter
    def patch_history_id(self, patch_history_id):
        """Sets the patch_history_id of this ActivePatchHistory.


        :param patch_history_id: The patch_history_id of this ActivePatchHistory.  # noqa: E501
        :type patch_history_id: int
        """

        self._patch_history_id = patch_history_id

    @property
    def device_id(self):
        """Gets the device_id of this ActivePatchHistory.  # noqa: E501


        :return: The device_id of this ActivePatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ActivePatchHistory.


        :param device_id: The device_id of this ActivePatchHistory.  # noqa: E501
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this ActivePatchHistory.  # noqa: E501


        :return: The device_name of this ActivePatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ActivePatchHistory.


        :param device_name: The device_name of this ActivePatchHistory.  # noqa: E501
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def building_id(self):
        """Gets the building_id of this ActivePatchHistory.  # noqa: E501


        :return: The building_id of this ActivePatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this ActivePatchHistory.


        :param building_id: The building_id of this ActivePatchHistory.  # noqa: E501
        :type building_id: int
        """

        self._building_id = building_id

    @property
    def building_name(self):
        """Gets the building_name of this ActivePatchHistory.  # noqa: E501


        :return: The building_name of this ActivePatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """Sets the building_name of this ActivePatchHistory.


        :param building_name: The building_name of this ActivePatchHistory.  # noqa: E501
        :type building_name: str
        """

        self._building_name = building_name

    @property
    def department_id(self):
        """Gets the department_id of this ActivePatchHistory.  # noqa: E501


        :return: The department_id of this ActivePatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this ActivePatchHistory.


        :param department_id: The department_id of this ActivePatchHistory.  # noqa: E501
        :type department_id: int
        """

        self._department_id = department_id

    @property
    def department_name(self):
        """Gets the department_name of this ActivePatchHistory.  # noqa: E501


        :return: The department_name of this ActivePatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._department_name

    @department_name.setter
    def department_name(self, department_name):
        """Sets the department_name of this ActivePatchHistory.


        :param department_name: The department_name of this ActivePatchHistory.  # noqa: E501
        :type department_name: str
        """

        self._department_name = department_name

    @property
    def site_id(self):
        """Gets the site_id of this ActivePatchHistory.  # noqa: E501


        :return: The site_id of this ActivePatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ActivePatchHistory.


        :param site_id: The site_id of this ActivePatchHistory.  # noqa: E501
        :type site_id: int
        """

        self._site_id = site_id

    @property
    def site_name(self):
        """Gets the site_name of this ActivePatchHistory.  # noqa: E501


        :return: The site_name of this ActivePatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this ActivePatchHistory.


        :param site_name: The site_name of this ActivePatchHistory.  # noqa: E501
        :type site_name: str
        """

        self._site_name = site_name

    @property
    def username(self):
        """Gets the username of this ActivePatchHistory.  # noqa: E501


        :return: The username of this ActivePatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ActivePatchHistory.


        :param username: The username of this ActivePatchHistory.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def os_version(self):
        """Gets the os_version of this ActivePatchHistory.  # noqa: E501


        :return: The os_version of this ActivePatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this ActivePatchHistory.


        :param os_version: The os_version of this ActivePatchHistory.  # noqa: E501
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def last_check_in(self):
        """Gets the last_check_in of this ActivePatchHistory.  # noqa: E501


        :return: The last_check_in of this ActivePatchHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._last_check_in

    @last_check_in.setter
    def last_check_in(self, last_check_in):
        """Sets the last_check_in of this ActivePatchHistory.


        :param last_check_in: The last_check_in of this ActivePatchHistory.  # noqa: E501
        :type last_check_in: datetime
        """

        self._last_check_in = last_check_in

    @property
    def installed_version(self):
        """Gets the installed_version of this ActivePatchHistory.  # noqa: E501


        :return: The installed_version of this ActivePatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._installed_version

    @installed_version.setter
    def installed_version(self, installed_version):
        """Sets the installed_version of this ActivePatchHistory.


        :param installed_version: The installed_version of this ActivePatchHistory.  # noqa: E501
        :type installed_version: str
        """

        self._installed_version = installed_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivePatchHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivePatchHistory):
            return True

        return self.to_dict() != other.to_dict()
