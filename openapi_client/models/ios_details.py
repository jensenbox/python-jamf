# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class IosDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model': 'str',
        'model_identifier': 'str',
        'model_number': 'str',
        'is_supervised': 'bool',
        'battery_level': 'int',
        'last_backup_timestamp': 'datetime',
        'capacity_mb': 'int',
        'available_mb': 'int',
        'percentage_used': 'int',
        'is_shared': 'bool',
        'is_device_locator_service_enabled': 'bool',
        'is_do_not_disturb_enabled': 'bool',
        'is_cloud_backup_enabled': 'bool',
        'last_cloud_backup_timestamp': 'datetime',
        'is_location_services_enabled': 'bool',
        'is_i_tunes_store_account_active': 'bool',
        'is_ble_capable': 'bool',
        'computer': 'IosDetailsComputer',
        'purchasing': 'Purchasing',
        'security': 'Security',
        'network': 'Network',
        'applications': 'list[IosDetailsApplications]',
        'certificates': 'list[IosDetailsCertificates]',
        'ebooks': 'list[IosDetailsEbooks]',
        'configuration_profiles': 'list[ConfigurationProfile]',
        'provisioning_profiles': 'list[ProvisioningProfile]',
        'attachments': 'list[IosDetailsAttachments]'
    }

    attribute_map = {
        'model': 'model',
        'model_identifier': 'modelIdentifier',
        'model_number': 'modelNumber',
        'is_supervised': 'isSupervised',
        'battery_level': 'batteryLevel',
        'last_backup_timestamp': 'lastBackupTimestamp',
        'capacity_mb': 'capacityMb',
        'available_mb': 'availableMb',
        'percentage_used': 'percentageUsed',
        'is_shared': 'isShared',
        'is_device_locator_service_enabled': 'isDeviceLocatorServiceEnabled',
        'is_do_not_disturb_enabled': 'isDoNotDisturbEnabled',
        'is_cloud_backup_enabled': 'isCloudBackupEnabled',
        'last_cloud_backup_timestamp': 'lastCloudBackupTimestamp',
        'is_location_services_enabled': 'isLocationServicesEnabled',
        'is_i_tunes_store_account_active': 'isITunesStoreAccountActive',
        'is_ble_capable': 'isBleCapable',
        'computer': 'computer',
        'purchasing': 'purchasing',
        'security': 'security',
        'network': 'network',
        'applications': 'applications',
        'certificates': 'certificates',
        'ebooks': 'ebooks',
        'configuration_profiles': 'configurationProfiles',
        'provisioning_profiles': 'provisioningProfiles',
        'attachments': 'attachments'
    }

    def __init__(self, model=None, model_identifier=None, model_number=None, is_supervised=None, battery_level=None, last_backup_timestamp=None, capacity_mb=None, available_mb=None, percentage_used=None, is_shared=None, is_device_locator_service_enabled=None, is_do_not_disturb_enabled=None, is_cloud_backup_enabled=None, last_cloud_backup_timestamp=None, is_location_services_enabled=None, is_i_tunes_store_account_active=None, is_ble_capable=None, computer=None, purchasing=None, security=None, network=None, applications=None, certificates=None, ebooks=None, configuration_profiles=None, provisioning_profiles=None, attachments=None, local_vars_configuration=None):  # noqa: E501
        """IosDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model = None
        self._model_identifier = None
        self._model_number = None
        self._is_supervised = None
        self._battery_level = None
        self._last_backup_timestamp = None
        self._capacity_mb = None
        self._available_mb = None
        self._percentage_used = None
        self._is_shared = None
        self._is_device_locator_service_enabled = None
        self._is_do_not_disturb_enabled = None
        self._is_cloud_backup_enabled = None
        self._last_cloud_backup_timestamp = None
        self._is_location_services_enabled = None
        self._is_i_tunes_store_account_active = None
        self._is_ble_capable = None
        self._computer = None
        self._purchasing = None
        self._security = None
        self._network = None
        self._applications = None
        self._certificates = None
        self._ebooks = None
        self._configuration_profiles = None
        self._provisioning_profiles = None
        self._attachments = None
        self.discriminator = None

        if model is not None:
            self.model = model
        if model_identifier is not None:
            self.model_identifier = model_identifier
        if model_number is not None:
            self.model_number = model_number
        if is_supervised is not None:
            self.is_supervised = is_supervised
        if battery_level is not None:
            self.battery_level = battery_level
        if last_backup_timestamp is not None:
            self.last_backup_timestamp = last_backup_timestamp
        if capacity_mb is not None:
            self.capacity_mb = capacity_mb
        if available_mb is not None:
            self.available_mb = available_mb
        if percentage_used is not None:
            self.percentage_used = percentage_used
        if is_shared is not None:
            self.is_shared = is_shared
        if is_device_locator_service_enabled is not None:
            self.is_device_locator_service_enabled = is_device_locator_service_enabled
        if is_do_not_disturb_enabled is not None:
            self.is_do_not_disturb_enabled = is_do_not_disturb_enabled
        if is_cloud_backup_enabled is not None:
            self.is_cloud_backup_enabled = is_cloud_backup_enabled
        if last_cloud_backup_timestamp is not None:
            self.last_cloud_backup_timestamp = last_cloud_backup_timestamp
        if is_location_services_enabled is not None:
            self.is_location_services_enabled = is_location_services_enabled
        if is_i_tunes_store_account_active is not None:
            self.is_i_tunes_store_account_active = is_i_tunes_store_account_active
        if is_ble_capable is not None:
            self.is_ble_capable = is_ble_capable
        if computer is not None:
            self.computer = computer
        if purchasing is not None:
            self.purchasing = purchasing
        if security is not None:
            self.security = security
        if network is not None:
            self.network = network
        if applications is not None:
            self.applications = applications
        if certificates is not None:
            self.certificates = certificates
        if ebooks is not None:
            self.ebooks = ebooks
        if configuration_profiles is not None:
            self.configuration_profiles = configuration_profiles
        if provisioning_profiles is not None:
            self.provisioning_profiles = provisioning_profiles
        if attachments is not None:
            self.attachments = attachments

    @property
    def model(self):
        """Gets the model of this IosDetails.  # noqa: E501


        :return: The model of this IosDetails.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this IosDetails.


        :param model: The model of this IosDetails.  # noqa: E501
        :type model: str
        """

        self._model = model

    @property
    def model_identifier(self):
        """Gets the model_identifier of this IosDetails.  # noqa: E501


        :return: The model_identifier of this IosDetails.  # noqa: E501
        :rtype: str
        """
        return self._model_identifier

    @model_identifier.setter
    def model_identifier(self, model_identifier):
        """Sets the model_identifier of this IosDetails.


        :param model_identifier: The model_identifier of this IosDetails.  # noqa: E501
        :type model_identifier: str
        """

        self._model_identifier = model_identifier

    @property
    def model_number(self):
        """Gets the model_number of this IosDetails.  # noqa: E501


        :return: The model_number of this IosDetails.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this IosDetails.


        :param model_number: The model_number of this IosDetails.  # noqa: E501
        :type model_number: str
        """

        self._model_number = model_number

    @property
    def is_supervised(self):
        """Gets the is_supervised of this IosDetails.  # noqa: E501


        :return: The is_supervised of this IosDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_supervised

    @is_supervised.setter
    def is_supervised(self, is_supervised):
        """Sets the is_supervised of this IosDetails.


        :param is_supervised: The is_supervised of this IosDetails.  # noqa: E501
        :type is_supervised: bool
        """

        self._is_supervised = is_supervised

    @property
    def battery_level(self):
        """Gets the battery_level of this IosDetails.  # noqa: E501


        :return: The battery_level of this IosDetails.  # noqa: E501
        :rtype: int
        """
        return self._battery_level

    @battery_level.setter
    def battery_level(self, battery_level):
        """Sets the battery_level of this IosDetails.


        :param battery_level: The battery_level of this IosDetails.  # noqa: E501
        :type battery_level: int
        """

        self._battery_level = battery_level

    @property
    def last_backup_timestamp(self):
        """Gets the last_backup_timestamp of this IosDetails.  # noqa: E501


        :return: The last_backup_timestamp of this IosDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_backup_timestamp

    @last_backup_timestamp.setter
    def last_backup_timestamp(self, last_backup_timestamp):
        """Sets the last_backup_timestamp of this IosDetails.


        :param last_backup_timestamp: The last_backup_timestamp of this IosDetails.  # noqa: E501
        :type last_backup_timestamp: datetime
        """

        self._last_backup_timestamp = last_backup_timestamp

    @property
    def capacity_mb(self):
        """Gets the capacity_mb of this IosDetails.  # noqa: E501


        :return: The capacity_mb of this IosDetails.  # noqa: E501
        :rtype: int
        """
        return self._capacity_mb

    @capacity_mb.setter
    def capacity_mb(self, capacity_mb):
        """Sets the capacity_mb of this IosDetails.


        :param capacity_mb: The capacity_mb of this IosDetails.  # noqa: E501
        :type capacity_mb: int
        """

        self._capacity_mb = capacity_mb

    @property
    def available_mb(self):
        """Gets the available_mb of this IosDetails.  # noqa: E501


        :return: The available_mb of this IosDetails.  # noqa: E501
        :rtype: int
        """
        return self._available_mb

    @available_mb.setter
    def available_mb(self, available_mb):
        """Sets the available_mb of this IosDetails.


        :param available_mb: The available_mb of this IosDetails.  # noqa: E501
        :type available_mb: int
        """

        self._available_mb = available_mb

    @property
    def percentage_used(self):
        """Gets the percentage_used of this IosDetails.  # noqa: E501


        :return: The percentage_used of this IosDetails.  # noqa: E501
        :rtype: int
        """
        return self._percentage_used

    @percentage_used.setter
    def percentage_used(self, percentage_used):
        """Sets the percentage_used of this IosDetails.


        :param percentage_used: The percentage_used of this IosDetails.  # noqa: E501
        :type percentage_used: int
        """

        self._percentage_used = percentage_used

    @property
    def is_shared(self):
        """Gets the is_shared of this IosDetails.  # noqa: E501


        :return: The is_shared of this IosDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this IosDetails.


        :param is_shared: The is_shared of this IosDetails.  # noqa: E501
        :type is_shared: bool
        """

        self._is_shared = is_shared

    @property
    def is_device_locator_service_enabled(self):
        """Gets the is_device_locator_service_enabled of this IosDetails.  # noqa: E501


        :return: The is_device_locator_service_enabled of this IosDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_locator_service_enabled

    @is_device_locator_service_enabled.setter
    def is_device_locator_service_enabled(self, is_device_locator_service_enabled):
        """Sets the is_device_locator_service_enabled of this IosDetails.


        :param is_device_locator_service_enabled: The is_device_locator_service_enabled of this IosDetails.  # noqa: E501
        :type is_device_locator_service_enabled: bool
        """

        self._is_device_locator_service_enabled = is_device_locator_service_enabled

    @property
    def is_do_not_disturb_enabled(self):
        """Gets the is_do_not_disturb_enabled of this IosDetails.  # noqa: E501


        :return: The is_do_not_disturb_enabled of this IosDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_do_not_disturb_enabled

    @is_do_not_disturb_enabled.setter
    def is_do_not_disturb_enabled(self, is_do_not_disturb_enabled):
        """Sets the is_do_not_disturb_enabled of this IosDetails.


        :param is_do_not_disturb_enabled: The is_do_not_disturb_enabled of this IosDetails.  # noqa: E501
        :type is_do_not_disturb_enabled: bool
        """

        self._is_do_not_disturb_enabled = is_do_not_disturb_enabled

    @property
    def is_cloud_backup_enabled(self):
        """Gets the is_cloud_backup_enabled of this IosDetails.  # noqa: E501


        :return: The is_cloud_backup_enabled of this IosDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_cloud_backup_enabled

    @is_cloud_backup_enabled.setter
    def is_cloud_backup_enabled(self, is_cloud_backup_enabled):
        """Sets the is_cloud_backup_enabled of this IosDetails.


        :param is_cloud_backup_enabled: The is_cloud_backup_enabled of this IosDetails.  # noqa: E501
        :type is_cloud_backup_enabled: bool
        """

        self._is_cloud_backup_enabled = is_cloud_backup_enabled

    @property
    def last_cloud_backup_timestamp(self):
        """Gets the last_cloud_backup_timestamp of this IosDetails.  # noqa: E501


        :return: The last_cloud_backup_timestamp of this IosDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_cloud_backup_timestamp

    @last_cloud_backup_timestamp.setter
    def last_cloud_backup_timestamp(self, last_cloud_backup_timestamp):
        """Sets the last_cloud_backup_timestamp of this IosDetails.


        :param last_cloud_backup_timestamp: The last_cloud_backup_timestamp of this IosDetails.  # noqa: E501
        :type last_cloud_backup_timestamp: datetime
        """

        self._last_cloud_backup_timestamp = last_cloud_backup_timestamp

    @property
    def is_location_services_enabled(self):
        """Gets the is_location_services_enabled of this IosDetails.  # noqa: E501


        :return: The is_location_services_enabled of this IosDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_location_services_enabled

    @is_location_services_enabled.setter
    def is_location_services_enabled(self, is_location_services_enabled):
        """Sets the is_location_services_enabled of this IosDetails.


        :param is_location_services_enabled: The is_location_services_enabled of this IosDetails.  # noqa: E501
        :type is_location_services_enabled: bool
        """

        self._is_location_services_enabled = is_location_services_enabled

    @property
    def is_i_tunes_store_account_active(self):
        """Gets the is_i_tunes_store_account_active of this IosDetails.  # noqa: E501


        :return: The is_i_tunes_store_account_active of this IosDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_i_tunes_store_account_active

    @is_i_tunes_store_account_active.setter
    def is_i_tunes_store_account_active(self, is_i_tunes_store_account_active):
        """Sets the is_i_tunes_store_account_active of this IosDetails.


        :param is_i_tunes_store_account_active: The is_i_tunes_store_account_active of this IosDetails.  # noqa: E501
        :type is_i_tunes_store_account_active: bool
        """

        self._is_i_tunes_store_account_active = is_i_tunes_store_account_active

    @property
    def is_ble_capable(self):
        """Gets the is_ble_capable of this IosDetails.  # noqa: E501


        :return: The is_ble_capable of this IosDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_ble_capable

    @is_ble_capable.setter
    def is_ble_capable(self, is_ble_capable):
        """Sets the is_ble_capable of this IosDetails.


        :param is_ble_capable: The is_ble_capable of this IosDetails.  # noqa: E501
        :type is_ble_capable: bool
        """

        self._is_ble_capable = is_ble_capable

    @property
    def computer(self):
        """Gets the computer of this IosDetails.  # noqa: E501


        :return: The computer of this IosDetails.  # noqa: E501
        :rtype: IosDetailsComputer
        """
        return self._computer

    @computer.setter
    def computer(self, computer):
        """Sets the computer of this IosDetails.


        :param computer: The computer of this IosDetails.  # noqa: E501
        :type computer: IosDetailsComputer
        """

        self._computer = computer

    @property
    def purchasing(self):
        """Gets the purchasing of this IosDetails.  # noqa: E501


        :return: The purchasing of this IosDetails.  # noqa: E501
        :rtype: Purchasing
        """
        return self._purchasing

    @purchasing.setter
    def purchasing(self, purchasing):
        """Sets the purchasing of this IosDetails.


        :param purchasing: The purchasing of this IosDetails.  # noqa: E501
        :type purchasing: Purchasing
        """

        self._purchasing = purchasing

    @property
    def security(self):
        """Gets the security of this IosDetails.  # noqa: E501


        :return: The security of this IosDetails.  # noqa: E501
        :rtype: Security
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this IosDetails.


        :param security: The security of this IosDetails.  # noqa: E501
        :type security: Security
        """

        self._security = security

    @property
    def network(self):
        """Gets the network of this IosDetails.  # noqa: E501


        :return: The network of this IosDetails.  # noqa: E501
        :rtype: Network
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this IosDetails.


        :param network: The network of this IosDetails.  # noqa: E501
        :type network: Network
        """

        self._network = network

    @property
    def applications(self):
        """Gets the applications of this IosDetails.  # noqa: E501


        :return: The applications of this IosDetails.  # noqa: E501
        :rtype: list[IosDetailsApplications]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this IosDetails.


        :param applications: The applications of this IosDetails.  # noqa: E501
        :type applications: list[IosDetailsApplications]
        """

        self._applications = applications

    @property
    def certificates(self):
        """Gets the certificates of this IosDetails.  # noqa: E501


        :return: The certificates of this IosDetails.  # noqa: E501
        :rtype: list[IosDetailsCertificates]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this IosDetails.


        :param certificates: The certificates of this IosDetails.  # noqa: E501
        :type certificates: list[IosDetailsCertificates]
        """

        self._certificates = certificates

    @property
    def ebooks(self):
        """Gets the ebooks of this IosDetails.  # noqa: E501


        :return: The ebooks of this IosDetails.  # noqa: E501
        :rtype: list[IosDetailsEbooks]
        """
        return self._ebooks

    @ebooks.setter
    def ebooks(self, ebooks):
        """Sets the ebooks of this IosDetails.


        :param ebooks: The ebooks of this IosDetails.  # noqa: E501
        :type ebooks: list[IosDetailsEbooks]
        """

        self._ebooks = ebooks

    @property
    def configuration_profiles(self):
        """Gets the configuration_profiles of this IosDetails.  # noqa: E501


        :return: The configuration_profiles of this IosDetails.  # noqa: E501
        :rtype: list[ConfigurationProfile]
        """
        return self._configuration_profiles

    @configuration_profiles.setter
    def configuration_profiles(self, configuration_profiles):
        """Sets the configuration_profiles of this IosDetails.


        :param configuration_profiles: The configuration_profiles of this IosDetails.  # noqa: E501
        :type configuration_profiles: list[ConfigurationProfile]
        """

        self._configuration_profiles = configuration_profiles

    @property
    def provisioning_profiles(self):
        """Gets the provisioning_profiles of this IosDetails.  # noqa: E501


        :return: The provisioning_profiles of this IosDetails.  # noqa: E501
        :rtype: list[ProvisioningProfile]
        """
        return self._provisioning_profiles

    @provisioning_profiles.setter
    def provisioning_profiles(self, provisioning_profiles):
        """Sets the provisioning_profiles of this IosDetails.


        :param provisioning_profiles: The provisioning_profiles of this IosDetails.  # noqa: E501
        :type provisioning_profiles: list[ProvisioningProfile]
        """

        self._provisioning_profiles = provisioning_profiles

    @property
    def attachments(self):
        """Gets the attachments of this IosDetails.  # noqa: E501


        :return: The attachments of this IosDetails.  # noqa: E501
        :rtype: list[IosDetailsAttachments]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this IosDetails.


        :param attachments: The attachments of this IosDetails.  # noqa: E501
        :type attachments: list[IosDetailsAttachments]
        """

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IosDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IosDetails):
            return True

        return self.to_dict() != other.to_dict()
