# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerContentCachingCacheDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'computer_content_caching_cache_details_id': 'str',
        'category_name': 'str',
        'disk_space_bytes_used': 'int'
    }

    attribute_map = {
        'computer_content_caching_cache_details_id': 'computerContentCachingCacheDetailsId',
        'category_name': 'categoryName',
        'disk_space_bytes_used': 'diskSpaceBytesUsed'
    }

    def __init__(self, computer_content_caching_cache_details_id=None, category_name=None, disk_space_bytes_used=None, local_vars_configuration=None):  # noqa: E501
        """ComputerContentCachingCacheDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._computer_content_caching_cache_details_id = None
        self._category_name = None
        self._disk_space_bytes_used = None
        self.discriminator = None

        if computer_content_caching_cache_details_id is not None:
            self.computer_content_caching_cache_details_id = computer_content_caching_cache_details_id
        if category_name is not None:
            self.category_name = category_name
        if disk_space_bytes_used is not None:
            self.disk_space_bytes_used = disk_space_bytes_used

    @property
    def computer_content_caching_cache_details_id(self):
        """Gets the computer_content_caching_cache_details_id of this ComputerContentCachingCacheDetail.  # noqa: E501


        :return: The computer_content_caching_cache_details_id of this ComputerContentCachingCacheDetail.  # noqa: E501
        :rtype: str
        """
        return self._computer_content_caching_cache_details_id

    @computer_content_caching_cache_details_id.setter
    def computer_content_caching_cache_details_id(self, computer_content_caching_cache_details_id):
        """Sets the computer_content_caching_cache_details_id of this ComputerContentCachingCacheDetail.


        :param computer_content_caching_cache_details_id: The computer_content_caching_cache_details_id of this ComputerContentCachingCacheDetail.  # noqa: E501
        :type computer_content_caching_cache_details_id: str
        """

        self._computer_content_caching_cache_details_id = computer_content_caching_cache_details_id

    @property
    def category_name(self):
        """Gets the category_name of this ComputerContentCachingCacheDetail.  # noqa: E501


        :return: The category_name of this ComputerContentCachingCacheDetail.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this ComputerContentCachingCacheDetail.


        :param category_name: The category_name of this ComputerContentCachingCacheDetail.  # noqa: E501
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def disk_space_bytes_used(self):
        """Gets the disk_space_bytes_used of this ComputerContentCachingCacheDetail.  # noqa: E501


        :return: The disk_space_bytes_used of this ComputerContentCachingCacheDetail.  # noqa: E501
        :rtype: int
        """
        return self._disk_space_bytes_used

    @disk_space_bytes_used.setter
    def disk_space_bytes_used(self, disk_space_bytes_used):
        """Sets the disk_space_bytes_used of this ComputerContentCachingCacheDetail.


        :param disk_space_bytes_used: The disk_space_bytes_used of this ComputerContentCachingCacheDetail.  # noqa: E501
        :type disk_space_bytes_used: int
        """

        self._disk_space_bytes_used = disk_space_bytes_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerContentCachingCacheDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerContentCachingCacheDetail):
            return True

        return self.to_dict() != other.to_dict()
