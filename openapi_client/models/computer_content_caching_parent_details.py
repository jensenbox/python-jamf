# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerContentCachingParentDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_caching_parent_details_id': 'str',
        'ac_power': 'bool',
        'cache_size_bytes': 'int',
        'capabilities': 'ComputerContentCachingParentCapabilities',
        'portable': 'bool',
        'local_network': 'list[ComputerContentCachingParentLocalNetwork]'
    }

    attribute_map = {
        'content_caching_parent_details_id': 'contentCachingParentDetailsId',
        'ac_power': 'acPower',
        'cache_size_bytes': 'cacheSizeBytes',
        'capabilities': 'capabilities',
        'portable': 'portable',
        'local_network': 'localNetwork'
    }

    def __init__(self, content_caching_parent_details_id=None, ac_power=None, cache_size_bytes=None, capabilities=None, portable=None, local_network=None, local_vars_configuration=None):  # noqa: E501
        """ComputerContentCachingParentDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_caching_parent_details_id = None
        self._ac_power = None
        self._cache_size_bytes = None
        self._capabilities = None
        self._portable = None
        self._local_network = None
        self.discriminator = None

        if content_caching_parent_details_id is not None:
            self.content_caching_parent_details_id = content_caching_parent_details_id
        if ac_power is not None:
            self.ac_power = ac_power
        if cache_size_bytes is not None:
            self.cache_size_bytes = cache_size_bytes
        if capabilities is not None:
            self.capabilities = capabilities
        if portable is not None:
            self.portable = portable
        if local_network is not None:
            self.local_network = local_network

    @property
    def content_caching_parent_details_id(self):
        """Gets the content_caching_parent_details_id of this ComputerContentCachingParentDetails.  # noqa: E501


        :return: The content_caching_parent_details_id of this ComputerContentCachingParentDetails.  # noqa: E501
        :rtype: str
        """
        return self._content_caching_parent_details_id

    @content_caching_parent_details_id.setter
    def content_caching_parent_details_id(self, content_caching_parent_details_id):
        """Sets the content_caching_parent_details_id of this ComputerContentCachingParentDetails.


        :param content_caching_parent_details_id: The content_caching_parent_details_id of this ComputerContentCachingParentDetails.  # noqa: E501
        :type content_caching_parent_details_id: str
        """

        self._content_caching_parent_details_id = content_caching_parent_details_id

    @property
    def ac_power(self):
        """Gets the ac_power of this ComputerContentCachingParentDetails.  # noqa: E501


        :return: The ac_power of this ComputerContentCachingParentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._ac_power

    @ac_power.setter
    def ac_power(self, ac_power):
        """Sets the ac_power of this ComputerContentCachingParentDetails.


        :param ac_power: The ac_power of this ComputerContentCachingParentDetails.  # noqa: E501
        :type ac_power: bool
        """

        self._ac_power = ac_power

    @property
    def cache_size_bytes(self):
        """Gets the cache_size_bytes of this ComputerContentCachingParentDetails.  # noqa: E501


        :return: The cache_size_bytes of this ComputerContentCachingParentDetails.  # noqa: E501
        :rtype: int
        """
        return self._cache_size_bytes

    @cache_size_bytes.setter
    def cache_size_bytes(self, cache_size_bytes):
        """Sets the cache_size_bytes of this ComputerContentCachingParentDetails.


        :param cache_size_bytes: The cache_size_bytes of this ComputerContentCachingParentDetails.  # noqa: E501
        :type cache_size_bytes: int
        """

        self._cache_size_bytes = cache_size_bytes

    @property
    def capabilities(self):
        """Gets the capabilities of this ComputerContentCachingParentDetails.  # noqa: E501


        :return: The capabilities of this ComputerContentCachingParentDetails.  # noqa: E501
        :rtype: ComputerContentCachingParentCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this ComputerContentCachingParentDetails.


        :param capabilities: The capabilities of this ComputerContentCachingParentDetails.  # noqa: E501
        :type capabilities: ComputerContentCachingParentCapabilities
        """

        self._capabilities = capabilities

    @property
    def portable(self):
        """Gets the portable of this ComputerContentCachingParentDetails.  # noqa: E501


        :return: The portable of this ComputerContentCachingParentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._portable

    @portable.setter
    def portable(self, portable):
        """Sets the portable of this ComputerContentCachingParentDetails.


        :param portable: The portable of this ComputerContentCachingParentDetails.  # noqa: E501
        :type portable: bool
        """

        self._portable = portable

    @property
    def local_network(self):
        """Gets the local_network of this ComputerContentCachingParentDetails.  # noqa: E501


        :return: The local_network of this ComputerContentCachingParentDetails.  # noqa: E501
        :rtype: list[ComputerContentCachingParentLocalNetwork]
        """
        return self._local_network

    @local_network.setter
    def local_network(self, local_network):
        """Sets the local_network of this ComputerContentCachingParentDetails.


        :param local_network: The local_network of this ComputerContentCachingParentDetails.  # noqa: E501
        :type local_network: list[ComputerContentCachingParentLocalNetwork]
        """

        self._local_network = local_network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerContentCachingParentDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerContentCachingParentDetails):
            return True

        return self.to_dict() != other.to_dict()
