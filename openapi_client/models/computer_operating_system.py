# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerOperatingSystem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'version': 'str',
        'build': 'str',
        'active_directory_status': 'str',
        'master_password_set': 'bool',
        'file_vault2_status': 'str',
        'extension_attributes': 'list[ComputerExtensionAttribute]'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'build': 'build',
        'active_directory_status': 'activeDirectoryStatus',
        'master_password_set': 'masterPasswordSet',
        'file_vault2_status': 'fileVault2Status',
        'extension_attributes': 'extensionAttributes'
    }

    def __init__(self, name=None, version=None, build=None, active_directory_status=None, master_password_set=None, file_vault2_status=None, extension_attributes=None, local_vars_configuration=None):  # noqa: E501
        """ComputerOperatingSystem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._version = None
        self._build = None
        self._active_directory_status = None
        self._master_password_set = None
        self._file_vault2_status = None
        self._extension_attributes = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if build is not None:
            self.build = build
        if active_directory_status is not None:
            self.active_directory_status = active_directory_status
        if master_password_set is not None:
            self.master_password_set = master_password_set
        if file_vault2_status is not None:
            self.file_vault2_status = file_vault2_status
        if extension_attributes is not None:
            self.extension_attributes = extension_attributes

    @property
    def name(self):
        """Gets the name of this ComputerOperatingSystem.  # noqa: E501


        :return: The name of this ComputerOperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputerOperatingSystem.


        :param name: The name of this ComputerOperatingSystem.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this ComputerOperatingSystem.  # noqa: E501


        :return: The version of this ComputerOperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComputerOperatingSystem.


        :param version: The version of this ComputerOperatingSystem.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def build(self):
        """Gets the build of this ComputerOperatingSystem.  # noqa: E501


        :return: The build of this ComputerOperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ComputerOperatingSystem.


        :param build: The build of this ComputerOperatingSystem.  # noqa: E501
        :type build: str
        """

        self._build = build

    @property
    def active_directory_status(self):
        """Gets the active_directory_status of this ComputerOperatingSystem.  # noqa: E501


        :return: The active_directory_status of this ComputerOperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._active_directory_status

    @active_directory_status.setter
    def active_directory_status(self, active_directory_status):
        """Sets the active_directory_status of this ComputerOperatingSystem.


        :param active_directory_status: The active_directory_status of this ComputerOperatingSystem.  # noqa: E501
        :type active_directory_status: str
        """

        self._active_directory_status = active_directory_status

    @property
    def master_password_set(self):
        """Gets the master_password_set of this ComputerOperatingSystem.  # noqa: E501


        :return: The master_password_set of this ComputerOperatingSystem.  # noqa: E501
        :rtype: bool
        """
        return self._master_password_set

    @master_password_set.setter
    def master_password_set(self, master_password_set):
        """Sets the master_password_set of this ComputerOperatingSystem.


        :param master_password_set: The master_password_set of this ComputerOperatingSystem.  # noqa: E501
        :type master_password_set: bool
        """

        self._master_password_set = master_password_set

    @property
    def file_vault2_status(self):
        """Gets the file_vault2_status of this ComputerOperatingSystem.  # noqa: E501


        :return: The file_vault2_status of this ComputerOperatingSystem.  # noqa: E501
        :rtype: str
        """
        return self._file_vault2_status

    @file_vault2_status.setter
    def file_vault2_status(self, file_vault2_status):
        """Sets the file_vault2_status of this ComputerOperatingSystem.


        :param file_vault2_status: The file_vault2_status of this ComputerOperatingSystem.  # noqa: E501
        :type file_vault2_status: str
        """
        allowed_values = ["NOT_APPLICABLE", "NOT_ENCRYPTED", "BOOT_ENCRYPTED", "SOME_ENCRYPTED", "ALL_ENCRYPTED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and file_vault2_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `file_vault2_status` ({0}), must be one of {1}"  # noqa: E501
                .format(file_vault2_status, allowed_values)
            )

        self._file_vault2_status = file_vault2_status

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this ComputerOperatingSystem.  # noqa: E501


        :return: The extension_attributes of this ComputerOperatingSystem.  # noqa: E501
        :rtype: list[ComputerExtensionAttribute]
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this ComputerOperatingSystem.


        :param extension_attributes: The extension_attributes of this ComputerOperatingSystem.  # noqa: E501
        :type extension_attributes: list[ComputerExtensionAttribute]
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerOperatingSystem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerOperatingSystem):
            return True

        return self.to_dict() != other.to_dict()
