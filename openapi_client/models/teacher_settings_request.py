# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TeacherSettingsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_enabled': 'bool',
        'timezone_id': 'str',
        'auto_clear': 'str',
        'max_restriction_length_seconds': 'int'
    }

    attribute_map = {
        'is_enabled': 'isEnabled',
        'timezone_id': 'timezoneId',
        'auto_clear': 'autoClear',
        'max_restriction_length_seconds': 'maxRestrictionLengthSeconds'
    }

    def __init__(self, is_enabled=None, timezone_id=None, auto_clear=None, max_restriction_length_seconds=None, local_vars_configuration=None):  # noqa: E501
        """TeacherSettingsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_enabled = None
        self._timezone_id = None
        self._auto_clear = None
        self._max_restriction_length_seconds = None
        self.discriminator = None

        if is_enabled is not None:
            self.is_enabled = is_enabled
        if timezone_id is not None:
            self.timezone_id = timezone_id
        self.auto_clear = auto_clear
        if max_restriction_length_seconds is not None:
            self.max_restriction_length_seconds = max_restriction_length_seconds

    @property
    def is_enabled(self):
        """Gets the is_enabled of this TeacherSettingsRequest.  # noqa: E501


        :return: The is_enabled of this TeacherSettingsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this TeacherSettingsRequest.


        :param is_enabled: The is_enabled of this TeacherSettingsRequest.  # noqa: E501
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def timezone_id(self):
        """Gets the timezone_id of this TeacherSettingsRequest.  # noqa: E501


        :return: The timezone_id of this TeacherSettingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._timezone_id

    @timezone_id.setter
    def timezone_id(self, timezone_id):
        """Sets the timezone_id of this TeacherSettingsRequest.


        :param timezone_id: The timezone_id of this TeacherSettingsRequest.  # noqa: E501
        :type timezone_id: str
        """

        self._timezone_id = timezone_id

    @property
    def auto_clear(self):
        """Gets the auto_clear of this TeacherSettingsRequest.  # noqa: E501


        :return: The auto_clear of this TeacherSettingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._auto_clear

    @auto_clear.setter
    def auto_clear(self, auto_clear):
        """Sets the auto_clear of this TeacherSettingsRequest.


        :param auto_clear: The auto_clear of this TeacherSettingsRequest.  # noqa: E501
        :type auto_clear: str
        """

        self._auto_clear = auto_clear

    @property
    def max_restriction_length_seconds(self):
        """Gets the max_restriction_length_seconds of this TeacherSettingsRequest.  # noqa: E501


        :return: The max_restriction_length_seconds of this TeacherSettingsRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_restriction_length_seconds

    @max_restriction_length_seconds.setter
    def max_restriction_length_seconds(self, max_restriction_length_seconds):
        """Sets the max_restriction_length_seconds of this TeacherSettingsRequest.


        :param max_restriction_length_seconds: The max_restriction_length_seconds of this TeacherSettingsRequest.  # noqa: E501
        :type max_restriction_length_seconds: int
        """

        self._max_restriction_length_seconds = max_restriction_length_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeacherSettingsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeacherSettingsRequest):
            return True

        return self.to_dict() != other.to_dict()
