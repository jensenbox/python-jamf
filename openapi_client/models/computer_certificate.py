# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerCertificate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'common_name': 'str',
        'identity': 'bool',
        'expiration_date': 'datetime',
        'username': 'str',
        'lifecycle_status': 'str',
        'certificate_status': 'str'
    }

    attribute_map = {
        'common_name': 'commonName',
        'identity': 'identity',
        'expiration_date': 'expirationDate',
        'username': 'username',
        'lifecycle_status': 'lifecycleStatus',
        'certificate_status': 'certificateStatus'
    }

    def __init__(self, common_name=None, identity=None, expiration_date=None, username=None, lifecycle_status=None, certificate_status=None, local_vars_configuration=None):  # noqa: E501
        """ComputerCertificate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._common_name = None
        self._identity = None
        self._expiration_date = None
        self._username = None
        self._lifecycle_status = None
        self._certificate_status = None
        self.discriminator = None

        if common_name is not None:
            self.common_name = common_name
        if identity is not None:
            self.identity = identity
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if username is not None:
            self.username = username
        if lifecycle_status is not None:
            self.lifecycle_status = lifecycle_status
        if certificate_status is not None:
            self.certificate_status = certificate_status

    @property
    def common_name(self):
        """Gets the common_name of this ComputerCertificate.  # noqa: E501


        :return: The common_name of this ComputerCertificate.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this ComputerCertificate.


        :param common_name: The common_name of this ComputerCertificate.  # noqa: E501
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def identity(self):
        """Gets the identity of this ComputerCertificate.  # noqa: E501


        :return: The identity of this ComputerCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this ComputerCertificate.


        :param identity: The identity of this ComputerCertificate.  # noqa: E501
        :type identity: bool
        """

        self._identity = identity

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ComputerCertificate.  # noqa: E501


        :return: The expiration_date of this ComputerCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ComputerCertificate.


        :param expiration_date: The expiration_date of this ComputerCertificate.  # noqa: E501
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def username(self):
        """Gets the username of this ComputerCertificate.  # noqa: E501


        :return: The username of this ComputerCertificate.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ComputerCertificate.


        :param username: The username of this ComputerCertificate.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def lifecycle_status(self):
        """Gets the lifecycle_status of this ComputerCertificate.  # noqa: E501


        :return: The lifecycle_status of this ComputerCertificate.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle_status

    @lifecycle_status.setter
    def lifecycle_status(self, lifecycle_status):
        """Sets the lifecycle_status of this ComputerCertificate.


        :param lifecycle_status: The lifecycle_status of this ComputerCertificate.  # noqa: E501
        :type lifecycle_status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and lifecycle_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `lifecycle_status` ({0}), must be one of {1}"  # noqa: E501
                .format(lifecycle_status, allowed_values)
            )

        self._lifecycle_status = lifecycle_status

    @property
    def certificate_status(self):
        """Gets the certificate_status of this ComputerCertificate.  # noqa: E501


        :return: The certificate_status of this ComputerCertificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate_status

    @certificate_status.setter
    def certificate_status(self, certificate_status):
        """Sets the certificate_status of this ComputerCertificate.


        :param certificate_status: The certificate_status of this ComputerCertificate.  # noqa: E501
        :type certificate_status: str
        """
        allowed_values = ["EXPIRING", "EXPIRED", "REVOKED", "PENDING_REVOKE", "ISSUED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and certificate_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `certificate_status` ({0}), must be one of {1}"  # noqa: E501
                .format(certificate_status, allowed_values)
            )

        self._certificate_status = certificate_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerCertificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerCertificate):
            return True

        return self.to_dict() != other.to_dict()
