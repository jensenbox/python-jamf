# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SelfServiceInstallSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_install_automatically': 'bool',
        'install_location': 'str'
    }

    attribute_map = {
        'is_install_automatically': 'isInstallAutomatically',
        'install_location': 'installLocation'
    }

    def __init__(self, is_install_automatically=True, install_location=None, local_vars_configuration=None):  # noqa: E501
        """SelfServiceInstallSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_install_automatically = None
        self._install_location = None
        self.discriminator = None

        if is_install_automatically is not None:
            self.is_install_automatically = is_install_automatically
        self.install_location = install_location

    @property
    def is_install_automatically(self):
        """Gets the is_install_automatically of this SelfServiceInstallSettings.  # noqa: E501

        true if Self Service is insalled automatically, false if not   # noqa: E501

        :return: The is_install_automatically of this SelfServiceInstallSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_install_automatically

    @is_install_automatically.setter
    def is_install_automatically(self, is_install_automatically):
        """Sets the is_install_automatically of this SelfServiceInstallSettings.

        true if Self Service is insalled automatically, false if not   # noqa: E501

        :param is_install_automatically: The is_install_automatically of this SelfServiceInstallSettings.  # noqa: E501
        :type is_install_automatically: bool
        """

        self._is_install_automatically = is_install_automatically

    @property
    def install_location(self):
        """Gets the install_location of this SelfServiceInstallSettings.  # noqa: E501

        path at which Self Service is installed   # noqa: E501

        :return: The install_location of this SelfServiceInstallSettings.  # noqa: E501
        :rtype: str
        """
        return self._install_location

    @install_location.setter
    def install_location(self, install_location):
        """Sets the install_location of this SelfServiceInstallSettings.

        path at which Self Service is installed   # noqa: E501

        :param install_location: The install_location of this SelfServiceInstallSettings.  # noqa: E501
        :type install_location: str
        """
        if self.local_vars_configuration.client_side_validation and install_location is None:  # noqa: E501
            raise ValueError("Invalid value for `install_location`, must not be `None`")  # noqa: E501

        self._install_location = install_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelfServiceInstallSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelfServiceInstallSettings):
            return True

        return self.to_dict() != other.to_dict()
