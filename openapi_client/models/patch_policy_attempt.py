# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PatchPolicyAttempt(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'attempt_no': 'int',
        'device_id': 'int',
        'actions': 'list[PatchPolicyAttemptAction]'
    }

    attribute_map = {
        'id': 'id',
        'attempt_no': 'attemptNo',
        'device_id': 'deviceId',
        'actions': 'actions'
    }

    def __init__(self, id=None, attempt_no=None, device_id=None, actions=None, local_vars_configuration=None):  # noqa: E501
        """PatchPolicyAttempt - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._attempt_no = None
        self._device_id = None
        self._actions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if attempt_no is not None:
            self.attempt_no = attempt_no
        if device_id is not None:
            self.device_id = device_id
        if actions is not None:
            self.actions = actions

    @property
    def id(self):
        """Gets the id of this PatchPolicyAttempt.  # noqa: E501


        :return: The id of this PatchPolicyAttempt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatchPolicyAttempt.


        :param id: The id of this PatchPolicyAttempt.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def attempt_no(self):
        """Gets the attempt_no of this PatchPolicyAttempt.  # noqa: E501


        :return: The attempt_no of this PatchPolicyAttempt.  # noqa: E501
        :rtype: int
        """
        return self._attempt_no

    @attempt_no.setter
    def attempt_no(self, attempt_no):
        """Sets the attempt_no of this PatchPolicyAttempt.


        :param attempt_no: The attempt_no of this PatchPolicyAttempt.  # noqa: E501
        :type attempt_no: int
        """

        self._attempt_no = attempt_no

    @property
    def device_id(self):
        """Gets the device_id of this PatchPolicyAttempt.  # noqa: E501


        :return: The device_id of this PatchPolicyAttempt.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this PatchPolicyAttempt.


        :param device_id: The device_id of this PatchPolicyAttempt.  # noqa: E501
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def actions(self):
        """Gets the actions of this PatchPolicyAttempt.  # noqa: E501


        :return: The actions of this PatchPolicyAttempt.  # noqa: E501
        :rtype: list[PatchPolicyAttemptAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this PatchPolicyAttempt.


        :param actions: The actions of this PatchPolicyAttempt.  # noqa: E501
        :type actions: list[PatchPolicyAttemptAction]
        """

        self._actions = actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchPolicyAttempt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchPolicyAttempt):
            return True

        return self.to_dict() != other.to_dict()
