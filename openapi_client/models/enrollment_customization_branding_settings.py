# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EnrollmentCustomizationBrandingSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'text_color': 'str',
        'button_color': 'str',
        'button_text_color': 'str',
        'background_color': 'str',
        'icon_url': 'str'
    }

    attribute_map = {
        'text_color': 'textColor',
        'button_color': 'buttonColor',
        'button_text_color': 'buttonTextColor',
        'background_color': 'backgroundColor',
        'icon_url': 'iconUrl'
    }

    def __init__(self, text_color=None, button_color=None, button_text_color=None, background_color=None, icon_url=None, local_vars_configuration=None):  # noqa: E501
        """EnrollmentCustomizationBrandingSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._text_color = None
        self._button_color = None
        self._button_text_color = None
        self._background_color = None
        self._icon_url = None
        self.discriminator = None

        self.text_color = text_color
        self.button_color = button_color
        self.button_text_color = button_text_color
        self.background_color = background_color
        self.icon_url = icon_url

    @property
    def text_color(self):
        """Gets the text_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501


        :return: The text_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this EnrollmentCustomizationBrandingSettings.


        :param text_color: The text_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :type text_color: str
        """
        if self.local_vars_configuration.client_side_validation and text_color is None:  # noqa: E501
            raise ValueError("Invalid value for `text_color`, must not be `None`")  # noqa: E501

        self._text_color = text_color

    @property
    def button_color(self):
        """Gets the button_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501


        :return: The button_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :rtype: str
        """
        return self._button_color

    @button_color.setter
    def button_color(self, button_color):
        """Sets the button_color of this EnrollmentCustomizationBrandingSettings.


        :param button_color: The button_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :type button_color: str
        """
        if self.local_vars_configuration.client_side_validation and button_color is None:  # noqa: E501
            raise ValueError("Invalid value for `button_color`, must not be `None`")  # noqa: E501

        self._button_color = button_color

    @property
    def button_text_color(self):
        """Gets the button_text_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501


        :return: The button_text_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :rtype: str
        """
        return self._button_text_color

    @button_text_color.setter
    def button_text_color(self, button_text_color):
        """Sets the button_text_color of this EnrollmentCustomizationBrandingSettings.


        :param button_text_color: The button_text_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :type button_text_color: str
        """
        if self.local_vars_configuration.client_side_validation and button_text_color is None:  # noqa: E501
            raise ValueError("Invalid value for `button_text_color`, must not be `None`")  # noqa: E501

        self._button_text_color = button_text_color

    @property
    def background_color(self):
        """Gets the background_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501


        :return: The background_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this EnrollmentCustomizationBrandingSettings.


        :param background_color: The background_color of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :type background_color: str
        """
        if self.local_vars_configuration.client_side_validation and background_color is None:  # noqa: E501
            raise ValueError("Invalid value for `background_color`, must not be `None`")  # noqa: E501

        self._background_color = background_color

    @property
    def icon_url(self):
        """Gets the icon_url of this EnrollmentCustomizationBrandingSettings.  # noqa: E501


        :return: The icon_url of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this EnrollmentCustomizationBrandingSettings.


        :param icon_url: The icon_url of this EnrollmentCustomizationBrandingSettings.  # noqa: E501
        :type icon_url: str
        """
        if self.local_vars_configuration.client_side_validation and icon_url is None:  # noqa: E501
            raise ValueError("Invalid value for `icon_url`, must not be `None`")  # noqa: E501

        self._icon_url = icon_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentCustomizationBrandingSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentCustomizationBrandingSettings):
            return True

        return self.to_dict() != other.to_dict()
