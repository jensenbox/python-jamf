# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UserAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'full_name': 'str',
        'email_address': 'str',
        'phone_number': 'str',
        'position': 'str',
        'room': 'str',
        'building_id': 'str',
        'department_id': 'str'
    }

    attribute_map = {
        'full_name': 'fullName',
        'email_address': 'emailAddress',
        'phone_number': 'phoneNumber',
        'position': 'position',
        'room': 'room',
        'building_id': 'buildingId',
        'department_id': 'departmentId'
    }

    def __init__(self, full_name=None, email_address=None, phone_number=None, position=None, room=None, building_id=None, department_id=None, local_vars_configuration=None):  # noqa: E501
        """UserAttributes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._full_name = None
        self._email_address = None
        self._phone_number = None
        self._position = None
        self._room = None
        self._building_id = None
        self._department_id = None
        self.discriminator = None

        if full_name is not None:
            self.full_name = full_name
        if email_address is not None:
            self.email_address = email_address
        if phone_number is not None:
            self.phone_number = phone_number
        if position is not None:
            self.position = position
        if room is not None:
            self.room = room
        if building_id is not None:
            self.building_id = building_id
        if department_id is not None:
            self.department_id = department_id

    @property
    def full_name(self):
        """Gets the full_name of this UserAttributes.  # noqa: E501


        :return: The full_name of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserAttributes.


        :param full_name: The full_name of this UserAttributes.  # noqa: E501
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def email_address(self):
        """Gets the email_address of this UserAttributes.  # noqa: E501


        :return: The email_address of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UserAttributes.


        :param email_address: The email_address of this UserAttributes.  # noqa: E501
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def phone_number(self):
        """Gets the phone_number of this UserAttributes.  # noqa: E501


        :return: The phone_number of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserAttributes.


        :param phone_number: The phone_number of this UserAttributes.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def position(self):
        """Gets the position of this UserAttributes.  # noqa: E501


        :return: The position of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this UserAttributes.


        :param position: The position of this UserAttributes.  # noqa: E501
        :type position: str
        """

        self._position = position

    @property
    def room(self):
        """Gets the room of this UserAttributes.  # noqa: E501


        :return: The room of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this UserAttributes.


        :param room: The room of this UserAttributes.  # noqa: E501
        :type room: str
        """

        self._room = room

    @property
    def building_id(self):
        """Gets the building_id of this UserAttributes.  # noqa: E501


        :return: The building_id of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this UserAttributes.


        :param building_id: The building_id of this UserAttributes.  # noqa: E501
        :type building_id: str
        """

        self._building_id = building_id

    @property
    def department_id(self):
        """Gets the department_id of this UserAttributes.  # noqa: E501


        :return: The department_id of this UserAttributes.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this UserAttributes.


        :param department_id: The department_id of this UserAttributes.  # noqa: E501
        :type department_id: str
        """

        self._department_id = department_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAttributes):
            return True

        return self.to_dict() != other.to_dict()
