# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RetryPatchPolicyParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'patch_policy_id': 'int',
        'device_ids': 'list[int]',
        'is_retry_all_failed': 'bool'
    }

    attribute_map = {
        'patch_policy_id': 'patchPolicyId',
        'device_ids': 'deviceIds',
        'is_retry_all_failed': 'isRetryAllFailed'
    }

    def __init__(self, patch_policy_id=None, device_ids=None, is_retry_all_failed=False, local_vars_configuration=None):  # noqa: E501
        """RetryPatchPolicyParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._patch_policy_id = None
        self._device_ids = None
        self._is_retry_all_failed = None
        self.discriminator = None

        if patch_policy_id is not None:
            self.patch_policy_id = patch_policy_id
        if device_ids is not None:
            self.device_ids = device_ids
        if is_retry_all_failed is not None:
            self.is_retry_all_failed = is_retry_all_failed

    @property
    def patch_policy_id(self):
        """Gets the patch_policy_id of this RetryPatchPolicyParams.  # noqa: E501


        :return: The patch_policy_id of this RetryPatchPolicyParams.  # noqa: E501
        :rtype: int
        """
        return self._patch_policy_id

    @patch_policy_id.setter
    def patch_policy_id(self, patch_policy_id):
        """Sets the patch_policy_id of this RetryPatchPolicyParams.


        :param patch_policy_id: The patch_policy_id of this RetryPatchPolicyParams.  # noqa: E501
        :type patch_policy_id: int
        """

        self._patch_policy_id = patch_policy_id

    @property
    def device_ids(self):
        """Gets the device_ids of this RetryPatchPolicyParams.  # noqa: E501


        :return: The device_ids of this RetryPatchPolicyParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this RetryPatchPolicyParams.


        :param device_ids: The device_ids of this RetryPatchPolicyParams.  # noqa: E501
        :type device_ids: list[int]
        """

        self._device_ids = device_ids

    @property
    def is_retry_all_failed(self):
        """Gets the is_retry_all_failed of this RetryPatchPolicyParams.  # noqa: E501


        :return: The is_retry_all_failed of this RetryPatchPolicyParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_retry_all_failed

    @is_retry_all_failed.setter
    def is_retry_all_failed(self, is_retry_all_failed):
        """Sets the is_retry_all_failed of this RetryPatchPolicyParams.


        :param is_retry_all_failed: The is_retry_all_failed of this RetryPatchPolicyParams.  # noqa: E501
        :type is_retry_all_failed: bool
        """

        self._is_retry_all_failed = is_retry_all_failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetryPatchPolicyParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RetryPatchPolicyParams):
            return True

        return self.to_dict() != other.to_dict()
