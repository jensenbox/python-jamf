# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EnrollmentCustomizationPanelLdapAuthAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username_label': 'str',
        'password_label': 'str',
        'title': 'str',
        'back_button_text': 'str',
        'continue_button_text': 'str',
        'ldap_group_access': 'list[EnrollmentCustomizationLdapGroupAccess]'
    }

    attribute_map = {
        'username_label': 'usernameLabel',
        'password_label': 'passwordLabel',
        'title': 'title',
        'back_button_text': 'backButtonText',
        'continue_button_text': 'continueButtonText',
        'ldap_group_access': 'ldapGroupAccess'
    }

    def __init__(self, username_label=None, password_label=None, title=None, back_button_text=None, continue_button_text=None, ldap_group_access=None, local_vars_configuration=None):  # noqa: E501
        """EnrollmentCustomizationPanelLdapAuthAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username_label = None
        self._password_label = None
        self._title = None
        self._back_button_text = None
        self._continue_button_text = None
        self._ldap_group_access = None
        self.discriminator = None

        self.username_label = username_label
        self.password_label = password_label
        self.title = title
        self.back_button_text = back_button_text
        self.continue_button_text = continue_button_text
        if ldap_group_access is not None:
            self.ldap_group_access = ldap_group_access

    @property
    def username_label(self):
        """Gets the username_label of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501


        :return: The username_label of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :rtype: str
        """
        return self._username_label

    @username_label.setter
    def username_label(self, username_label):
        """Sets the username_label of this EnrollmentCustomizationPanelLdapAuthAllOf.


        :param username_label: The username_label of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :type username_label: str
        """
        if self.local_vars_configuration.client_side_validation and username_label is None:  # noqa: E501
            raise ValueError("Invalid value for `username_label`, must not be `None`")  # noqa: E501

        self._username_label = username_label

    @property
    def password_label(self):
        """Gets the password_label of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501


        :return: The password_label of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :rtype: str
        """
        return self._password_label

    @password_label.setter
    def password_label(self, password_label):
        """Sets the password_label of this EnrollmentCustomizationPanelLdapAuthAllOf.


        :param password_label: The password_label of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :type password_label: str
        """
        if self.local_vars_configuration.client_side_validation and password_label is None:  # noqa: E501
            raise ValueError("Invalid value for `password_label`, must not be `None`")  # noqa: E501

        self._password_label = password_label

    @property
    def title(self):
        """Gets the title of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501


        :return: The title of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EnrollmentCustomizationPanelLdapAuthAllOf.


        :param title: The title of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and not re.search(r'\S', title)):  # noqa: E501
            raise ValueError(r"Invalid value for `title`, must be a follow pattern or equal to `/\S/`")  # noqa: E501

        self._title = title

    @property
    def back_button_text(self):
        """Gets the back_button_text of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501


        :return: The back_button_text of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :rtype: str
        """
        return self._back_button_text

    @back_button_text.setter
    def back_button_text(self, back_button_text):
        """Sets the back_button_text of this EnrollmentCustomizationPanelLdapAuthAllOf.


        :param back_button_text: The back_button_text of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :type back_button_text: str
        """
        if self.local_vars_configuration.client_side_validation and back_button_text is None:  # noqa: E501
            raise ValueError("Invalid value for `back_button_text`, must not be `None`")  # noqa: E501

        self._back_button_text = back_button_text

    @property
    def continue_button_text(self):
        """Gets the continue_button_text of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501


        :return: The continue_button_text of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :rtype: str
        """
        return self._continue_button_text

    @continue_button_text.setter
    def continue_button_text(self, continue_button_text):
        """Sets the continue_button_text of this EnrollmentCustomizationPanelLdapAuthAllOf.


        :param continue_button_text: The continue_button_text of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :type continue_button_text: str
        """
        if self.local_vars_configuration.client_side_validation and continue_button_text is None:  # noqa: E501
            raise ValueError("Invalid value for `continue_button_text`, must not be `None`")  # noqa: E501

        self._continue_button_text = continue_button_text

    @property
    def ldap_group_access(self):
        """Gets the ldap_group_access of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501


        :return: The ldap_group_access of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :rtype: list[EnrollmentCustomizationLdapGroupAccess]
        """
        return self._ldap_group_access

    @ldap_group_access.setter
    def ldap_group_access(self, ldap_group_access):
        """Sets the ldap_group_access of this EnrollmentCustomizationPanelLdapAuthAllOf.


        :param ldap_group_access: The ldap_group_access of this EnrollmentCustomizationPanelLdapAuthAllOf.  # noqa: E501
        :type ldap_group_access: list[EnrollmentCustomizationLdapGroupAccess]
        """

        self._ldap_group_access = ldap_group_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentCustomizationPanelLdapAuthAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentCustomizationPanelLdapAuthAllOf):
            return True

        return self.to_dict() != other.to_dict()
