# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ComputerInventoryResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'udid': 'str',
        'general': 'ComputerGeneral',
        'disk_encryption': 'ComputerDiskEncryption',
        'purchasing': 'ComputerPurchase',
        'applications': 'list[ComputerApplication]',
        'storage': 'ComputerStorage',
        'user_and_location': 'ComputerUserAndLocation',
        'configuration_profiles': 'list[ComputerConfigurationProfile]',
        'printers': 'list[ComputerPrinter]',
        'services': 'list[ComputerService]',
        'hardware': 'ComputerHardware',
        'local_user_accounts': 'list[ComputerLocalUserAccount]',
        'certificates': 'list[ComputerCertificate]',
        'attachments': 'list[ComputerAttachment]',
        'plugins': 'list[ComputerPlugin]',
        'package_receipts': 'ComputerPackageReceipts',
        'fonts': 'list[ComputerFont]',
        'security': 'ComputerSecurity',
        'operating_system': 'ComputerOperatingSystem',
        'licensed_software': 'list[ComputerLicensedSoftware]',
        'ibeacons': 'list[ComputerIbeacon]',
        'software_updates': 'list[ComputerSoftwareUpdate]',
        'extension_attributes': 'list[ComputerExtensionAttribute]',
        'content_caching': 'ComputerContentCaching',
        'group_memberships': 'list[GroupMembership]'
    }

    attribute_map = {
        'id': 'id',
        'udid': 'udid',
        'general': 'general',
        'disk_encryption': 'diskEncryption',
        'purchasing': 'purchasing',
        'applications': 'applications',
        'storage': 'storage',
        'user_and_location': 'userAndLocation',
        'configuration_profiles': 'configurationProfiles',
        'printers': 'printers',
        'services': 'services',
        'hardware': 'hardware',
        'local_user_accounts': 'localUserAccounts',
        'certificates': 'certificates',
        'attachments': 'attachments',
        'plugins': 'plugins',
        'package_receipts': 'packageReceipts',
        'fonts': 'fonts',
        'security': 'security',
        'operating_system': 'operatingSystem',
        'licensed_software': 'licensedSoftware',
        'ibeacons': 'ibeacons',
        'software_updates': 'softwareUpdates',
        'extension_attributes': 'extensionAttributes',
        'content_caching': 'contentCaching',
        'group_memberships': 'groupMemberships'
    }

    def __init__(self, id=None, udid=None, general=None, disk_encryption=None, purchasing=None, applications=None, storage=None, user_and_location=None, configuration_profiles=None, printers=None, services=None, hardware=None, local_user_accounts=None, certificates=None, attachments=None, plugins=None, package_receipts=None, fonts=None, security=None, operating_system=None, licensed_software=None, ibeacons=None, software_updates=None, extension_attributes=None, content_caching=None, group_memberships=None, local_vars_configuration=None):  # noqa: E501
        """ComputerInventoryResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._udid = None
        self._general = None
        self._disk_encryption = None
        self._purchasing = None
        self._applications = None
        self._storage = None
        self._user_and_location = None
        self._configuration_profiles = None
        self._printers = None
        self._services = None
        self._hardware = None
        self._local_user_accounts = None
        self._certificates = None
        self._attachments = None
        self._plugins = None
        self._package_receipts = None
        self._fonts = None
        self._security = None
        self._operating_system = None
        self._licensed_software = None
        self._ibeacons = None
        self._software_updates = None
        self._extension_attributes = None
        self._content_caching = None
        self._group_memberships = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if udid is not None:
            self.udid = udid
        if general is not None:
            self.general = general
        if disk_encryption is not None:
            self.disk_encryption = disk_encryption
        if purchasing is not None:
            self.purchasing = purchasing
        if applications is not None:
            self.applications = applications
        if storage is not None:
            self.storage = storage
        if user_and_location is not None:
            self.user_and_location = user_and_location
        if configuration_profiles is not None:
            self.configuration_profiles = configuration_profiles
        if printers is not None:
            self.printers = printers
        if services is not None:
            self.services = services
        if hardware is not None:
            self.hardware = hardware
        if local_user_accounts is not None:
            self.local_user_accounts = local_user_accounts
        if certificates is not None:
            self.certificates = certificates
        if attachments is not None:
            self.attachments = attachments
        if plugins is not None:
            self.plugins = plugins
        if package_receipts is not None:
            self.package_receipts = package_receipts
        if fonts is not None:
            self.fonts = fonts
        if security is not None:
            self.security = security
        if operating_system is not None:
            self.operating_system = operating_system
        if licensed_software is not None:
            self.licensed_software = licensed_software
        if ibeacons is not None:
            self.ibeacons = ibeacons
        if software_updates is not None:
            self.software_updates = software_updates
        if extension_attributes is not None:
            self.extension_attributes = extension_attributes
        if content_caching is not None:
            self.content_caching = content_caching
        if group_memberships is not None:
            self.group_memberships = group_memberships

    @property
    def id(self):
        """Gets the id of this ComputerInventoryResponse.  # noqa: E501


        :return: The id of this ComputerInventoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComputerInventoryResponse.


        :param id: The id of this ComputerInventoryResponse.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def udid(self):
        """Gets the udid of this ComputerInventoryResponse.  # noqa: E501


        :return: The udid of this ComputerInventoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this ComputerInventoryResponse.


        :param udid: The udid of this ComputerInventoryResponse.  # noqa: E501
        :type udid: str
        """

        self._udid = udid

    @property
    def general(self):
        """Gets the general of this ComputerInventoryResponse.  # noqa: E501


        :return: The general of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerGeneral
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this ComputerInventoryResponse.


        :param general: The general of this ComputerInventoryResponse.  # noqa: E501
        :type general: ComputerGeneral
        """

        self._general = general

    @property
    def disk_encryption(self):
        """Gets the disk_encryption of this ComputerInventoryResponse.  # noqa: E501


        :return: The disk_encryption of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerDiskEncryption
        """
        return self._disk_encryption

    @disk_encryption.setter
    def disk_encryption(self, disk_encryption):
        """Sets the disk_encryption of this ComputerInventoryResponse.


        :param disk_encryption: The disk_encryption of this ComputerInventoryResponse.  # noqa: E501
        :type disk_encryption: ComputerDiskEncryption
        """

        self._disk_encryption = disk_encryption

    @property
    def purchasing(self):
        """Gets the purchasing of this ComputerInventoryResponse.  # noqa: E501


        :return: The purchasing of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerPurchase
        """
        return self._purchasing

    @purchasing.setter
    def purchasing(self, purchasing):
        """Sets the purchasing of this ComputerInventoryResponse.


        :param purchasing: The purchasing of this ComputerInventoryResponse.  # noqa: E501
        :type purchasing: ComputerPurchase
        """

        self._purchasing = purchasing

    @property
    def applications(self):
        """Gets the applications of this ComputerInventoryResponse.  # noqa: E501


        :return: The applications of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerApplication]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this ComputerInventoryResponse.


        :param applications: The applications of this ComputerInventoryResponse.  # noqa: E501
        :type applications: list[ComputerApplication]
        """

        self._applications = applications

    @property
    def storage(self):
        """Gets the storage of this ComputerInventoryResponse.  # noqa: E501


        :return: The storage of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ComputerInventoryResponse.


        :param storage: The storage of this ComputerInventoryResponse.  # noqa: E501
        :type storage: ComputerStorage
        """

        self._storage = storage

    @property
    def user_and_location(self):
        """Gets the user_and_location of this ComputerInventoryResponse.  # noqa: E501


        :return: The user_and_location of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerUserAndLocation
        """
        return self._user_and_location

    @user_and_location.setter
    def user_and_location(self, user_and_location):
        """Sets the user_and_location of this ComputerInventoryResponse.


        :param user_and_location: The user_and_location of this ComputerInventoryResponse.  # noqa: E501
        :type user_and_location: ComputerUserAndLocation
        """

        self._user_and_location = user_and_location

    @property
    def configuration_profiles(self):
        """Gets the configuration_profiles of this ComputerInventoryResponse.  # noqa: E501


        :return: The configuration_profiles of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerConfigurationProfile]
        """
        return self._configuration_profiles

    @configuration_profiles.setter
    def configuration_profiles(self, configuration_profiles):
        """Sets the configuration_profiles of this ComputerInventoryResponse.


        :param configuration_profiles: The configuration_profiles of this ComputerInventoryResponse.  # noqa: E501
        :type configuration_profiles: list[ComputerConfigurationProfile]
        """

        self._configuration_profiles = configuration_profiles

    @property
    def printers(self):
        """Gets the printers of this ComputerInventoryResponse.  # noqa: E501


        :return: The printers of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerPrinter]
        """
        return self._printers

    @printers.setter
    def printers(self, printers):
        """Sets the printers of this ComputerInventoryResponse.


        :param printers: The printers of this ComputerInventoryResponse.  # noqa: E501
        :type printers: list[ComputerPrinter]
        """

        self._printers = printers

    @property
    def services(self):
        """Gets the services of this ComputerInventoryResponse.  # noqa: E501


        :return: The services of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this ComputerInventoryResponse.


        :param services: The services of this ComputerInventoryResponse.  # noqa: E501
        :type services: list[ComputerService]
        """

        self._services = services

    @property
    def hardware(self):
        """Gets the hardware of this ComputerInventoryResponse.  # noqa: E501


        :return: The hardware of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerHardware
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this ComputerInventoryResponse.


        :param hardware: The hardware of this ComputerInventoryResponse.  # noqa: E501
        :type hardware: ComputerHardware
        """

        self._hardware = hardware

    @property
    def local_user_accounts(self):
        """Gets the local_user_accounts of this ComputerInventoryResponse.  # noqa: E501


        :return: The local_user_accounts of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerLocalUserAccount]
        """
        return self._local_user_accounts

    @local_user_accounts.setter
    def local_user_accounts(self, local_user_accounts):
        """Sets the local_user_accounts of this ComputerInventoryResponse.


        :param local_user_accounts: The local_user_accounts of this ComputerInventoryResponse.  # noqa: E501
        :type local_user_accounts: list[ComputerLocalUserAccount]
        """

        self._local_user_accounts = local_user_accounts

    @property
    def certificates(self):
        """Gets the certificates of this ComputerInventoryResponse.  # noqa: E501


        :return: The certificates of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerCertificate]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this ComputerInventoryResponse.


        :param certificates: The certificates of this ComputerInventoryResponse.  # noqa: E501
        :type certificates: list[ComputerCertificate]
        """

        self._certificates = certificates

    @property
    def attachments(self):
        """Gets the attachments of this ComputerInventoryResponse.  # noqa: E501


        :return: The attachments of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ComputerInventoryResponse.


        :param attachments: The attachments of this ComputerInventoryResponse.  # noqa: E501
        :type attachments: list[ComputerAttachment]
        """

        self._attachments = attachments

    @property
    def plugins(self):
        """Gets the plugins of this ComputerInventoryResponse.  # noqa: E501


        :return: The plugins of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerPlugin]
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins):
        """Sets the plugins of this ComputerInventoryResponse.


        :param plugins: The plugins of this ComputerInventoryResponse.  # noqa: E501
        :type plugins: list[ComputerPlugin]
        """

        self._plugins = plugins

    @property
    def package_receipts(self):
        """Gets the package_receipts of this ComputerInventoryResponse.  # noqa: E501


        :return: The package_receipts of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerPackageReceipts
        """
        return self._package_receipts

    @package_receipts.setter
    def package_receipts(self, package_receipts):
        """Sets the package_receipts of this ComputerInventoryResponse.


        :param package_receipts: The package_receipts of this ComputerInventoryResponse.  # noqa: E501
        :type package_receipts: ComputerPackageReceipts
        """

        self._package_receipts = package_receipts

    @property
    def fonts(self):
        """Gets the fonts of this ComputerInventoryResponse.  # noqa: E501


        :return: The fonts of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerFont]
        """
        return self._fonts

    @fonts.setter
    def fonts(self, fonts):
        """Sets the fonts of this ComputerInventoryResponse.


        :param fonts: The fonts of this ComputerInventoryResponse.  # noqa: E501
        :type fonts: list[ComputerFont]
        """

        self._fonts = fonts

    @property
    def security(self):
        """Gets the security of this ComputerInventoryResponse.  # noqa: E501


        :return: The security of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerSecurity
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this ComputerInventoryResponse.


        :param security: The security of this ComputerInventoryResponse.  # noqa: E501
        :type security: ComputerSecurity
        """

        self._security = security

    @property
    def operating_system(self):
        """Gets the operating_system of this ComputerInventoryResponse.  # noqa: E501


        :return: The operating_system of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerOperatingSystem
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this ComputerInventoryResponse.


        :param operating_system: The operating_system of this ComputerInventoryResponse.  # noqa: E501
        :type operating_system: ComputerOperatingSystem
        """

        self._operating_system = operating_system

    @property
    def licensed_software(self):
        """Gets the licensed_software of this ComputerInventoryResponse.  # noqa: E501


        :return: The licensed_software of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerLicensedSoftware]
        """
        return self._licensed_software

    @licensed_software.setter
    def licensed_software(self, licensed_software):
        """Sets the licensed_software of this ComputerInventoryResponse.


        :param licensed_software: The licensed_software of this ComputerInventoryResponse.  # noqa: E501
        :type licensed_software: list[ComputerLicensedSoftware]
        """

        self._licensed_software = licensed_software

    @property
    def ibeacons(self):
        """Gets the ibeacons of this ComputerInventoryResponse.  # noqa: E501


        :return: The ibeacons of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerIbeacon]
        """
        return self._ibeacons

    @ibeacons.setter
    def ibeacons(self, ibeacons):
        """Sets the ibeacons of this ComputerInventoryResponse.


        :param ibeacons: The ibeacons of this ComputerInventoryResponse.  # noqa: E501
        :type ibeacons: list[ComputerIbeacon]
        """

        self._ibeacons = ibeacons

    @property
    def software_updates(self):
        """Gets the software_updates of this ComputerInventoryResponse.  # noqa: E501


        :return: The software_updates of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerSoftwareUpdate]
        """
        return self._software_updates

    @software_updates.setter
    def software_updates(self, software_updates):
        """Sets the software_updates of this ComputerInventoryResponse.


        :param software_updates: The software_updates of this ComputerInventoryResponse.  # noqa: E501
        :type software_updates: list[ComputerSoftwareUpdate]
        """

        self._software_updates = software_updates

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this ComputerInventoryResponse.  # noqa: E501


        :return: The extension_attributes of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[ComputerExtensionAttribute]
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this ComputerInventoryResponse.


        :param extension_attributes: The extension_attributes of this ComputerInventoryResponse.  # noqa: E501
        :type extension_attributes: list[ComputerExtensionAttribute]
        """

        self._extension_attributes = extension_attributes

    @property
    def content_caching(self):
        """Gets the content_caching of this ComputerInventoryResponse.  # noqa: E501


        :return: The content_caching of this ComputerInventoryResponse.  # noqa: E501
        :rtype: ComputerContentCaching
        """
        return self._content_caching

    @content_caching.setter
    def content_caching(self, content_caching):
        """Sets the content_caching of this ComputerInventoryResponse.


        :param content_caching: The content_caching of this ComputerInventoryResponse.  # noqa: E501
        :type content_caching: ComputerContentCaching
        """

        self._content_caching = content_caching

    @property
    def group_memberships(self):
        """Gets the group_memberships of this ComputerInventoryResponse.  # noqa: E501


        :return: The group_memberships of this ComputerInventoryResponse.  # noqa: E501
        :rtype: list[GroupMembership]
        """
        return self._group_memberships

    @group_memberships.setter
    def group_memberships(self, group_memberships):
        """Sets the group_memberships of this ComputerInventoryResponse.


        :param group_memberships: The group_memberships of this ComputerInventoryResponse.  # noqa: E501
        :type group_memberships: list[GroupMembership]
        """

        self._group_memberships = group_memberships

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerInventoryResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerInventoryResponse):
            return True

        return self.to_dict() != other.to_dict()
