# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PatchPolicySummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'policy_id': 'int',
        'policy_name': 'str',
        'is_policy_enabled': 'bool',
        'policy_target_version': 'str',
        'policy_deployment_method': 'str',
        'software_title': 'str',
        'software_title_configuration_id': 'int',
        'pending': 'int',
        'completed': 'int',
        'deferred': 'int',
        'failed': 'int'
    }

    attribute_map = {
        'policy_id': 'policyId',
        'policy_name': 'policyName',
        'is_policy_enabled': 'isPolicyEnabled',
        'policy_target_version': 'policyTargetVersion',
        'policy_deployment_method': 'policyDeploymentMethod',
        'software_title': 'softwareTitle',
        'software_title_configuration_id': 'softwareTitleConfigurationId',
        'pending': 'pending',
        'completed': 'completed',
        'deferred': 'deferred',
        'failed': 'failed'
    }

    def __init__(self, policy_id=None, policy_name=None, is_policy_enabled=None, policy_target_version=None, policy_deployment_method=None, software_title=None, software_title_configuration_id=None, pending=None, completed=None, deferred=None, failed=None, local_vars_configuration=None):  # noqa: E501
        """PatchPolicySummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._policy_id = None
        self._policy_name = None
        self._is_policy_enabled = None
        self._policy_target_version = None
        self._policy_deployment_method = None
        self._software_title = None
        self._software_title_configuration_id = None
        self._pending = None
        self._completed = None
        self._deferred = None
        self._failed = None
        self.discriminator = None

        if policy_id is not None:
            self.policy_id = policy_id
        if policy_name is not None:
            self.policy_name = policy_name
        if is_policy_enabled is not None:
            self.is_policy_enabled = is_policy_enabled
        if policy_target_version is not None:
            self.policy_target_version = policy_target_version
        if policy_deployment_method is not None:
            self.policy_deployment_method = policy_deployment_method
        if software_title is not None:
            self.software_title = software_title
        if software_title_configuration_id is not None:
            self.software_title_configuration_id = software_title_configuration_id
        if pending is not None:
            self.pending = pending
        if completed is not None:
            self.completed = completed
        if deferred is not None:
            self.deferred = deferred
        if failed is not None:
            self.failed = failed

    @property
    def policy_id(self):
        """Gets the policy_id of this PatchPolicySummary.  # noqa: E501


        :return: The policy_id of this PatchPolicySummary.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this PatchPolicySummary.


        :param policy_id: The policy_id of this PatchPolicySummary.  # noqa: E501
        :type policy_id: int
        """

        self._policy_id = policy_id

    @property
    def policy_name(self):
        """Gets the policy_name of this PatchPolicySummary.  # noqa: E501


        :return: The policy_name of this PatchPolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this PatchPolicySummary.


        :param policy_name: The policy_name of this PatchPolicySummary.  # noqa: E501
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def is_policy_enabled(self):
        """Gets the is_policy_enabled of this PatchPolicySummary.  # noqa: E501


        :return: The is_policy_enabled of this PatchPolicySummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_policy_enabled

    @is_policy_enabled.setter
    def is_policy_enabled(self, is_policy_enabled):
        """Sets the is_policy_enabled of this PatchPolicySummary.


        :param is_policy_enabled: The is_policy_enabled of this PatchPolicySummary.  # noqa: E501
        :type is_policy_enabled: bool
        """

        self._is_policy_enabled = is_policy_enabled

    @property
    def policy_target_version(self):
        """Gets the policy_target_version of this PatchPolicySummary.  # noqa: E501


        :return: The policy_target_version of this PatchPolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._policy_target_version

    @policy_target_version.setter
    def policy_target_version(self, policy_target_version):
        """Sets the policy_target_version of this PatchPolicySummary.


        :param policy_target_version: The policy_target_version of this PatchPolicySummary.  # noqa: E501
        :type policy_target_version: str
        """

        self._policy_target_version = policy_target_version

    @property
    def policy_deployment_method(self):
        """Gets the policy_deployment_method of this PatchPolicySummary.  # noqa: E501


        :return: The policy_deployment_method of this PatchPolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._policy_deployment_method

    @policy_deployment_method.setter
    def policy_deployment_method(self, policy_deployment_method):
        """Sets the policy_deployment_method of this PatchPolicySummary.


        :param policy_deployment_method: The policy_deployment_method of this PatchPolicySummary.  # noqa: E501
        :type policy_deployment_method: str
        """

        self._policy_deployment_method = policy_deployment_method

    @property
    def software_title(self):
        """Gets the software_title of this PatchPolicySummary.  # noqa: E501


        :return: The software_title of this PatchPolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._software_title

    @software_title.setter
    def software_title(self, software_title):
        """Sets the software_title of this PatchPolicySummary.


        :param software_title: The software_title of this PatchPolicySummary.  # noqa: E501
        :type software_title: str
        """

        self._software_title = software_title

    @property
    def software_title_configuration_id(self):
        """Gets the software_title_configuration_id of this PatchPolicySummary.  # noqa: E501


        :return: The software_title_configuration_id of this PatchPolicySummary.  # noqa: E501
        :rtype: int
        """
        return self._software_title_configuration_id

    @software_title_configuration_id.setter
    def software_title_configuration_id(self, software_title_configuration_id):
        """Sets the software_title_configuration_id of this PatchPolicySummary.


        :param software_title_configuration_id: The software_title_configuration_id of this PatchPolicySummary.  # noqa: E501
        :type software_title_configuration_id: int
        """

        self._software_title_configuration_id = software_title_configuration_id

    @property
    def pending(self):
        """Gets the pending of this PatchPolicySummary.  # noqa: E501


        :return: The pending of this PatchPolicySummary.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this PatchPolicySummary.


        :param pending: The pending of this PatchPolicySummary.  # noqa: E501
        :type pending: int
        """

        self._pending = pending

    @property
    def completed(self):
        """Gets the completed of this PatchPolicySummary.  # noqa: E501


        :return: The completed of this PatchPolicySummary.  # noqa: E501
        :rtype: int
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this PatchPolicySummary.


        :param completed: The completed of this PatchPolicySummary.  # noqa: E501
        :type completed: int
        """

        self._completed = completed

    @property
    def deferred(self):
        """Gets the deferred of this PatchPolicySummary.  # noqa: E501


        :return: The deferred of this PatchPolicySummary.  # noqa: E501
        :rtype: int
        """
        return self._deferred

    @deferred.setter
    def deferred(self, deferred):
        """Sets the deferred of this PatchPolicySummary.


        :param deferred: The deferred of this PatchPolicySummary.  # noqa: E501
        :type deferred: int
        """

        self._deferred = deferred

    @property
    def failed(self):
        """Gets the failed of this PatchPolicySummary.  # noqa: E501


        :return: The failed of this PatchPolicySummary.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this PatchPolicySummary.


        :param failed: The failed of this PatchPolicySummary.  # noqa: E501
        :type failed: int
        """

        self._failed = failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchPolicySummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchPolicySummary):
            return True

        return self.to_dict() != other.to_dict()
