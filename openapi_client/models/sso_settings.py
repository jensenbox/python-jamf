# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SsoSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sso_for_enrollment_enabled': 'bool',
        'sso_bypass_allowed': 'bool',
        'sso_enabled': 'bool',
        'sso_for_mac_os_self_service_enabled': 'bool',
        'token_expiration_disabled': 'bool',
        'user_attribute_enabled': 'bool',
        'user_attribute_name': 'str',
        'user_mapping': 'str',
        'group_enrollment_access_enabled': 'bool',
        'group_attribute_name': 'str',
        'group_rdn_key': 'str',
        'group_enrollment_access_name': 'str',
        'idp_provider_type': 'str',
        'idp_url': 'str',
        'entity_id': 'str',
        'metadata_file_name': 'str',
        'other_provider_type_name': 'str',
        'federation_metadata_file': 'str',
        'metadata_source': 'str',
        'session_timeout': 'int'
    }

    attribute_map = {
        'sso_for_enrollment_enabled': 'ssoForEnrollmentEnabled',
        'sso_bypass_allowed': 'ssoBypassAllowed',
        'sso_enabled': 'ssoEnabled',
        'sso_for_mac_os_self_service_enabled': 'ssoForMacOsSelfServiceEnabled',
        'token_expiration_disabled': 'tokenExpirationDisabled',
        'user_attribute_enabled': 'userAttributeEnabled',
        'user_attribute_name': 'userAttributeName',
        'user_mapping': 'userMapping',
        'group_enrollment_access_enabled': 'groupEnrollmentAccessEnabled',
        'group_attribute_name': 'groupAttributeName',
        'group_rdn_key': 'groupRdnKey',
        'group_enrollment_access_name': 'groupEnrollmentAccessName',
        'idp_provider_type': 'idpProviderType',
        'idp_url': 'idpUrl',
        'entity_id': 'entityId',
        'metadata_file_name': 'metadataFileName',
        'other_provider_type_name': 'otherProviderTypeName',
        'federation_metadata_file': 'federationMetadataFile',
        'metadata_source': 'metadataSource',
        'session_timeout': 'sessionTimeout'
    }

    def __init__(self, sso_for_enrollment_enabled=False, sso_bypass_allowed=False, sso_enabled=False, sso_for_mac_os_self_service_enabled=False, token_expiration_disabled=False, user_attribute_enabled=False, user_attribute_name=' ', user_mapping=None, group_enrollment_access_enabled=False, group_attribute_name='http://schemas.xmlsoap.org/claims/Group', group_rdn_key=' ', group_enrollment_access_name=' ', idp_provider_type=None, idp_url=None, entity_id=None, metadata_file_name=None, other_provider_type_name=' ', federation_metadata_file=None, metadata_source=None, session_timeout=480, local_vars_configuration=None):  # noqa: E501
        """SsoSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sso_for_enrollment_enabled = None
        self._sso_bypass_allowed = None
        self._sso_enabled = None
        self._sso_for_mac_os_self_service_enabled = None
        self._token_expiration_disabled = None
        self._user_attribute_enabled = None
        self._user_attribute_name = None
        self._user_mapping = None
        self._group_enrollment_access_enabled = None
        self._group_attribute_name = None
        self._group_rdn_key = None
        self._group_enrollment_access_name = None
        self._idp_provider_type = None
        self._idp_url = None
        self._entity_id = None
        self._metadata_file_name = None
        self._other_provider_type_name = None
        self._federation_metadata_file = None
        self._metadata_source = None
        self._session_timeout = None
        self.discriminator = None

        self.sso_for_enrollment_enabled = sso_for_enrollment_enabled
        self.sso_bypass_allowed = sso_bypass_allowed
        self.sso_enabled = sso_enabled
        self.sso_for_mac_os_self_service_enabled = sso_for_mac_os_self_service_enabled
        self.token_expiration_disabled = token_expiration_disabled
        self.user_attribute_enabled = user_attribute_enabled
        if user_attribute_name is not None:
            self.user_attribute_name = user_attribute_name
        self.user_mapping = user_mapping
        self.group_enrollment_access_enabled = group_enrollment_access_enabled
        self.group_attribute_name = group_attribute_name
        self.group_rdn_key = group_rdn_key
        if group_enrollment_access_name is not None:
            self.group_enrollment_access_name = group_enrollment_access_name
        self.idp_provider_type = idp_provider_type
        if idp_url is not None:
            self.idp_url = idp_url
        self.entity_id = entity_id
        if metadata_file_name is not None:
            self.metadata_file_name = metadata_file_name
        if other_provider_type_name is not None:
            self.other_provider_type_name = other_provider_type_name
        if federation_metadata_file is not None:
            self.federation_metadata_file = federation_metadata_file
        self.metadata_source = metadata_source
        if session_timeout is not None:
            self.session_timeout = session_timeout

    @property
    def sso_for_enrollment_enabled(self):
        """Gets the sso_for_enrollment_enabled of this SsoSettings.  # noqa: E501


        :return: The sso_for_enrollment_enabled of this SsoSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sso_for_enrollment_enabled

    @sso_for_enrollment_enabled.setter
    def sso_for_enrollment_enabled(self, sso_for_enrollment_enabled):
        """Sets the sso_for_enrollment_enabled of this SsoSettings.


        :param sso_for_enrollment_enabled: The sso_for_enrollment_enabled of this SsoSettings.  # noqa: E501
        :type sso_for_enrollment_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and sso_for_enrollment_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `sso_for_enrollment_enabled`, must not be `None`")  # noqa: E501

        self._sso_for_enrollment_enabled = sso_for_enrollment_enabled

    @property
    def sso_bypass_allowed(self):
        """Gets the sso_bypass_allowed of this SsoSettings.  # noqa: E501


        :return: The sso_bypass_allowed of this SsoSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sso_bypass_allowed

    @sso_bypass_allowed.setter
    def sso_bypass_allowed(self, sso_bypass_allowed):
        """Sets the sso_bypass_allowed of this SsoSettings.


        :param sso_bypass_allowed: The sso_bypass_allowed of this SsoSettings.  # noqa: E501
        :type sso_bypass_allowed: bool
        """
        if self.local_vars_configuration.client_side_validation and sso_bypass_allowed is None:  # noqa: E501
            raise ValueError("Invalid value for `sso_bypass_allowed`, must not be `None`")  # noqa: E501

        self._sso_bypass_allowed = sso_bypass_allowed

    @property
    def sso_enabled(self):
        """Gets the sso_enabled of this SsoSettings.  # noqa: E501


        :return: The sso_enabled of this SsoSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sso_enabled

    @sso_enabled.setter
    def sso_enabled(self, sso_enabled):
        """Sets the sso_enabled of this SsoSettings.


        :param sso_enabled: The sso_enabled of this SsoSettings.  # noqa: E501
        :type sso_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and sso_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `sso_enabled`, must not be `None`")  # noqa: E501

        self._sso_enabled = sso_enabled

    @property
    def sso_for_mac_os_self_service_enabled(self):
        """Gets the sso_for_mac_os_self_service_enabled of this SsoSettings.  # noqa: E501


        :return: The sso_for_mac_os_self_service_enabled of this SsoSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sso_for_mac_os_self_service_enabled

    @sso_for_mac_os_self_service_enabled.setter
    def sso_for_mac_os_self_service_enabled(self, sso_for_mac_os_self_service_enabled):
        """Sets the sso_for_mac_os_self_service_enabled of this SsoSettings.


        :param sso_for_mac_os_self_service_enabled: The sso_for_mac_os_self_service_enabled of this SsoSettings.  # noqa: E501
        :type sso_for_mac_os_self_service_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and sso_for_mac_os_self_service_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `sso_for_mac_os_self_service_enabled`, must not be `None`")  # noqa: E501

        self._sso_for_mac_os_self_service_enabled = sso_for_mac_os_self_service_enabled

    @property
    def token_expiration_disabled(self):
        """Gets the token_expiration_disabled of this SsoSettings.  # noqa: E501


        :return: The token_expiration_disabled of this SsoSettings.  # noqa: E501
        :rtype: bool
        """
        return self._token_expiration_disabled

    @token_expiration_disabled.setter
    def token_expiration_disabled(self, token_expiration_disabled):
        """Sets the token_expiration_disabled of this SsoSettings.


        :param token_expiration_disabled: The token_expiration_disabled of this SsoSettings.  # noqa: E501
        :type token_expiration_disabled: bool
        """
        if self.local_vars_configuration.client_side_validation and token_expiration_disabled is None:  # noqa: E501
            raise ValueError("Invalid value for `token_expiration_disabled`, must not be `None`")  # noqa: E501

        self._token_expiration_disabled = token_expiration_disabled

    @property
    def user_attribute_enabled(self):
        """Gets the user_attribute_enabled of this SsoSettings.  # noqa: E501


        :return: The user_attribute_enabled of this SsoSettings.  # noqa: E501
        :rtype: bool
        """
        return self._user_attribute_enabled

    @user_attribute_enabled.setter
    def user_attribute_enabled(self, user_attribute_enabled):
        """Sets the user_attribute_enabled of this SsoSettings.


        :param user_attribute_enabled: The user_attribute_enabled of this SsoSettings.  # noqa: E501
        :type user_attribute_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and user_attribute_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `user_attribute_enabled`, must not be `None`")  # noqa: E501

        self._user_attribute_enabled = user_attribute_enabled

    @property
    def user_attribute_name(self):
        """Gets the user_attribute_name of this SsoSettings.  # noqa: E501


        :return: The user_attribute_name of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_attribute_name

    @user_attribute_name.setter
    def user_attribute_name(self, user_attribute_name):
        """Sets the user_attribute_name of this SsoSettings.


        :param user_attribute_name: The user_attribute_name of this SsoSettings.  # noqa: E501
        :type user_attribute_name: str
        """

        self._user_attribute_name = user_attribute_name

    @property
    def user_mapping(self):
        """Gets the user_mapping of this SsoSettings.  # noqa: E501


        :return: The user_mapping of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_mapping

    @user_mapping.setter
    def user_mapping(self, user_mapping):
        """Sets the user_mapping of this SsoSettings.


        :param user_mapping: The user_mapping of this SsoSettings.  # noqa: E501
        :type user_mapping: str
        """
        if self.local_vars_configuration.client_side_validation and user_mapping is None:  # noqa: E501
            raise ValueError("Invalid value for `user_mapping`, must not be `None`")  # noqa: E501
        allowed_values = ["USERNAME", "EMAIL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and user_mapping not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `user_mapping` ({0}), must be one of {1}"  # noqa: E501
                .format(user_mapping, allowed_values)
            )

        self._user_mapping = user_mapping

    @property
    def group_enrollment_access_enabled(self):
        """Gets the group_enrollment_access_enabled of this SsoSettings.  # noqa: E501


        :return: The group_enrollment_access_enabled of this SsoSettings.  # noqa: E501
        :rtype: bool
        """
        return self._group_enrollment_access_enabled

    @group_enrollment_access_enabled.setter
    def group_enrollment_access_enabled(self, group_enrollment_access_enabled):
        """Sets the group_enrollment_access_enabled of this SsoSettings.


        :param group_enrollment_access_enabled: The group_enrollment_access_enabled of this SsoSettings.  # noqa: E501
        :type group_enrollment_access_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and group_enrollment_access_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `group_enrollment_access_enabled`, must not be `None`")  # noqa: E501

        self._group_enrollment_access_enabled = group_enrollment_access_enabled

    @property
    def group_attribute_name(self):
        """Gets the group_attribute_name of this SsoSettings.  # noqa: E501


        :return: The group_attribute_name of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._group_attribute_name

    @group_attribute_name.setter
    def group_attribute_name(self, group_attribute_name):
        """Sets the group_attribute_name of this SsoSettings.


        :param group_attribute_name: The group_attribute_name of this SsoSettings.  # noqa: E501
        :type group_attribute_name: str
        """
        if self.local_vars_configuration.client_side_validation and group_attribute_name is None:  # noqa: E501
            raise ValueError("Invalid value for `group_attribute_name`, must not be `None`")  # noqa: E501

        self._group_attribute_name = group_attribute_name

    @property
    def group_rdn_key(self):
        """Gets the group_rdn_key of this SsoSettings.  # noqa: E501


        :return: The group_rdn_key of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._group_rdn_key

    @group_rdn_key.setter
    def group_rdn_key(self, group_rdn_key):
        """Sets the group_rdn_key of this SsoSettings.


        :param group_rdn_key: The group_rdn_key of this SsoSettings.  # noqa: E501
        :type group_rdn_key: str
        """
        if self.local_vars_configuration.client_side_validation and group_rdn_key is None:  # noqa: E501
            raise ValueError("Invalid value for `group_rdn_key`, must not be `None`")  # noqa: E501

        self._group_rdn_key = group_rdn_key

    @property
    def group_enrollment_access_name(self):
        """Gets the group_enrollment_access_name of this SsoSettings.  # noqa: E501


        :return: The group_enrollment_access_name of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._group_enrollment_access_name

    @group_enrollment_access_name.setter
    def group_enrollment_access_name(self, group_enrollment_access_name):
        """Sets the group_enrollment_access_name of this SsoSettings.


        :param group_enrollment_access_name: The group_enrollment_access_name of this SsoSettings.  # noqa: E501
        :type group_enrollment_access_name: str
        """

        self._group_enrollment_access_name = group_enrollment_access_name

    @property
    def idp_provider_type(self):
        """Gets the idp_provider_type of this SsoSettings.  # noqa: E501


        :return: The idp_provider_type of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._idp_provider_type

    @idp_provider_type.setter
    def idp_provider_type(self, idp_provider_type):
        """Sets the idp_provider_type of this SsoSettings.


        :param idp_provider_type: The idp_provider_type of this SsoSettings.  # noqa: E501
        :type idp_provider_type: str
        """
        if self.local_vars_configuration.client_side_validation and idp_provider_type is None:  # noqa: E501
            raise ValueError("Invalid value for `idp_provider_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ADFS", "OKTA", "GOOGLE", "SHIBBOLETH", "ONELOGIN", "PING", "CENTRIFY", "AZURE", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and idp_provider_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `idp_provider_type` ({0}), must be one of {1}"  # noqa: E501
                .format(idp_provider_type, allowed_values)
            )

        self._idp_provider_type = idp_provider_type

    @property
    def idp_url(self):
        """Gets the idp_url of this SsoSettings.  # noqa: E501


        :return: The idp_url of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._idp_url

    @idp_url.setter
    def idp_url(self, idp_url):
        """Sets the idp_url of this SsoSettings.


        :param idp_url: The idp_url of this SsoSettings.  # noqa: E501
        :type idp_url: str
        """

        self._idp_url = idp_url

    @property
    def entity_id(self):
        """Gets the entity_id of this SsoSettings.  # noqa: E501


        :return: The entity_id of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SsoSettings.


        :param entity_id: The entity_id of this SsoSettings.  # noqa: E501
        :type entity_id: str
        """
        if self.local_vars_configuration.client_side_validation and entity_id is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def metadata_file_name(self):
        """Gets the metadata_file_name of this SsoSettings.  # noqa: E501


        :return: The metadata_file_name of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._metadata_file_name

    @metadata_file_name.setter
    def metadata_file_name(self, metadata_file_name):
        """Sets the metadata_file_name of this SsoSettings.


        :param metadata_file_name: The metadata_file_name of this SsoSettings.  # noqa: E501
        :type metadata_file_name: str
        """

        self._metadata_file_name = metadata_file_name

    @property
    def other_provider_type_name(self):
        """Gets the other_provider_type_name of this SsoSettings.  # noqa: E501


        :return: The other_provider_type_name of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._other_provider_type_name

    @other_provider_type_name.setter
    def other_provider_type_name(self, other_provider_type_name):
        """Sets the other_provider_type_name of this SsoSettings.


        :param other_provider_type_name: The other_provider_type_name of this SsoSettings.  # noqa: E501
        :type other_provider_type_name: str
        """

        self._other_provider_type_name = other_provider_type_name

    @property
    def federation_metadata_file(self):
        """Gets the federation_metadata_file of this SsoSettings.  # noqa: E501


        :return: The federation_metadata_file of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._federation_metadata_file

    @federation_metadata_file.setter
    def federation_metadata_file(self, federation_metadata_file):
        """Sets the federation_metadata_file of this SsoSettings.


        :param federation_metadata_file: The federation_metadata_file of this SsoSettings.  # noqa: E501
        :type federation_metadata_file: str
        """
        if (self.local_vars_configuration.client_side_validation and
                federation_metadata_file is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', federation_metadata_file)):  # noqa: E501
            raise ValueError(r"Invalid value for `federation_metadata_file`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._federation_metadata_file = federation_metadata_file

    @property
    def metadata_source(self):
        """Gets the metadata_source of this SsoSettings.  # noqa: E501


        :return: The metadata_source of this SsoSettings.  # noqa: E501
        :rtype: str
        """
        return self._metadata_source

    @metadata_source.setter
    def metadata_source(self, metadata_source):
        """Sets the metadata_source of this SsoSettings.


        :param metadata_source: The metadata_source of this SsoSettings.  # noqa: E501
        :type metadata_source: str
        """
        if self.local_vars_configuration.client_side_validation and metadata_source is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata_source`, must not be `None`")  # noqa: E501
        allowed_values = ["URL", "FILE", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and metadata_source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `metadata_source` ({0}), must be one of {1}"  # noqa: E501
                .format(metadata_source, allowed_values)
            )

        self._metadata_source = metadata_source

    @property
    def session_timeout(self):
        """Gets the session_timeout of this SsoSettings.  # noqa: E501


        :return: The session_timeout of this SsoSettings.  # noqa: E501
        :rtype: int
        """
        return self._session_timeout

    @session_timeout.setter
    def session_timeout(self, session_timeout):
        """Sets the session_timeout of this SsoSettings.


        :param session_timeout: The session_timeout of this SsoSettings.  # noqa: E501
        :type session_timeout: int
        """

        self._session_timeout = session_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SsoSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SsoSettings):
            return True

        return self.to_dict() != other.to_dict()
