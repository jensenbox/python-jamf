# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from jamf.api_client import ApiClient
from jamf.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EnrollmentCustomizationPreviewApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_enrollment_customization_id_all_get(self, id, **kwargs):  # noqa: E501
        """Get all Panels for single Enrollment Customization   # noqa: E501

        Get all panels for single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_all_get(id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EnrollmentCustomizationPanelList
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_all_get_with_http_info(id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_all_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get all Panels for single Enrollment Customization   # noqa: E501

        Get all panels for single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_all_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EnrollmentCustomizationPanelList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_all_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_all_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "EnrollmentCustomizationPanelList",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_all_panel_id_delete(self, id, panel_id, **kwargs):  # noqa: E501
        """Delete a single Panel from an Enrollment Customization   # noqa: E501

        Delete a single panel from an Enrollment Customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_all_panel_id_delete(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_all_panel_id_delete_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_all_panel_id_delete_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Delete a single Panel from an Enrollment Customization   # noqa: E501

        Delete a single panel from an Enrollment Customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_all_panel_id_delete_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_all_panel_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_all_panel_id_delete`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_all_panel_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/all/{panel-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_all_panel_id_get(self, id, panel_id, **kwargs):  # noqa: E501
        """Get a single Panel for a single Enrollment Customization   # noqa: E501

        Get a single panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_all_panel_id_get(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanel
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_all_panel_id_get_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_all_panel_id_get_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Get a single Panel for a single Enrollment Customization   # noqa: E501

        Get a single panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_all_panel_id_get_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanel, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_all_panel_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_all_panel_id_get`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_all_panel_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetEnrollmentCustomizationPanel",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/all/{panel-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_ldap_panel_id_delete(self, id, panel_id, **kwargs):  # noqa: E501
        """Delete an LDAP single panel from an Enrollment Customization   # noqa: E501

        Delete an LDAP single Panel from an Enrollment Customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_ldap_panel_id_delete(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_ldap_panel_id_delete_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_ldap_panel_id_delete_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Delete an LDAP single panel from an Enrollment Customization   # noqa: E501

        Delete an LDAP single Panel from an Enrollment Customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_ldap_panel_id_delete_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_ldap_panel_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_ldap_panel_id_delete`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_ldap_panel_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/ldap/{panel-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_ldap_panel_id_get(self, id, panel_id, **kwargs):  # noqa: E501
        """Get a single LDAP panel for a single Enrollment Customization   # noqa: E501

        Get a single LDAP panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_ldap_panel_id_get(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelLdapAuth
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_ldap_panel_id_get_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_ldap_panel_id_get_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Get a single LDAP panel for a single Enrollment Customization   # noqa: E501

        Get a single LDAP panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_ldap_panel_id_get_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelLdapAuth, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_ldap_panel_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_ldap_panel_id_get`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_ldap_panel_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetEnrollmentCustomizationPanelLdapAuth",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/ldap/{panel-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_ldap_panel_id_put(self, id, panel_id, enrollment_customization_panel_ldap_auth, **kwargs):  # noqa: E501
        """Update a single LDAP Panel for a single Enrollment Customization   # noqa: E501

        Update a single LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_ldap_panel_id_put(id, panel_id, enrollment_customization_panel_ldap_auth, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param enrollment_customization_panel_ldap_auth: Enrollment Customization Panel to update (required)
        :type enrollment_customization_panel_ldap_auth: EnrollmentCustomizationPanelLdapAuth
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelLdapAuth
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_ldap_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_ldap_auth, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_ldap_panel_id_put_with_http_info(self, id, panel_id, enrollment_customization_panel_ldap_auth, **kwargs):  # noqa: E501
        """Update a single LDAP Panel for a single Enrollment Customization   # noqa: E501

        Update a single LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_ldap_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_ldap_auth, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param enrollment_customization_panel_ldap_auth: Enrollment Customization Panel to update (required)
        :type enrollment_customization_panel_ldap_auth: EnrollmentCustomizationPanelLdapAuth
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelLdapAuth, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id',
            'enrollment_customization_panel_ldap_auth'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_ldap_panel_id_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_ldap_panel_id_put`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_ldap_panel_id_put`")  # noqa: E501
        # verify the required parameter 'enrollment_customization_panel_ldap_auth' is set
        if self.api_client.client_side_validation and ('enrollment_customization_panel_ldap_auth' not in local_var_params or  # noqa: E501
                                                        local_var_params['enrollment_customization_panel_ldap_auth'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `enrollment_customization_panel_ldap_auth` when calling `v1_enrollment_customization_id_ldap_panel_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enrollment_customization_panel_ldap_auth' in local_var_params:
            body_params = local_var_params['enrollment_customization_panel_ldap_auth']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetEnrollmentCustomizationPanelLdapAuth",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/ldap/{panel-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_ldap_post(self, id, enrollment_customization_panel_ldap_auth, **kwargs):  # noqa: E501
        """Create an LDAP Panel for a single Enrollment Customization   # noqa: E501

        Create an LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_ldap_post(id, enrollment_customization_panel_ldap_auth, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param enrollment_customization_panel_ldap_auth: Enrollment Customization Panel to create (required)
        :type enrollment_customization_panel_ldap_auth: EnrollmentCustomizationPanelLdapAuth
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelLdapAuth
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_ldap_post_with_http_info(id, enrollment_customization_panel_ldap_auth, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_ldap_post_with_http_info(self, id, enrollment_customization_panel_ldap_auth, **kwargs):  # noqa: E501
        """Create an LDAP Panel for a single Enrollment Customization   # noqa: E501

        Create an LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_ldap_post_with_http_info(id, enrollment_customization_panel_ldap_auth, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param enrollment_customization_panel_ldap_auth: Enrollment Customization Panel to create (required)
        :type enrollment_customization_panel_ldap_auth: EnrollmentCustomizationPanelLdapAuth
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelLdapAuth, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'enrollment_customization_panel_ldap_auth'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_ldap_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_ldap_post`")  # noqa: E501
        # verify the required parameter 'enrollment_customization_panel_ldap_auth' is set
        if self.api_client.client_side_validation and ('enrollment_customization_panel_ldap_auth' not in local_var_params or  # noqa: E501
                                                        local_var_params['enrollment_customization_panel_ldap_auth'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `enrollment_customization_panel_ldap_auth` when calling `v1_enrollment_customization_id_ldap_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enrollment_customization_panel_ldap_auth' in local_var_params:
            body_params = local_var_params['enrollment_customization_panel_ldap_auth']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            201: "GetEnrollmentCustomizationPanelLdapAuth",
            400: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/ldap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_sso_panel_id_delete(self, id, panel_id, **kwargs):  # noqa: E501
        """Delete a single SSO Panel from an Enrollment Customization   # noqa: E501

        Delete a single SSO panel from an Enrollment Customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_sso_panel_id_delete(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_sso_panel_id_delete_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_sso_panel_id_delete_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Delete a single SSO Panel from an Enrollment Customization   # noqa: E501

        Delete a single SSO panel from an Enrollment Customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_sso_panel_id_delete_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_sso_panel_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_sso_panel_id_delete`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_sso_panel_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/sso/{panel-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_sso_panel_id_get(self, id, panel_id, **kwargs):  # noqa: E501
        """Get a single SSO Panel for a single Enrollment Customization   # noqa: E501

        Get a single SSO panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_sso_panel_id_get(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelSsoAuth
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_sso_panel_id_get_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_sso_panel_id_get_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Get a single SSO Panel for a single Enrollment Customization   # noqa: E501

        Get a single SSO panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_sso_panel_id_get_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelSsoAuth, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_sso_panel_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_sso_panel_id_get`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_sso_panel_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetEnrollmentCustomizationPanelSsoAuth",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/sso/{panel-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_sso_panel_id_put(self, id, panel_id, enrollment_customization_panel_sso_auth, **kwargs):  # noqa: E501
        """Update a single SSO Panel for a single Enrollment Customization   # noqa: E501

        Update a single SSO panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_sso_panel_id_put(id, panel_id, enrollment_customization_panel_sso_auth, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param enrollment_customization_panel_sso_auth: Enrollment Customization Panel to update (required)
        :type enrollment_customization_panel_sso_auth: EnrollmentCustomizationPanelSsoAuth
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelSsoAuth
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_sso_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_sso_auth, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_sso_panel_id_put_with_http_info(self, id, panel_id, enrollment_customization_panel_sso_auth, **kwargs):  # noqa: E501
        """Update a single SSO Panel for a single Enrollment Customization   # noqa: E501

        Update a single SSO panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_sso_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_sso_auth, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param enrollment_customization_panel_sso_auth: Enrollment Customization Panel to update (required)
        :type enrollment_customization_panel_sso_auth: EnrollmentCustomizationPanelSsoAuth
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelSsoAuth, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id',
            'enrollment_customization_panel_sso_auth'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_sso_panel_id_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_sso_panel_id_put`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_sso_panel_id_put`")  # noqa: E501
        # verify the required parameter 'enrollment_customization_panel_sso_auth' is set
        if self.api_client.client_side_validation and ('enrollment_customization_panel_sso_auth' not in local_var_params or  # noqa: E501
                                                        local_var_params['enrollment_customization_panel_sso_auth'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `enrollment_customization_panel_sso_auth` when calling `v1_enrollment_customization_id_sso_panel_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enrollment_customization_panel_sso_auth' in local_var_params:
            body_params = local_var_params['enrollment_customization_panel_sso_auth']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetEnrollmentCustomizationPanelSsoAuth",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/sso/{panel-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_sso_post(self, id, enrollment_customization_panel_sso_auth, **kwargs):  # noqa: E501
        """Create an SSO Panel for a single Enrollment Customization   # noqa: E501

        Create an SSO panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_sso_post(id, enrollment_customization_panel_sso_auth, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param enrollment_customization_panel_sso_auth: Enrollment Customization Panel to create (required)
        :type enrollment_customization_panel_sso_auth: EnrollmentCustomizationPanelSsoAuth
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelSsoAuth
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_sso_post_with_http_info(id, enrollment_customization_panel_sso_auth, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_sso_post_with_http_info(self, id, enrollment_customization_panel_sso_auth, **kwargs):  # noqa: E501
        """Create an SSO Panel for a single Enrollment Customization   # noqa: E501

        Create an SSO panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_sso_post_with_http_info(id, enrollment_customization_panel_sso_auth, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param enrollment_customization_panel_sso_auth: Enrollment Customization Panel to create (required)
        :type enrollment_customization_panel_sso_auth: EnrollmentCustomizationPanelSsoAuth
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelSsoAuth, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'enrollment_customization_panel_sso_auth'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_sso_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_sso_post`")  # noqa: E501
        # verify the required parameter 'enrollment_customization_panel_sso_auth' is set
        if self.api_client.client_side_validation and ('enrollment_customization_panel_sso_auth' not in local_var_params or  # noqa: E501
                                                        local_var_params['enrollment_customization_panel_sso_auth'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `enrollment_customization_panel_sso_auth` when calling `v1_enrollment_customization_id_sso_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enrollment_customization_panel_sso_auth' in local_var_params:
            body_params = local_var_params['enrollment_customization_panel_sso_auth']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            201: "GetEnrollmentCustomizationPanelSsoAuth",
            400: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/sso', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_text_panel_id_delete(self, id, panel_id, **kwargs):  # noqa: E501
        """Delete a Text single Panel from an Enrollment Customization   # noqa: E501

        Delete a Text single panel from an Enrollment Customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_panel_id_delete(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_text_panel_id_delete_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_text_panel_id_delete_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Delete a Text single Panel from an Enrollment Customization   # noqa: E501

        Delete a Text single panel from an Enrollment Customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_panel_id_delete_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_text_panel_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_text_panel_id_delete`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_text_panel_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/text/{panel-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_text_panel_id_get(self, id, panel_id, **kwargs):  # noqa: E501
        """Get a single Text Panel for a single Enrollment Customization   # noqa: E501

        Get a single Text panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_panel_id_get(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelText
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_text_panel_id_get_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_text_panel_id_get_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Get a single Text Panel for a single Enrollment Customization   # noqa: E501

        Get a single Text panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_panel_id_get_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelText, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_text_panel_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_text_panel_id_get`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_text_panel_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetEnrollmentCustomizationPanelText",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/text/{panel-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_text_panel_id_markdown_get(self, id, panel_id, **kwargs):  # noqa: E501
        """Get the markdown output of a single Text Panel for a single Enrollment   # noqa: E501

        Get the markdown output of a single Text panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_panel_id_markdown_get(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Markdown
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_text_panel_id_markdown_get_with_http_info(id, panel_id, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_text_panel_id_markdown_get_with_http_info(self, id, panel_id, **kwargs):  # noqa: E501
        """Get the markdown output of a single Text Panel for a single Enrollment   # noqa: E501

        Get the markdown output of a single Text panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_panel_id_markdown_get_with_http_info(id, panel_id, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Markdown, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_text_panel_id_markdown_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_text_panel_id_markdown_get`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_text_panel_id_markdown_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "Markdown",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/text/{panel-id}/markdown', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_text_panel_id_put(self, id, panel_id, enrollment_customization_panel_text, **kwargs):  # noqa: E501
        """Update a single Text Panel for a single Enrollment Customization   # noqa: E501

        Update a single Text panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_panel_id_put(id, panel_id, enrollment_customization_panel_text, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param enrollment_customization_panel_text: Enrollment Customization Panel to update (required)
        :type enrollment_customization_panel_text: EnrollmentCustomizationPanelText
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelText
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_text_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_text, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_text_panel_id_put_with_http_info(self, id, panel_id, enrollment_customization_panel_text, **kwargs):  # noqa: E501
        """Update a single Text Panel for a single Enrollment Customization   # noqa: E501

        Update a single Text panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_text, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param panel_id: Panel object identifier (required)
        :type panel_id: int
        :param enrollment_customization_panel_text: Enrollment Customization Panel to update (required)
        :type enrollment_customization_panel_text: EnrollmentCustomizationPanelText
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelText, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'panel_id',
            'enrollment_customization_panel_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_text_panel_id_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_text_panel_id_put`")  # noqa: E501
        # verify the required parameter 'panel_id' is set
        if self.api_client.client_side_validation and ('panel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['panel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `panel_id` when calling `v1_enrollment_customization_id_text_panel_id_put`")  # noqa: E501
        # verify the required parameter 'enrollment_customization_panel_text' is set
        if self.api_client.client_side_validation and ('enrollment_customization_panel_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['enrollment_customization_panel_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `enrollment_customization_panel_text` when calling `v1_enrollment_customization_id_text_panel_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'panel_id' in local_var_params:
            path_params['panel-id'] = local_var_params['panel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enrollment_customization_panel_text' in local_var_params:
            body_params = local_var_params['enrollment_customization_panel_text']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetEnrollmentCustomizationPanelText",
            404: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/text/{panel-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_id_text_post(self, id, enrollment_customization_panel_text, **kwargs):  # noqa: E501
        """Create a Text Panel for a single Enrollment Customization   # noqa: E501

        Create a Text panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_post(id, enrollment_customization_panel_text, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param enrollment_customization_panel_text: Enrollment Customization Panel to create (required)
        :type enrollment_customization_panel_text: EnrollmentCustomizationPanelText
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetEnrollmentCustomizationPanelText
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_id_text_post_with_http_info(id, enrollment_customization_panel_text, **kwargs)  # noqa: E501

    def v1_enrollment_customization_id_text_post_with_http_info(self, id, enrollment_customization_panel_text, **kwargs):  # noqa: E501
        """Create a Text Panel for a single Enrollment Customization   # noqa: E501

        Create a Text panel for a single enrollment customization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_id_text_post_with_http_info(id, enrollment_customization_panel_text, async_req=True)
        >>> result = thread.get()

        :param id: Enrollment Customization identifier (required)
        :type id: int
        :param enrollment_customization_panel_text: Enrollment Customization Panel to create (required)
        :type enrollment_customization_panel_text: EnrollmentCustomizationPanelText
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetEnrollmentCustomizationPanelText, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'enrollment_customization_panel_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_id_text_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v1_enrollment_customization_id_text_post`")  # noqa: E501
        # verify the required parameter 'enrollment_customization_panel_text' is set
        if self.api_client.client_side_validation and ('enrollment_customization_panel_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['enrollment_customization_panel_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `enrollment_customization_panel_text` when calling `v1_enrollment_customization_id_text_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enrollment_customization_panel_text' in local_var_params:
            body_params = local_var_params['enrollment_customization_panel_text']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            201: "GetEnrollmentCustomizationPanelText",
            400: "ApiError",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/{id}/text', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1_enrollment_customization_parse_markdown_post(self, markdown, **kwargs):  # noqa: E501
        """Parse the given string as markdown text and return Html output   # noqa: E501

        Parse the given string as markdown text and return Html output  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_parse_markdown_post(markdown, async_req=True)
        >>> result = thread.get()

        :param markdown: Enrollment Customization Panel to create (required)
        :type markdown: Markdown
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Markdown
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_enrollment_customization_parse_markdown_post_with_http_info(markdown, **kwargs)  # noqa: E501

    def v1_enrollment_customization_parse_markdown_post_with_http_info(self, markdown, **kwargs):  # noqa: E501
        """Parse the given string as markdown text and return Html output   # noqa: E501

        Parse the given string as markdown text and return Html output  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_enrollment_customization_parse_markdown_post_with_http_info(markdown, async_req=True)
        >>> result = thread.get()

        :param markdown: Enrollment Customization Panel to create (required)
        :type markdown: Markdown
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Markdown, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'markdown'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enrollment_customization_parse_markdown_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'markdown' is set
        if self.api_client.client_side_validation and ('markdown' not in local_var_params or  # noqa: E501
                                                        local_var_params['markdown'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `markdown` when calling `v1_enrollment_customization_parse_markdown_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'markdown' in local_var_params:
            body_params = local_var_params['markdown']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "Markdown",
        }

        return self.api_client.call_api(
            '/v1/enrollment-customization/parse-markdown', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
