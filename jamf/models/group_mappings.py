# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class GroupMappings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'object_class_limitation': 'str',
        'object_classes': 'str',
        'search_base': 'str',
        'search_scope': 'str',
        'group_id': 'str',
        'group_name': 'str',
        'group_uuid': 'str'
    }

    attribute_map = {
        'object_class_limitation': 'objectClassLimitation',
        'object_classes': 'objectClasses',
        'search_base': 'searchBase',
        'search_scope': 'searchScope',
        'group_id': 'groupID',
        'group_name': 'groupName',
        'group_uuid': 'groupUuid'
    }

    def __init__(self, object_class_limitation=None, object_classes=None, search_base=None, search_scope=None, group_id=None, group_name=None, group_uuid=None, local_vars_configuration=None):  # noqa: E501
        """GroupMappings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._object_class_limitation = None
        self._object_classes = None
        self._search_base = None
        self._search_scope = None
        self._group_id = None
        self._group_name = None
        self._group_uuid = None
        self.discriminator = None

        self.object_class_limitation = object_class_limitation
        self.object_classes = object_classes
        self.search_base = search_base
        self.search_scope = search_scope
        self.group_id = group_id
        self.group_name = group_name
        self.group_uuid = group_uuid

    @property
    def object_class_limitation(self):
        """Gets the object_class_limitation of this GroupMappings.  # noqa: E501


        :return: The object_class_limitation of this GroupMappings.  # noqa: E501
        :rtype: str
        """
        return self._object_class_limitation

    @object_class_limitation.setter
    def object_class_limitation(self, object_class_limitation):
        """Sets the object_class_limitation of this GroupMappings.


        :param object_class_limitation: The object_class_limitation of this GroupMappings.  # noqa: E501
        :type object_class_limitation: str
        """
        if self.local_vars_configuration.client_side_validation and object_class_limitation is None:  # noqa: E501
            raise ValueError("Invalid value for `object_class_limitation`, must not be `None`")  # noqa: E501
        allowed_values = ["ANY_OBJECT_CLASSES", "ALL_OBJECT_CLASSES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and object_class_limitation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `object_class_limitation` ({0}), must be one of {1}"  # noqa: E501
                .format(object_class_limitation, allowed_values)
            )

        self._object_class_limitation = object_class_limitation

    @property
    def object_classes(self):
        """Gets the object_classes of this GroupMappings.  # noqa: E501


        :return: The object_classes of this GroupMappings.  # noqa: E501
        :rtype: str
        """
        return self._object_classes

    @object_classes.setter
    def object_classes(self, object_classes):
        """Sets the object_classes of this GroupMappings.


        :param object_classes: The object_classes of this GroupMappings.  # noqa: E501
        :type object_classes: str
        """
        if self.local_vars_configuration.client_side_validation and object_classes is None:  # noqa: E501
            raise ValueError("Invalid value for `object_classes`, must not be `None`")  # noqa: E501

        self._object_classes = object_classes

    @property
    def search_base(self):
        """Gets the search_base of this GroupMappings.  # noqa: E501


        :return: The search_base of this GroupMappings.  # noqa: E501
        :rtype: str
        """
        return self._search_base

    @search_base.setter
    def search_base(self, search_base):
        """Sets the search_base of this GroupMappings.


        :param search_base: The search_base of this GroupMappings.  # noqa: E501
        :type search_base: str
        """
        if self.local_vars_configuration.client_side_validation and search_base is None:  # noqa: E501
            raise ValueError("Invalid value for `search_base`, must not be `None`")  # noqa: E501

        self._search_base = search_base

    @property
    def search_scope(self):
        """Gets the search_scope of this GroupMappings.  # noqa: E501


        :return: The search_scope of this GroupMappings.  # noqa: E501
        :rtype: str
        """
        return self._search_scope

    @search_scope.setter
    def search_scope(self, search_scope):
        """Sets the search_scope of this GroupMappings.


        :param search_scope: The search_scope of this GroupMappings.  # noqa: E501
        :type search_scope: str
        """
        if self.local_vars_configuration.client_side_validation and search_scope is None:  # noqa: E501
            raise ValueError("Invalid value for `search_scope`, must not be `None`")  # noqa: E501
        allowed_values = ["ALL_SUBTREES", "FIRST_LEVEL_ONLY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and search_scope not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `search_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(search_scope, allowed_values)
            )

        self._search_scope = search_scope

    @property
    def group_id(self):
        """Gets the group_id of this GroupMappings.  # noqa: E501


        :return: The group_id of this GroupMappings.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupMappings.


        :param group_id: The group_id of this GroupMappings.  # noqa: E501
        :type group_id: str
        """
        if self.local_vars_configuration.client_side_validation and group_id is None:  # noqa: E501
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this GroupMappings.  # noqa: E501


        :return: The group_name of this GroupMappings.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupMappings.


        :param group_name: The group_name of this GroupMappings.  # noqa: E501
        :type group_name: str
        """
        if self.local_vars_configuration.client_side_validation and group_name is None:  # noqa: E501
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def group_uuid(self):
        """Gets the group_uuid of this GroupMappings.  # noqa: E501


        :return: The group_uuid of this GroupMappings.  # noqa: E501
        :rtype: str
        """
        return self._group_uuid

    @group_uuid.setter
    def group_uuid(self, group_uuid):
        """Sets the group_uuid of this GroupMappings.


        :param group_uuid: The group_uuid of this GroupMappings.  # noqa: E501
        :type group_uuid: str
        """
        if self.local_vars_configuration.client_side_validation and group_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `group_uuid`, must not be `None`")  # noqa: E501

        self._group_uuid = group_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupMappings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupMappings):
            return True

        return self.to_dict() != other.to_dict()
