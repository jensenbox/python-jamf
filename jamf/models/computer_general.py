# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerGeneral(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'last_ip_address': 'str',
        'last_reported_ip': 'str',
        'jamf_binary_version': 'str',
        'platform': 'str',
        'barcode1': 'str',
        'barcode2': 'str',
        'asset_tag': 'str',
        'remote_management': 'ComputerRemoteManagement',
        'supervised': 'bool',
        'mdm_capable': 'ComputerMdmCapability',
        'report_date': 'datetime',
        'last_contact_time': 'datetime',
        'last_cloud_backup_date': 'datetime',
        'last_enrolled_date': 'datetime',
        'mdm_profile_expiration': 'datetime',
        'initial_entry_date': 'date',
        'distribution_point': 'str',
        'enrollment_method': 'EnrollmentMethod',
        'site': 'V1Site',
        'itunes_store_account_active': 'bool',
        'enrolled_via_automated_device_enrollment': 'bool',
        'user_approved_mdm': 'bool',
        'extension_attributes': 'list[ComputerExtensionAttribute]'
    }

    attribute_map = {
        'name': 'name',
        'last_ip_address': 'lastIpAddress',
        'last_reported_ip': 'lastReportedIp',
        'jamf_binary_version': 'jamfBinaryVersion',
        'platform': 'platform',
        'barcode1': 'barcode1',
        'barcode2': 'barcode2',
        'asset_tag': 'assetTag',
        'remote_management': 'remoteManagement',
        'supervised': 'supervised',
        'mdm_capable': 'mdmCapable',
        'report_date': 'reportDate',
        'last_contact_time': 'lastContactTime',
        'last_cloud_backup_date': 'lastCloudBackupDate',
        'last_enrolled_date': 'lastEnrolledDate',
        'mdm_profile_expiration': 'mdmProfileExpiration',
        'initial_entry_date': 'initialEntryDate',
        'distribution_point': 'distributionPoint',
        'enrollment_method': 'enrollmentMethod',
        'site': 'site',
        'itunes_store_account_active': 'itunesStoreAccountActive',
        'enrolled_via_automated_device_enrollment': 'enrolledViaAutomatedDeviceEnrollment',
        'user_approved_mdm': 'userApprovedMdm',
        'extension_attributes': 'extensionAttributes'
    }

    def __init__(self, name=None, last_ip_address=None, last_reported_ip=None, jamf_binary_version=None, platform=None, barcode1=None, barcode2=None, asset_tag=None, remote_management=None, supervised=None, mdm_capable=None, report_date=None, last_contact_time=None, last_cloud_backup_date=None, last_enrolled_date=None, mdm_profile_expiration=None, initial_entry_date=None, distribution_point=None, enrollment_method=None, site=None, itunes_store_account_active=None, enrolled_via_automated_device_enrollment=None, user_approved_mdm=None, extension_attributes=None, local_vars_configuration=None):  # noqa: E501
        """ComputerGeneral - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._last_ip_address = None
        self._last_reported_ip = None
        self._jamf_binary_version = None
        self._platform = None
        self._barcode1 = None
        self._barcode2 = None
        self._asset_tag = None
        self._remote_management = None
        self._supervised = None
        self._mdm_capable = None
        self._report_date = None
        self._last_contact_time = None
        self._last_cloud_backup_date = None
        self._last_enrolled_date = None
        self._mdm_profile_expiration = None
        self._initial_entry_date = None
        self._distribution_point = None
        self._enrollment_method = None
        self._site = None
        self._itunes_store_account_active = None
        self._enrolled_via_automated_device_enrollment = None
        self._user_approved_mdm = None
        self._extension_attributes = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if last_ip_address is not None:
            self.last_ip_address = last_ip_address
        if last_reported_ip is not None:
            self.last_reported_ip = last_reported_ip
        if jamf_binary_version is not None:
            self.jamf_binary_version = jamf_binary_version
        if platform is not None:
            self.platform = platform
        if barcode1 is not None:
            self.barcode1 = barcode1
        if barcode2 is not None:
            self.barcode2 = barcode2
        if asset_tag is not None:
            self.asset_tag = asset_tag
        if remote_management is not None:
            self.remote_management = remote_management
        if supervised is not None:
            self.supervised = supervised
        if mdm_capable is not None:
            self.mdm_capable = mdm_capable
        if report_date is not None:
            self.report_date = report_date
        if last_contact_time is not None:
            self.last_contact_time = last_contact_time
        if last_cloud_backup_date is not None:
            self.last_cloud_backup_date = last_cloud_backup_date
        if last_enrolled_date is not None:
            self.last_enrolled_date = last_enrolled_date
        if mdm_profile_expiration is not None:
            self.mdm_profile_expiration = mdm_profile_expiration
        if initial_entry_date is not None:
            self.initial_entry_date = initial_entry_date
        if distribution_point is not None:
            self.distribution_point = distribution_point
        if enrollment_method is not None:
            self.enrollment_method = enrollment_method
        if site is not None:
            self.site = site
        if itunes_store_account_active is not None:
            self.itunes_store_account_active = itunes_store_account_active
        if enrolled_via_automated_device_enrollment is not None:
            self.enrolled_via_automated_device_enrollment = enrolled_via_automated_device_enrollment
        if user_approved_mdm is not None:
            self.user_approved_mdm = user_approved_mdm
        if extension_attributes is not None:
            self.extension_attributes = extension_attributes

    @property
    def name(self):
        """Gets the name of this ComputerGeneral.  # noqa: E501


        :return: The name of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputerGeneral.


        :param name: The name of this ComputerGeneral.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def last_ip_address(self):
        """Gets the last_ip_address of this ComputerGeneral.  # noqa: E501


        :return: The last_ip_address of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._last_ip_address

    @last_ip_address.setter
    def last_ip_address(self, last_ip_address):
        """Sets the last_ip_address of this ComputerGeneral.


        :param last_ip_address: The last_ip_address of this ComputerGeneral.  # noqa: E501
        :type last_ip_address: str
        """

        self._last_ip_address = last_ip_address

    @property
    def last_reported_ip(self):
        """Gets the last_reported_ip of this ComputerGeneral.  # noqa: E501


        :return: The last_reported_ip of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._last_reported_ip

    @last_reported_ip.setter
    def last_reported_ip(self, last_reported_ip):
        """Sets the last_reported_ip of this ComputerGeneral.


        :param last_reported_ip: The last_reported_ip of this ComputerGeneral.  # noqa: E501
        :type last_reported_ip: str
        """

        self._last_reported_ip = last_reported_ip

    @property
    def jamf_binary_version(self):
        """Gets the jamf_binary_version of this ComputerGeneral.  # noqa: E501


        :return: The jamf_binary_version of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._jamf_binary_version

    @jamf_binary_version.setter
    def jamf_binary_version(self, jamf_binary_version):
        """Sets the jamf_binary_version of this ComputerGeneral.


        :param jamf_binary_version: The jamf_binary_version of this ComputerGeneral.  # noqa: E501
        :type jamf_binary_version: str
        """

        self._jamf_binary_version = jamf_binary_version

    @property
    def platform(self):
        """Gets the platform of this ComputerGeneral.  # noqa: E501


        :return: The platform of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ComputerGeneral.


        :param platform: The platform of this ComputerGeneral.  # noqa: E501
        :type platform: str
        """

        self._platform = platform

    @property
    def barcode1(self):
        """Gets the barcode1 of this ComputerGeneral.  # noqa: E501


        :return: The barcode1 of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._barcode1

    @barcode1.setter
    def barcode1(self, barcode1):
        """Sets the barcode1 of this ComputerGeneral.


        :param barcode1: The barcode1 of this ComputerGeneral.  # noqa: E501
        :type barcode1: str
        """

        self._barcode1 = barcode1

    @property
    def barcode2(self):
        """Gets the barcode2 of this ComputerGeneral.  # noqa: E501


        :return: The barcode2 of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._barcode2

    @barcode2.setter
    def barcode2(self, barcode2):
        """Sets the barcode2 of this ComputerGeneral.


        :param barcode2: The barcode2 of this ComputerGeneral.  # noqa: E501
        :type barcode2: str
        """

        self._barcode2 = barcode2

    @property
    def asset_tag(self):
        """Gets the asset_tag of this ComputerGeneral.  # noqa: E501


        :return: The asset_tag of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this ComputerGeneral.


        :param asset_tag: The asset_tag of this ComputerGeneral.  # noqa: E501
        :type asset_tag: str
        """

        self._asset_tag = asset_tag

    @property
    def remote_management(self):
        """Gets the remote_management of this ComputerGeneral.  # noqa: E501


        :return: The remote_management of this ComputerGeneral.  # noqa: E501
        :rtype: ComputerRemoteManagement
        """
        return self._remote_management

    @remote_management.setter
    def remote_management(self, remote_management):
        """Sets the remote_management of this ComputerGeneral.


        :param remote_management: The remote_management of this ComputerGeneral.  # noqa: E501
        :type remote_management: ComputerRemoteManagement
        """

        self._remote_management = remote_management

    @property
    def supervised(self):
        """Gets the supervised of this ComputerGeneral.  # noqa: E501


        :return: The supervised of this ComputerGeneral.  # noqa: E501
        :rtype: bool
        """
        return self._supervised

    @supervised.setter
    def supervised(self, supervised):
        """Sets the supervised of this ComputerGeneral.


        :param supervised: The supervised of this ComputerGeneral.  # noqa: E501
        :type supervised: bool
        """

        self._supervised = supervised

    @property
    def mdm_capable(self):
        """Gets the mdm_capable of this ComputerGeneral.  # noqa: E501


        :return: The mdm_capable of this ComputerGeneral.  # noqa: E501
        :rtype: ComputerMdmCapability
        """
        return self._mdm_capable

    @mdm_capable.setter
    def mdm_capable(self, mdm_capable):
        """Sets the mdm_capable of this ComputerGeneral.


        :param mdm_capable: The mdm_capable of this ComputerGeneral.  # noqa: E501
        :type mdm_capable: ComputerMdmCapability
        """

        self._mdm_capable = mdm_capable

    @property
    def report_date(self):
        """Gets the report_date of this ComputerGeneral.  # noqa: E501


        :return: The report_date of this ComputerGeneral.  # noqa: E501
        :rtype: datetime
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date):
        """Sets the report_date of this ComputerGeneral.


        :param report_date: The report_date of this ComputerGeneral.  # noqa: E501
        :type report_date: datetime
        """

        self._report_date = report_date

    @property
    def last_contact_time(self):
        """Gets the last_contact_time of this ComputerGeneral.  # noqa: E501


        :return: The last_contact_time of this ComputerGeneral.  # noqa: E501
        :rtype: datetime
        """
        return self._last_contact_time

    @last_contact_time.setter
    def last_contact_time(self, last_contact_time):
        """Sets the last_contact_time of this ComputerGeneral.


        :param last_contact_time: The last_contact_time of this ComputerGeneral.  # noqa: E501
        :type last_contact_time: datetime
        """

        self._last_contact_time = last_contact_time

    @property
    def last_cloud_backup_date(self):
        """Gets the last_cloud_backup_date of this ComputerGeneral.  # noqa: E501


        :return: The last_cloud_backup_date of this ComputerGeneral.  # noqa: E501
        :rtype: datetime
        """
        return self._last_cloud_backup_date

    @last_cloud_backup_date.setter
    def last_cloud_backup_date(self, last_cloud_backup_date):
        """Sets the last_cloud_backup_date of this ComputerGeneral.


        :param last_cloud_backup_date: The last_cloud_backup_date of this ComputerGeneral.  # noqa: E501
        :type last_cloud_backup_date: datetime
        """

        self._last_cloud_backup_date = last_cloud_backup_date

    @property
    def last_enrolled_date(self):
        """Gets the last_enrolled_date of this ComputerGeneral.  # noqa: E501


        :return: The last_enrolled_date of this ComputerGeneral.  # noqa: E501
        :rtype: datetime
        """
        return self._last_enrolled_date

    @last_enrolled_date.setter
    def last_enrolled_date(self, last_enrolled_date):
        """Sets the last_enrolled_date of this ComputerGeneral.


        :param last_enrolled_date: The last_enrolled_date of this ComputerGeneral.  # noqa: E501
        :type last_enrolled_date: datetime
        """

        self._last_enrolled_date = last_enrolled_date

    @property
    def mdm_profile_expiration(self):
        """Gets the mdm_profile_expiration of this ComputerGeneral.  # noqa: E501


        :return: The mdm_profile_expiration of this ComputerGeneral.  # noqa: E501
        :rtype: datetime
        """
        return self._mdm_profile_expiration

    @mdm_profile_expiration.setter
    def mdm_profile_expiration(self, mdm_profile_expiration):
        """Sets the mdm_profile_expiration of this ComputerGeneral.


        :param mdm_profile_expiration: The mdm_profile_expiration of this ComputerGeneral.  # noqa: E501
        :type mdm_profile_expiration: datetime
        """

        self._mdm_profile_expiration = mdm_profile_expiration

    @property
    def initial_entry_date(self):
        """Gets the initial_entry_date of this ComputerGeneral.  # noqa: E501


        :return: The initial_entry_date of this ComputerGeneral.  # noqa: E501
        :rtype: date
        """
        return self._initial_entry_date

    @initial_entry_date.setter
    def initial_entry_date(self, initial_entry_date):
        """Sets the initial_entry_date of this ComputerGeneral.


        :param initial_entry_date: The initial_entry_date of this ComputerGeneral.  # noqa: E501
        :type initial_entry_date: date
        """

        self._initial_entry_date = initial_entry_date

    @property
    def distribution_point(self):
        """Gets the distribution_point of this ComputerGeneral.  # noqa: E501


        :return: The distribution_point of this ComputerGeneral.  # noqa: E501
        :rtype: str
        """
        return self._distribution_point

    @distribution_point.setter
    def distribution_point(self, distribution_point):
        """Sets the distribution_point of this ComputerGeneral.


        :param distribution_point: The distribution_point of this ComputerGeneral.  # noqa: E501
        :type distribution_point: str
        """

        self._distribution_point = distribution_point

    @property
    def enrollment_method(self):
        """Gets the enrollment_method of this ComputerGeneral.  # noqa: E501


        :return: The enrollment_method of this ComputerGeneral.  # noqa: E501
        :rtype: EnrollmentMethod
        """
        return self._enrollment_method

    @enrollment_method.setter
    def enrollment_method(self, enrollment_method):
        """Sets the enrollment_method of this ComputerGeneral.


        :param enrollment_method: The enrollment_method of this ComputerGeneral.  # noqa: E501
        :type enrollment_method: EnrollmentMethod
        """

        self._enrollment_method = enrollment_method

    @property
    def site(self):
        """Gets the site of this ComputerGeneral.  # noqa: E501


        :return: The site of this ComputerGeneral.  # noqa: E501
        :rtype: V1Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this ComputerGeneral.


        :param site: The site of this ComputerGeneral.  # noqa: E501
        :type site: V1Site
        """

        self._site = site

    @property
    def itunes_store_account_active(self):
        """Gets the itunes_store_account_active of this ComputerGeneral.  # noqa: E501


        :return: The itunes_store_account_active of this ComputerGeneral.  # noqa: E501
        :rtype: bool
        """
        return self._itunes_store_account_active

    @itunes_store_account_active.setter
    def itunes_store_account_active(self, itunes_store_account_active):
        """Sets the itunes_store_account_active of this ComputerGeneral.


        :param itunes_store_account_active: The itunes_store_account_active of this ComputerGeneral.  # noqa: E501
        :type itunes_store_account_active: bool
        """

        self._itunes_store_account_active = itunes_store_account_active

    @property
    def enrolled_via_automated_device_enrollment(self):
        """Gets the enrolled_via_automated_device_enrollment of this ComputerGeneral.  # noqa: E501


        :return: The enrolled_via_automated_device_enrollment of this ComputerGeneral.  # noqa: E501
        :rtype: bool
        """
        return self._enrolled_via_automated_device_enrollment

    @enrolled_via_automated_device_enrollment.setter
    def enrolled_via_automated_device_enrollment(self, enrolled_via_automated_device_enrollment):
        """Sets the enrolled_via_automated_device_enrollment of this ComputerGeneral.


        :param enrolled_via_automated_device_enrollment: The enrolled_via_automated_device_enrollment of this ComputerGeneral.  # noqa: E501
        :type enrolled_via_automated_device_enrollment: bool
        """

        self._enrolled_via_automated_device_enrollment = enrolled_via_automated_device_enrollment

    @property
    def user_approved_mdm(self):
        """Gets the user_approved_mdm of this ComputerGeneral.  # noqa: E501


        :return: The user_approved_mdm of this ComputerGeneral.  # noqa: E501
        :rtype: bool
        """
        return self._user_approved_mdm

    @user_approved_mdm.setter
    def user_approved_mdm(self, user_approved_mdm):
        """Sets the user_approved_mdm of this ComputerGeneral.


        :param user_approved_mdm: The user_approved_mdm of this ComputerGeneral.  # noqa: E501
        :type user_approved_mdm: bool
        """

        self._user_approved_mdm = user_approved_mdm

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this ComputerGeneral.  # noqa: E501


        :return: The extension_attributes of this ComputerGeneral.  # noqa: E501
        :rtype: list[ComputerExtensionAttribute]
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this ComputerGeneral.


        :param extension_attributes: The extension_attributes of this ComputerGeneral.  # noqa: E501
        :type extension_attributes: list[ComputerExtensionAttribute]
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerGeneral):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerGeneral):
            return True

        return self.to_dict() != other.to_dict()
