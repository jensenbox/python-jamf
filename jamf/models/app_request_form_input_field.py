# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class AppRequestFormInputField(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'title': 'str',
        'description': 'str',
        'priority': 'int'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'priority': 'priority'
    }

    def __init__(self, id=None, title=None, description=None, priority=None, local_vars_configuration=None):  # noqa: E501
        """AppRequestFormInputField - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._title = None
        self._description = None
        self._priority = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.title = title
        if description is not None:
            self.description = description
        self.priority = priority

    @property
    def id(self):
        """Gets the id of this AppRequestFormInputField.  # noqa: E501


        :return: The id of this AppRequestFormInputField.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppRequestFormInputField.


        :param id: The id of this AppRequestFormInputField.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this AppRequestFormInputField.  # noqa: E501


        :return: The title of this AppRequestFormInputField.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AppRequestFormInputField.


        :param title: The title of this AppRequestFormInputField.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this AppRequestFormInputField.  # noqa: E501


        :return: The description of this AppRequestFormInputField.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppRequestFormInputField.


        :param description: The description of this AppRequestFormInputField.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this AppRequestFormInputField.  # noqa: E501

        Highest priority is 1, lowest is 255  # noqa: E501

        :return: The priority of this AppRequestFormInputField.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AppRequestFormInputField.

        Highest priority is 1, lowest is 255  # noqa: E501

        :param priority: The priority of this AppRequestFormInputField.  # noqa: E501
        :type priority: int
        """
        if self.local_vars_configuration.client_side_validation and priority is None:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority > 255):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                priority is not None and priority < 1):  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")  # noqa: E501

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppRequestFormInputField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppRequestFormInputField):
            return True

        return self.to_dict() != other.to_dict()
