# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerInventoryUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'udid': 'str',
        'general': 'ComputerGeneralUpdate',
        'purchasing': 'ComputerPurchase',
        'user_and_location': 'ComputerUserAndLocation',
        'hardware': 'ComputerHardwareUpdate',
        'operating_system': 'ComputerOperatingSystemUpdate',
        'extension_attributes': 'list[ComputerExtensionAttribute]'
    }

    attribute_map = {
        'udid': 'udid',
        'general': 'general',
        'purchasing': 'purchasing',
        'user_and_location': 'userAndLocation',
        'hardware': 'hardware',
        'operating_system': 'operatingSystem',
        'extension_attributes': 'extensionAttributes'
    }

    def __init__(self, udid=None, general=None, purchasing=None, user_and_location=None, hardware=None, operating_system=None, extension_attributes=None, local_vars_configuration=None):  # noqa: E501
        """ComputerInventoryUpdateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._udid = None
        self._general = None
        self._purchasing = None
        self._user_and_location = None
        self._hardware = None
        self._operating_system = None
        self._extension_attributes = None
        self.discriminator = None

        if udid is not None:
            self.udid = udid
        if general is not None:
            self.general = general
        if purchasing is not None:
            self.purchasing = purchasing
        if user_and_location is not None:
            self.user_and_location = user_and_location
        if hardware is not None:
            self.hardware = hardware
        if operating_system is not None:
            self.operating_system = operating_system
        if extension_attributes is not None:
            self.extension_attributes = extension_attributes

    @property
    def udid(self):
        """Gets the udid of this ComputerInventoryUpdateRequest.  # noqa: E501


        :return: The udid of this ComputerInventoryUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this ComputerInventoryUpdateRequest.


        :param udid: The udid of this ComputerInventoryUpdateRequest.  # noqa: E501
        :type udid: str
        """

        self._udid = udid

    @property
    def general(self):
        """Gets the general of this ComputerInventoryUpdateRequest.  # noqa: E501


        :return: The general of this ComputerInventoryUpdateRequest.  # noqa: E501
        :rtype: ComputerGeneralUpdate
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this ComputerInventoryUpdateRequest.


        :param general: The general of this ComputerInventoryUpdateRequest.  # noqa: E501
        :type general: ComputerGeneralUpdate
        """

        self._general = general

    @property
    def purchasing(self):
        """Gets the purchasing of this ComputerInventoryUpdateRequest.  # noqa: E501


        :return: The purchasing of this ComputerInventoryUpdateRequest.  # noqa: E501
        :rtype: ComputerPurchase
        """
        return self._purchasing

    @purchasing.setter
    def purchasing(self, purchasing):
        """Sets the purchasing of this ComputerInventoryUpdateRequest.


        :param purchasing: The purchasing of this ComputerInventoryUpdateRequest.  # noqa: E501
        :type purchasing: ComputerPurchase
        """

        self._purchasing = purchasing

    @property
    def user_and_location(self):
        """Gets the user_and_location of this ComputerInventoryUpdateRequest.  # noqa: E501


        :return: The user_and_location of this ComputerInventoryUpdateRequest.  # noqa: E501
        :rtype: ComputerUserAndLocation
        """
        return self._user_and_location

    @user_and_location.setter
    def user_and_location(self, user_and_location):
        """Sets the user_and_location of this ComputerInventoryUpdateRequest.


        :param user_and_location: The user_and_location of this ComputerInventoryUpdateRequest.  # noqa: E501
        :type user_and_location: ComputerUserAndLocation
        """

        self._user_and_location = user_and_location

    @property
    def hardware(self):
        """Gets the hardware of this ComputerInventoryUpdateRequest.  # noqa: E501


        :return: The hardware of this ComputerInventoryUpdateRequest.  # noqa: E501
        :rtype: ComputerHardwareUpdate
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this ComputerInventoryUpdateRequest.


        :param hardware: The hardware of this ComputerInventoryUpdateRequest.  # noqa: E501
        :type hardware: ComputerHardwareUpdate
        """

        self._hardware = hardware

    @property
    def operating_system(self):
        """Gets the operating_system of this ComputerInventoryUpdateRequest.  # noqa: E501


        :return: The operating_system of this ComputerInventoryUpdateRequest.  # noqa: E501
        :rtype: ComputerOperatingSystemUpdate
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this ComputerInventoryUpdateRequest.


        :param operating_system: The operating_system of this ComputerInventoryUpdateRequest.  # noqa: E501
        :type operating_system: ComputerOperatingSystemUpdate
        """

        self._operating_system = operating_system

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this ComputerInventoryUpdateRequest.  # noqa: E501


        :return: The extension_attributes of this ComputerInventoryUpdateRequest.  # noqa: E501
        :rtype: list[ComputerExtensionAttribute]
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this ComputerInventoryUpdateRequest.


        :param extension_attributes: The extension_attributes of this ComputerInventoryUpdateRequest.  # noqa: E501
        :type extension_attributes: list[ComputerExtensionAttribute]
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerInventoryUpdateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerInventoryUpdateRequest):
            return True

        return self.to_dict() != other.to_dict()
