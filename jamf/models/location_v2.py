# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class LocationV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'real_name': 'str',
        'email_address': 'str',
        'position': 'str',
        'phone_number': 'str',
        'department_id': 'str',
        'building_id': 'str',
        'room': 'str'
    }

    attribute_map = {
        'username': 'username',
        'real_name': 'realName',
        'email_address': 'emailAddress',
        'position': 'position',
        'phone_number': 'phoneNumber',
        'department_id': 'departmentId',
        'building_id': 'buildingId',
        'room': 'room'
    }

    def __init__(self, username=None, real_name=None, email_address=None, position=None, phone_number=None, department_id=None, building_id=None, room=None, local_vars_configuration=None):  # noqa: E501
        """LocationV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._real_name = None
        self._email_address = None
        self._position = None
        self._phone_number = None
        self._department_id = None
        self._building_id = None
        self._room = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if real_name is not None:
            self.real_name = real_name
        if email_address is not None:
            self.email_address = email_address
        if position is not None:
            self.position = position
        if phone_number is not None:
            self.phone_number = phone_number
        if department_id is not None:
            self.department_id = department_id
        if building_id is not None:
            self.building_id = building_id
        if room is not None:
            self.room = room

    @property
    def username(self):
        """Gets the username of this LocationV2.  # noqa: E501


        :return: The username of this LocationV2.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LocationV2.


        :param username: The username of this LocationV2.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def real_name(self):
        """Gets the real_name of this LocationV2.  # noqa: E501


        :return: The real_name of this LocationV2.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this LocationV2.


        :param real_name: The real_name of this LocationV2.  # noqa: E501
        :type real_name: str
        """

        self._real_name = real_name

    @property
    def email_address(self):
        """Gets the email_address of this LocationV2.  # noqa: E501


        :return: The email_address of this LocationV2.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this LocationV2.


        :param email_address: The email_address of this LocationV2.  # noqa: E501
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def position(self):
        """Gets the position of this LocationV2.  # noqa: E501


        :return: The position of this LocationV2.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this LocationV2.


        :param position: The position of this LocationV2.  # noqa: E501
        :type position: str
        """

        self._position = position

    @property
    def phone_number(self):
        """Gets the phone_number of this LocationV2.  # noqa: E501


        :return: The phone_number of this LocationV2.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this LocationV2.


        :param phone_number: The phone_number of this LocationV2.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def department_id(self):
        """Gets the department_id of this LocationV2.  # noqa: E501


        :return: The department_id of this LocationV2.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this LocationV2.


        :param department_id: The department_id of this LocationV2.  # noqa: E501
        :type department_id: str
        """

        self._department_id = department_id

    @property
    def building_id(self):
        """Gets the building_id of this LocationV2.  # noqa: E501


        :return: The building_id of this LocationV2.  # noqa: E501
        :rtype: str
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this LocationV2.


        :param building_id: The building_id of this LocationV2.  # noqa: E501
        :type building_id: str
        """

        self._building_id = building_id

    @property
    def room(self):
        """Gets the room of this LocationV2.  # noqa: E501


        :return: The room of this LocationV2.  # noqa: E501
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this LocationV2.


        :param room: The room of this LocationV2.  # noqa: E501
        :type room: str
        """

        self._room = room

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationV2):
            return True

        return self.to_dict() != other.to_dict()
