# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerContentCachingParentCapabilities(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_caching_parent_capabilities_id': 'str',
        'imports': 'bool',
        'namespaces': 'bool',
        'personal_content': 'bool',
        'query_parameters': 'bool',
        'shared_content': 'bool',
        'prioritization': 'bool'
    }

    attribute_map = {
        'content_caching_parent_capabilities_id': 'contentCachingParentCapabilitiesId',
        'imports': 'imports',
        'namespaces': 'namespaces',
        'personal_content': 'personalContent',
        'query_parameters': 'queryParameters',
        'shared_content': 'sharedContent',
        'prioritization': 'prioritization'
    }

    def __init__(self, content_caching_parent_capabilities_id=None, imports=None, namespaces=None, personal_content=None, query_parameters=None, shared_content=None, prioritization=None, local_vars_configuration=None):  # noqa: E501
        """ComputerContentCachingParentCapabilities - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_caching_parent_capabilities_id = None
        self._imports = None
        self._namespaces = None
        self._personal_content = None
        self._query_parameters = None
        self._shared_content = None
        self._prioritization = None
        self.discriminator = None

        if content_caching_parent_capabilities_id is not None:
            self.content_caching_parent_capabilities_id = content_caching_parent_capabilities_id
        if imports is not None:
            self.imports = imports
        if namespaces is not None:
            self.namespaces = namespaces
        if personal_content is not None:
            self.personal_content = personal_content
        if query_parameters is not None:
            self.query_parameters = query_parameters
        if shared_content is not None:
            self.shared_content = shared_content
        if prioritization is not None:
            self.prioritization = prioritization

    @property
    def content_caching_parent_capabilities_id(self):
        """Gets the content_caching_parent_capabilities_id of this ComputerContentCachingParentCapabilities.  # noqa: E501


        :return: The content_caching_parent_capabilities_id of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._content_caching_parent_capabilities_id

    @content_caching_parent_capabilities_id.setter
    def content_caching_parent_capabilities_id(self, content_caching_parent_capabilities_id):
        """Sets the content_caching_parent_capabilities_id of this ComputerContentCachingParentCapabilities.


        :param content_caching_parent_capabilities_id: The content_caching_parent_capabilities_id of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :type content_caching_parent_capabilities_id: str
        """

        self._content_caching_parent_capabilities_id = content_caching_parent_capabilities_id

    @property
    def imports(self):
        """Gets the imports of this ComputerContentCachingParentCapabilities.  # noqa: E501


        :return: The imports of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._imports

    @imports.setter
    def imports(self, imports):
        """Sets the imports of this ComputerContentCachingParentCapabilities.


        :param imports: The imports of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :type imports: bool
        """

        self._imports = imports

    @property
    def namespaces(self):
        """Gets the namespaces of this ComputerContentCachingParentCapabilities.  # noqa: E501


        :return: The namespaces of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this ComputerContentCachingParentCapabilities.


        :param namespaces: The namespaces of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :type namespaces: bool
        """

        self._namespaces = namespaces

    @property
    def personal_content(self):
        """Gets the personal_content of this ComputerContentCachingParentCapabilities.  # noqa: E501


        :return: The personal_content of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._personal_content

    @personal_content.setter
    def personal_content(self, personal_content):
        """Sets the personal_content of this ComputerContentCachingParentCapabilities.


        :param personal_content: The personal_content of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :type personal_content: bool
        """

        self._personal_content = personal_content

    @property
    def query_parameters(self):
        """Gets the query_parameters of this ComputerContentCachingParentCapabilities.  # noqa: E501


        :return: The query_parameters of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this ComputerContentCachingParentCapabilities.


        :param query_parameters: The query_parameters of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :type query_parameters: bool
        """

        self._query_parameters = query_parameters

    @property
    def shared_content(self):
        """Gets the shared_content of this ComputerContentCachingParentCapabilities.  # noqa: E501


        :return: The shared_content of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._shared_content

    @shared_content.setter
    def shared_content(self, shared_content):
        """Sets the shared_content of this ComputerContentCachingParentCapabilities.


        :param shared_content: The shared_content of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :type shared_content: bool
        """

        self._shared_content = shared_content

    @property
    def prioritization(self):
        """Gets the prioritization of this ComputerContentCachingParentCapabilities.  # noqa: E501


        :return: The prioritization of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._prioritization

    @prioritization.setter
    def prioritization(self, prioritization):
        """Sets the prioritization of this ComputerContentCachingParentCapabilities.


        :param prioritization: The prioritization of this ComputerContentCachingParentCapabilities.  # noqa: E501
        :type prioritization: bool
        """

        self._prioritization = prioritization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerContentCachingParentCapabilities):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerContentCachingParentCapabilities):
            return True

        return self.to_dict() != other.to_dict()
