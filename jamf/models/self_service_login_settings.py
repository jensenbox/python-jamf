# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class SelfServiceLoginSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_login_level': 'str',
        'is_allow_remember_me': 'bool',
        'auth_type': 'str'
    }

    attribute_map = {
        'user_login_level': 'userLoginLevel',
        'is_allow_remember_me': 'isAllowRememberMe',
        'auth_type': 'authType'
    }

    def __init__(self, user_login_level=None, is_allow_remember_me=True, auth_type=None, local_vars_configuration=None):  # noqa: E501
        """SelfServiceLoginSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_login_level = None
        self._is_allow_remember_me = None
        self._auth_type = None
        self.discriminator = None

        self.user_login_level = user_login_level
        if is_allow_remember_me is not None:
            self.is_allow_remember_me = is_allow_remember_me
        self.auth_type = auth_type

    @property
    def user_login_level(self):
        """Gets the user_login_level of this SelfServiceLoginSettings.  # noqa: E501

        login setting to tell clients how to let users log in   # noqa: E501

        :return: The user_login_level of this SelfServiceLoginSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_login_level

    @user_login_level.setter
    def user_login_level(self, user_login_level):
        """Sets the user_login_level of this SelfServiceLoginSettings.

        login setting to tell clients how to let users log in   # noqa: E501

        :param user_login_level: The user_login_level of this SelfServiceLoginSettings.  # noqa: E501
        :type user_login_level: str
        """
        if self.local_vars_configuration.client_side_validation and user_login_level is None:  # noqa: E501
            raise ValueError("Invalid value for `user_login_level`, must not be `None`")  # noqa: E501
        allowed_values = ["NotRequired", "Anonymous", "Required"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and user_login_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `user_login_level` ({0}), must be one of {1}"  # noqa: E501
                .format(user_login_level, allowed_values)
            )

        self._user_login_level = user_login_level

    @property
    def is_allow_remember_me(self):
        """Gets the is_allow_remember_me of this SelfServiceLoginSettings.  # noqa: E501

        true if remember me functionality is allowed, false if not   # noqa: E501

        :return: The is_allow_remember_me of this SelfServiceLoginSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_remember_me

    @is_allow_remember_me.setter
    def is_allow_remember_me(self, is_allow_remember_me):
        """Sets the is_allow_remember_me of this SelfServiceLoginSettings.

        true if remember me functionality is allowed, false if not   # noqa: E501

        :param is_allow_remember_me: The is_allow_remember_me of this SelfServiceLoginSettings.  # noqa: E501
        :type is_allow_remember_me: bool
        """

        self._is_allow_remember_me = is_allow_remember_me

    @property
    def auth_type(self):
        """Gets the auth_type of this SelfServiceLoginSettings.  # noqa: E501

        login type to be used when asking users to log in   # noqa: E501

        :return: The auth_type of this SelfServiceLoginSettings.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this SelfServiceLoginSettings.

        login type to be used when asking users to log in   # noqa: E501

        :param auth_type: The auth_type of this SelfServiceLoginSettings.  # noqa: E501
        :type auth_type: str
        """
        if self.local_vars_configuration.client_side_validation and auth_type is None:  # noqa: E501
            raise ValueError("Invalid value for `auth_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Basic", "Saml"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and auth_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelfServiceLoginSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelfServiceLoginSettings):
            return True

        return self.to_dict() != other.to_dict()
