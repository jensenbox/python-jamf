# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class UpdateMobileDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'asset_tag': 'str',
        'site_id': 'int',
        'location': 'Location',
        'updated_extension_attributes': 'list[ExtensionAttribute]',
        'ios': 'UpdateIos',
        'apple_tv': 'UpdateAppleTv'
    }

    attribute_map = {
        'name': 'name',
        'asset_tag': 'assetTag',
        'site_id': 'siteId',
        'location': 'location',
        'updated_extension_attributes': 'updatedExtensionAttributes',
        'ios': 'ios',
        'apple_tv': 'appleTv'
    }

    def __init__(self, name=None, asset_tag=None, site_id=None, location=None, updated_extension_attributes=None, ios=None, apple_tv=None, local_vars_configuration=None):  # noqa: E501
        """UpdateMobileDevice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._asset_tag = None
        self._site_id = None
        self._location = None
        self._updated_extension_attributes = None
        self._ios = None
        self._apple_tv = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if asset_tag is not None:
            self.asset_tag = asset_tag
        if site_id is not None:
            self.site_id = site_id
        if location is not None:
            self.location = location
        if updated_extension_attributes is not None:
            self.updated_extension_attributes = updated_extension_attributes
        if ios is not None:
            self.ios = ios
        if apple_tv is not None:
            self.apple_tv = apple_tv

    @property
    def name(self):
        """Gets the name of this UpdateMobileDevice.  # noqa: E501


        :return: The name of this UpdateMobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateMobileDevice.


        :param name: The name of this UpdateMobileDevice.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def asset_tag(self):
        """Gets the asset_tag of this UpdateMobileDevice.  # noqa: E501


        :return: The asset_tag of this UpdateMobileDevice.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this UpdateMobileDevice.


        :param asset_tag: The asset_tag of this UpdateMobileDevice.  # noqa: E501
        :type asset_tag: str
        """

        self._asset_tag = asset_tag

    @property
    def site_id(self):
        """Gets the site_id of this UpdateMobileDevice.  # noqa: E501


        :return: The site_id of this UpdateMobileDevice.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this UpdateMobileDevice.


        :param site_id: The site_id of this UpdateMobileDevice.  # noqa: E501
        :type site_id: int
        """

        self._site_id = site_id

    @property
    def location(self):
        """Gets the location of this UpdateMobileDevice.  # noqa: E501


        :return: The location of this UpdateMobileDevice.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UpdateMobileDevice.


        :param location: The location of this UpdateMobileDevice.  # noqa: E501
        :type location: Location
        """

        self._location = location

    @property
    def updated_extension_attributes(self):
        """Gets the updated_extension_attributes of this UpdateMobileDevice.  # noqa: E501


        :return: The updated_extension_attributes of this UpdateMobileDevice.  # noqa: E501
        :rtype: list[ExtensionAttribute]
        """
        return self._updated_extension_attributes

    @updated_extension_attributes.setter
    def updated_extension_attributes(self, updated_extension_attributes):
        """Sets the updated_extension_attributes of this UpdateMobileDevice.


        :param updated_extension_attributes: The updated_extension_attributes of this UpdateMobileDevice.  # noqa: E501
        :type updated_extension_attributes: list[ExtensionAttribute]
        """

        self._updated_extension_attributes = updated_extension_attributes

    @property
    def ios(self):
        """Gets the ios of this UpdateMobileDevice.  # noqa: E501


        :return: The ios of this UpdateMobileDevice.  # noqa: E501
        :rtype: UpdateIos
        """
        return self._ios

    @ios.setter
    def ios(self, ios):
        """Sets the ios of this UpdateMobileDevice.


        :param ios: The ios of this UpdateMobileDevice.  # noqa: E501
        :type ios: UpdateIos
        """

        self._ios = ios

    @property
    def apple_tv(self):
        """Gets the apple_tv of this UpdateMobileDevice.  # noqa: E501


        :return: The apple_tv of this UpdateMobileDevice.  # noqa: E501
        :rtype: UpdateAppleTv
        """
        return self._apple_tv

    @apple_tv.setter
    def apple_tv(self, apple_tv):
        """Sets the apple_tv of this UpdateMobileDevice.


        :param apple_tv: The apple_tv of this UpdateMobileDevice.  # noqa: E501
        :type apple_tv: UpdateAppleTv
        """

        self._apple_tv = apple_tv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateMobileDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateMobileDevice):
            return True

        return self.to_dict() != other.to_dict()
