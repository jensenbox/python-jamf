# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class SsoKeystoreParse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'keystore_password': 'str',
        'keystore_file': 'list[str]',
        'keystore_file_name': 'str'
    }

    attribute_map = {
        'keystore_password': 'keystorePassword',
        'keystore_file': 'keystoreFile',
        'keystore_file_name': 'keystoreFileName'
    }

    discriminator_value_class_map = {
        'SsoKeystore': 'SsoKeystore'
    }

    def __init__(self, keystore_password=None, keystore_file=None, keystore_file_name=None, local_vars_configuration=None):  # noqa: E501
        """SsoKeystoreParse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._keystore_password = None
        self._keystore_file = None
        self._keystore_file_name = None
        self.discriminator = 'cert_type'

        self.keystore_password = keystore_password
        self.keystore_file = keystore_file
        self.keystore_file_name = keystore_file_name

    @property
    def keystore_password(self):
        """Gets the keystore_password of this SsoKeystoreParse.  # noqa: E501


        :return: The keystore_password of this SsoKeystoreParse.  # noqa: E501
        :rtype: str
        """
        return self._keystore_password

    @keystore_password.setter
    def keystore_password(self, keystore_password):
        """Sets the keystore_password of this SsoKeystoreParse.


        :param keystore_password: The keystore_password of this SsoKeystoreParse.  # noqa: E501
        :type keystore_password: str
        """
        if self.local_vars_configuration.client_side_validation and keystore_password is None:  # noqa: E501
            raise ValueError("Invalid value for `keystore_password`, must not be `None`")  # noqa: E501

        self._keystore_password = keystore_password

    @property
    def keystore_file(self):
        """Gets the keystore_file of this SsoKeystoreParse.  # noqa: E501


        :return: The keystore_file of this SsoKeystoreParse.  # noqa: E501
        :rtype: list[str]
        """
        return self._keystore_file

    @keystore_file.setter
    def keystore_file(self, keystore_file):
        """Sets the keystore_file of this SsoKeystoreParse.


        :param keystore_file: The keystore_file of this SsoKeystoreParse.  # noqa: E501
        :type keystore_file: list[str]
        """
        if self.local_vars_configuration.client_side_validation and keystore_file is None:  # noqa: E501
            raise ValueError("Invalid value for `keystore_file`, must not be `None`")  # noqa: E501

        self._keystore_file = keystore_file

    @property
    def keystore_file_name(self):
        """Gets the keystore_file_name of this SsoKeystoreParse.  # noqa: E501


        :return: The keystore_file_name of this SsoKeystoreParse.  # noqa: E501
        :rtype: str
        """
        return self._keystore_file_name

    @keystore_file_name.setter
    def keystore_file_name(self, keystore_file_name):
        """Sets the keystore_file_name of this SsoKeystoreParse.


        :param keystore_file_name: The keystore_file_name of this SsoKeystoreParse.  # noqa: E501
        :type keystore_file_name: str
        """
        if self.local_vars_configuration.client_side_validation and keystore_file_name is None:  # noqa: E501
            raise ValueError("Invalid value for `keystore_file_name`, must not be `None`")  # noqa: E501

        self._keystore_file_name = keystore_file_name

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SsoKeystoreParse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SsoKeystoreParse):
            return True

        return self.to_dict() != other.to_dict()
