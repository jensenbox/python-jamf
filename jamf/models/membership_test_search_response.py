# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class MembershipTestSearchResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'is_member': 'bool'
    }

    attribute_map = {
        'username': 'username',
        'is_member': 'isMember'
    }

    def __init__(self, username=None, is_member=None, local_vars_configuration=None):  # noqa: E501
        """MembershipTestSearchResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._is_member = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if is_member is not None:
            self.is_member = is_member

    @property
    def username(self):
        """Gets the username of this MembershipTestSearchResponse.  # noqa: E501


        :return: The username of this MembershipTestSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MembershipTestSearchResponse.


        :param username: The username of this MembershipTestSearchResponse.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def is_member(self):
        """Gets the is_member of this MembershipTestSearchResponse.  # noqa: E501


        :return: The is_member of this MembershipTestSearchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_member

    @is_member.setter
    def is_member(self, is_member):
        """Sets the is_member of this MembershipTestSearchResponse.


        :param is_member: The is_member of this MembershipTestSearchResponse.  # noqa: E501
        :type is_member: bool
        """

        self._is_member = is_member

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MembershipTestSearchResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MembershipTestSearchResponse):
            return True

        return self.to_dict() != other.to_dict()
