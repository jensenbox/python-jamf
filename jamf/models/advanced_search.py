# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class AdvancedSearch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'criteria': 'list[SmartSearchCriterion]',
        'display_fields': 'list[str]',
        'site_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'criteria': 'criteria',
        'display_fields': 'displayFields',
        'site_id': 'siteId'
    }

    def __init__(self, id=None, name=None, criteria=None, display_fields=None, site_id=None, local_vars_configuration=None):  # noqa: E501
        """AdvancedSearch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._criteria = None
        self._display_fields = None
        self._site_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if criteria is not None:
            self.criteria = criteria
        if display_fields is not None:
            self.display_fields = display_fields
        if site_id is not None:
            self.site_id = site_id

    @property
    def id(self):
        """Gets the id of this AdvancedSearch.  # noqa: E501


        :return: The id of this AdvancedSearch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdvancedSearch.


        :param id: The id of this AdvancedSearch.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AdvancedSearch.  # noqa: E501


        :return: The name of this AdvancedSearch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdvancedSearch.


        :param name: The name of this AdvancedSearch.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def criteria(self):
        """Gets the criteria of this AdvancedSearch.  # noqa: E501


        :return: The criteria of this AdvancedSearch.  # noqa: E501
        :rtype: list[SmartSearchCriterion]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this AdvancedSearch.


        :param criteria: The criteria of this AdvancedSearch.  # noqa: E501
        :type criteria: list[SmartSearchCriterion]
        """

        self._criteria = criteria

    @property
    def display_fields(self):
        """Gets the display_fields of this AdvancedSearch.  # noqa: E501


        :return: The display_fields of this AdvancedSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._display_fields

    @display_fields.setter
    def display_fields(self, display_fields):
        """Sets the display_fields of this AdvancedSearch.


        :param display_fields: The display_fields of this AdvancedSearch.  # noqa: E501
        :type display_fields: list[str]
        """

        self._display_fields = display_fields

    @property
    def site_id(self):
        """Gets the site_id of this AdvancedSearch.  # noqa: E501


        :return: The site_id of this AdvancedSearch.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this AdvancedSearch.


        :param site_id: The site_id of this AdvancedSearch.  # noqa: E501
        :type site_id: str
        """

        self._site_id = site_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdvancedSearch):
            return True

        return self.to_dict() != other.to_dict()
