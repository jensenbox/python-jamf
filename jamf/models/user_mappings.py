# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class UserMappings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'object_class_limitation': 'str',
        'object_classes': 'str',
        'search_base': 'str',
        'search_scope': 'str',
        'additional_search_base': 'str',
        'user_id': 'str',
        'username': 'str',
        'real_name': 'str',
        'email_address': 'str',
        'department': 'str',
        'building': 'str',
        'room': 'str',
        'phone': 'str',
        'position': 'str',
        'user_uuid': 'str'
    }

    attribute_map = {
        'object_class_limitation': 'objectClassLimitation',
        'object_classes': 'objectClasses',
        'search_base': 'searchBase',
        'search_scope': 'searchScope',
        'additional_search_base': 'additionalSearchBase',
        'user_id': 'userID',
        'username': 'username',
        'real_name': 'realName',
        'email_address': 'emailAddress',
        'department': 'department',
        'building': 'building',
        'room': 'room',
        'phone': 'phone',
        'position': 'position',
        'user_uuid': 'userUuid'
    }

    def __init__(self, object_class_limitation=None, object_classes=None, search_base=None, search_scope=None, additional_search_base='', user_id=None, username=None, real_name=None, email_address=None, department=None, building='', room='', phone='', position=None, user_uuid=None, local_vars_configuration=None):  # noqa: E501
        """UserMappings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._object_class_limitation = None
        self._object_classes = None
        self._search_base = None
        self._search_scope = None
        self._additional_search_base = None
        self._user_id = None
        self._username = None
        self._real_name = None
        self._email_address = None
        self._department = None
        self._building = None
        self._room = None
        self._phone = None
        self._position = None
        self._user_uuid = None
        self.discriminator = None

        self.object_class_limitation = object_class_limitation
        self.object_classes = object_classes
        self.search_base = search_base
        self.search_scope = search_scope
        if additional_search_base is not None:
            self.additional_search_base = additional_search_base
        self.user_id = user_id
        self.username = username
        self.real_name = real_name
        self.email_address = email_address
        self.department = department
        self.building = building
        self.room = room
        self.phone = phone
        self.position = position
        self.user_uuid = user_uuid

    @property
    def object_class_limitation(self):
        """Gets the object_class_limitation of this UserMappings.  # noqa: E501


        :return: The object_class_limitation of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._object_class_limitation

    @object_class_limitation.setter
    def object_class_limitation(self, object_class_limitation):
        """Sets the object_class_limitation of this UserMappings.


        :param object_class_limitation: The object_class_limitation of this UserMappings.  # noqa: E501
        :type object_class_limitation: str
        """
        if self.local_vars_configuration.client_side_validation and object_class_limitation is None:  # noqa: E501
            raise ValueError("Invalid value for `object_class_limitation`, must not be `None`")  # noqa: E501
        allowed_values = ["ANY_OBJECT_CLASSES", "ALL_OBJECT_CLASSES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and object_class_limitation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `object_class_limitation` ({0}), must be one of {1}"  # noqa: E501
                .format(object_class_limitation, allowed_values)
            )

        self._object_class_limitation = object_class_limitation

    @property
    def object_classes(self):
        """Gets the object_classes of this UserMappings.  # noqa: E501


        :return: The object_classes of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._object_classes

    @object_classes.setter
    def object_classes(self, object_classes):
        """Sets the object_classes of this UserMappings.


        :param object_classes: The object_classes of this UserMappings.  # noqa: E501
        :type object_classes: str
        """
        if self.local_vars_configuration.client_side_validation and object_classes is None:  # noqa: E501
            raise ValueError("Invalid value for `object_classes`, must not be `None`")  # noqa: E501

        self._object_classes = object_classes

    @property
    def search_base(self):
        """Gets the search_base of this UserMappings.  # noqa: E501


        :return: The search_base of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._search_base

    @search_base.setter
    def search_base(self, search_base):
        """Sets the search_base of this UserMappings.


        :param search_base: The search_base of this UserMappings.  # noqa: E501
        :type search_base: str
        """
        if self.local_vars_configuration.client_side_validation and search_base is None:  # noqa: E501
            raise ValueError("Invalid value for `search_base`, must not be `None`")  # noqa: E501

        self._search_base = search_base

    @property
    def search_scope(self):
        """Gets the search_scope of this UserMappings.  # noqa: E501


        :return: The search_scope of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._search_scope

    @search_scope.setter
    def search_scope(self, search_scope):
        """Sets the search_scope of this UserMappings.


        :param search_scope: The search_scope of this UserMappings.  # noqa: E501
        :type search_scope: str
        """
        if self.local_vars_configuration.client_side_validation and search_scope is None:  # noqa: E501
            raise ValueError("Invalid value for `search_scope`, must not be `None`")  # noqa: E501
        allowed_values = ["ALL_SUBTREES", "FIRST_LEVEL_ONLY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and search_scope not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `search_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(search_scope, allowed_values)
            )

        self._search_scope = search_scope

    @property
    def additional_search_base(self):
        """Gets the additional_search_base of this UserMappings.  # noqa: E501


        :return: The additional_search_base of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._additional_search_base

    @additional_search_base.setter
    def additional_search_base(self, additional_search_base):
        """Sets the additional_search_base of this UserMappings.


        :param additional_search_base: The additional_search_base of this UserMappings.  # noqa: E501
        :type additional_search_base: str
        """

        self._additional_search_base = additional_search_base

    @property
    def user_id(self):
        """Gets the user_id of this UserMappings.  # noqa: E501


        :return: The user_id of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserMappings.


        :param user_id: The user_id of this UserMappings.  # noqa: E501
        :type user_id: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this UserMappings.  # noqa: E501


        :return: The username of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserMappings.


        :param username: The username of this UserMappings.  # noqa: E501
        :type username: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def real_name(self):
        """Gets the real_name of this UserMappings.  # noqa: E501


        :return: The real_name of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this UserMappings.


        :param real_name: The real_name of this UserMappings.  # noqa: E501
        :type real_name: str
        """
        if self.local_vars_configuration.client_side_validation and real_name is None:  # noqa: E501
            raise ValueError("Invalid value for `real_name`, must not be `None`")  # noqa: E501

        self._real_name = real_name

    @property
    def email_address(self):
        """Gets the email_address of this UserMappings.  # noqa: E501


        :return: The email_address of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UserMappings.


        :param email_address: The email_address of this UserMappings.  # noqa: E501
        :type email_address: str
        """
        if self.local_vars_configuration.client_side_validation and email_address is None:  # noqa: E501
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def department(self):
        """Gets the department of this UserMappings.  # noqa: E501


        :return: The department of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this UserMappings.


        :param department: The department of this UserMappings.  # noqa: E501
        :type department: str
        """
        if self.local_vars_configuration.client_side_validation and department is None:  # noqa: E501
            raise ValueError("Invalid value for `department`, must not be `None`")  # noqa: E501

        self._department = department

    @property
    def building(self):
        """Gets the building of this UserMappings.  # noqa: E501


        :return: The building of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building):
        """Sets the building of this UserMappings.


        :param building: The building of this UserMappings.  # noqa: E501
        :type building: str
        """
        if self.local_vars_configuration.client_side_validation and building is None:  # noqa: E501
            raise ValueError("Invalid value for `building`, must not be `None`")  # noqa: E501

        self._building = building

    @property
    def room(self):
        """Gets the room of this UserMappings.  # noqa: E501


        :return: The room of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this UserMappings.


        :param room: The room of this UserMappings.  # noqa: E501
        :type room: str
        """
        if self.local_vars_configuration.client_side_validation and room is None:  # noqa: E501
            raise ValueError("Invalid value for `room`, must not be `None`")  # noqa: E501

        self._room = room

    @property
    def phone(self):
        """Gets the phone of this UserMappings.  # noqa: E501


        :return: The phone of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserMappings.


        :param phone: The phone of this UserMappings.  # noqa: E501
        :type phone: str
        """
        if self.local_vars_configuration.client_side_validation and phone is None:  # noqa: E501
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def position(self):
        """Gets the position of this UserMappings.  # noqa: E501


        :return: The position of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this UserMappings.


        :param position: The position of this UserMappings.  # noqa: E501
        :type position: str
        """
        if self.local_vars_configuration.client_side_validation and position is None:  # noqa: E501
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def user_uuid(self):
        """Gets the user_uuid of this UserMappings.  # noqa: E501


        :return: The user_uuid of this UserMappings.  # noqa: E501
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid):
        """Sets the user_uuid of this UserMappings.


        :param user_uuid: The user_uuid of this UserMappings.  # noqa: E501
        :type user_uuid: str
        """
        if self.local_vars_configuration.client_side_validation and user_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `user_uuid`, must not be `None`")  # noqa: E501

        self._user_uuid = user_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserMappings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserMappings):
            return True

        return self.to_dict() != other.to_dict()
