# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class PatchPolicyLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'patch_policy_id': 'int',
        'device_id': 'int',
        'device_name': 'str',
        'status_code': 'int',
        'status_message': 'str',
        'status_date': 'datetime',
        'attempt': 'int',
        'ignored': 'int'
    }

    attribute_map = {
        'patch_policy_id': 'patchPolicyId',
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'status_code': 'statusCode',
        'status_message': 'statusMessage',
        'status_date': 'statusDate',
        'attempt': 'attempt',
        'ignored': 'ignored'
    }

    def __init__(self, patch_policy_id=None, device_id=None, device_name=None, status_code=None, status_message=None, status_date=None, attempt=None, ignored=None, local_vars_configuration=None):  # noqa: E501
        """PatchPolicyLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._patch_policy_id = None
        self._device_id = None
        self._device_name = None
        self._status_code = None
        self._status_message = None
        self._status_date = None
        self._attempt = None
        self._ignored = None
        self.discriminator = None

        if patch_policy_id is not None:
            self.patch_policy_id = patch_policy_id
        if device_id is not None:
            self.device_id = device_id
        if device_name is not None:
            self.device_name = device_name
        if status_code is not None:
            self.status_code = status_code
        if status_message is not None:
            self.status_message = status_message
        if status_date is not None:
            self.status_date = status_date
        if attempt is not None:
            self.attempt = attempt
        if ignored is not None:
            self.ignored = ignored

    @property
    def patch_policy_id(self):
        """Gets the patch_policy_id of this PatchPolicyLog.  # noqa: E501


        :return: The patch_policy_id of this PatchPolicyLog.  # noqa: E501
        :rtype: int
        """
        return self._patch_policy_id

    @patch_policy_id.setter
    def patch_policy_id(self, patch_policy_id):
        """Sets the patch_policy_id of this PatchPolicyLog.


        :param patch_policy_id: The patch_policy_id of this PatchPolicyLog.  # noqa: E501
        :type patch_policy_id: int
        """

        self._patch_policy_id = patch_policy_id

    @property
    def device_id(self):
        """Gets the device_id of this PatchPolicyLog.  # noqa: E501


        :return: The device_id of this PatchPolicyLog.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this PatchPolicyLog.


        :param device_id: The device_id of this PatchPolicyLog.  # noqa: E501
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this PatchPolicyLog.  # noqa: E501


        :return: The device_name of this PatchPolicyLog.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this PatchPolicyLog.


        :param device_name: The device_name of this PatchPolicyLog.  # noqa: E501
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def status_code(self):
        """Gets the status_code of this PatchPolicyLog.  # noqa: E501


        :return: The status_code of this PatchPolicyLog.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this PatchPolicyLog.


        :param status_code: The status_code of this PatchPolicyLog.  # noqa: E501
        :type status_code: int
        """

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this PatchPolicyLog.  # noqa: E501


        :return: The status_message of this PatchPolicyLog.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this PatchPolicyLog.


        :param status_message: The status_message of this PatchPolicyLog.  # noqa: E501
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def status_date(self):
        """Gets the status_date of this PatchPolicyLog.  # noqa: E501


        :return: The status_date of this PatchPolicyLog.  # noqa: E501
        :rtype: datetime
        """
        return self._status_date

    @status_date.setter
    def status_date(self, status_date):
        """Sets the status_date of this PatchPolicyLog.


        :param status_date: The status_date of this PatchPolicyLog.  # noqa: E501
        :type status_date: datetime
        """

        self._status_date = status_date

    @property
    def attempt(self):
        """Gets the attempt of this PatchPolicyLog.  # noqa: E501


        :return: The attempt of this PatchPolicyLog.  # noqa: E501
        :rtype: int
        """
        return self._attempt

    @attempt.setter
    def attempt(self, attempt):
        """Sets the attempt of this PatchPolicyLog.


        :param attempt: The attempt of this PatchPolicyLog.  # noqa: E501
        :type attempt: int
        """

        self._attempt = attempt

    @property
    def ignored(self):
        """Gets the ignored of this PatchPolicyLog.  # noqa: E501


        :return: The ignored of this PatchPolicyLog.  # noqa: E501
        :rtype: int
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this PatchPolicyLog.


        :param ignored: The ignored of this PatchPolicyLog.  # noqa: E501
        :type ignored: int
        """

        self._ignored = ignored

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchPolicyLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchPolicyLog):
            return True

        return self.to_dict() != other.to_dict()
