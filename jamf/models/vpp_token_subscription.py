# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class VppTokenSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'enabled': 'bool',
        'recipients': 'Recipients',
        'admin_accounts': 'list[AdminAccount]',
        'site_id': 'int',
        'site_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'enabled': 'enabled',
        'recipients': 'recipients',
        'admin_accounts': 'adminAccounts',
        'site_id': 'siteID',
        'site_name': 'siteName'
    }

    def __init__(self, id=None, name=None, enabled=None, recipients=None, admin_accounts=None, site_id=None, site_name=None, local_vars_configuration=None):  # noqa: E501
        """VppTokenSubscription - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._enabled = None
        self._recipients = None
        self._admin_accounts = None
        self._site_id = None
        self._site_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if enabled is not None:
            self.enabled = enabled
        if recipients is not None:
            self.recipients = recipients
        if admin_accounts is not None:
            self.admin_accounts = admin_accounts
        if site_id is not None:
            self.site_id = site_id
        if site_name is not None:
            self.site_name = site_name

    @property
    def id(self):
        """Gets the id of this VppTokenSubscription.  # noqa: E501


        :return: The id of this VppTokenSubscription.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VppTokenSubscription.


        :param id: The id of this VppTokenSubscription.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VppTokenSubscription.  # noqa: E501


        :return: The name of this VppTokenSubscription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VppTokenSubscription.


        :param name: The name of this VppTokenSubscription.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this VppTokenSubscription.  # noqa: E501


        :return: The enabled of this VppTokenSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VppTokenSubscription.


        :param enabled: The enabled of this VppTokenSubscription.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def recipients(self):
        """Gets the recipients of this VppTokenSubscription.  # noqa: E501


        :return: The recipients of this VppTokenSubscription.  # noqa: E501
        :rtype: Recipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this VppTokenSubscription.


        :param recipients: The recipients of this VppTokenSubscription.  # noqa: E501
        :type recipients: Recipients
        """

        self._recipients = recipients

    @property
    def admin_accounts(self):
        """Gets the admin_accounts of this VppTokenSubscription.  # noqa: E501


        :return: The admin_accounts of this VppTokenSubscription.  # noqa: E501
        :rtype: list[AdminAccount]
        """
        return self._admin_accounts

    @admin_accounts.setter
    def admin_accounts(self, admin_accounts):
        """Sets the admin_accounts of this VppTokenSubscription.


        :param admin_accounts: The admin_accounts of this VppTokenSubscription.  # noqa: E501
        :type admin_accounts: list[AdminAccount]
        """

        self._admin_accounts = admin_accounts

    @property
    def site_id(self):
        """Gets the site_id of this VppTokenSubscription.  # noqa: E501


        :return: The site_id of this VppTokenSubscription.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this VppTokenSubscription.


        :param site_id: The site_id of this VppTokenSubscription.  # noqa: E501
        :type site_id: int
        """

        self._site_id = site_id

    @property
    def site_name(self):
        """Gets the site_name of this VppTokenSubscription.  # noqa: E501


        :return: The site_name of this VppTokenSubscription.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this VppTokenSubscription.


        :param site_name: The site_name of this VppTokenSubscription.  # noqa: E501
        :type site_name: str
        """

        self._site_name = site_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VppTokenSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VppTokenSubscription):
            return True

        return self.to_dict() != other.to_dict()
