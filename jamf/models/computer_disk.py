# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerDisk(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'device': 'str',
        'model': 'str',
        'revision': 'str',
        'serial_number': 'str',
        'size_megabytes': 'int',
        'smart_status': 'str',
        'type': 'str',
        'partitions': 'list[ComputerPartition]'
    }

    attribute_map = {
        'id': 'id',
        'device': 'device',
        'model': 'model',
        'revision': 'revision',
        'serial_number': 'serialNumber',
        'size_megabytes': 'sizeMegabytes',
        'smart_status': 'smartStatus',
        'type': 'type',
        'partitions': 'partitions'
    }

    def __init__(self, id=None, device=None, model=None, revision=None, serial_number=None, size_megabytes=None, smart_status=None, type=None, partitions=None, local_vars_configuration=None):  # noqa: E501
        """ComputerDisk - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._device = None
        self._model = None
        self._revision = None
        self._serial_number = None
        self._size_megabytes = None
        self._smart_status = None
        self._type = None
        self._partitions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device is not None:
            self.device = device
        if model is not None:
            self.model = model
        if revision is not None:
            self.revision = revision
        if serial_number is not None:
            self.serial_number = serial_number
        if size_megabytes is not None:
            self.size_megabytes = size_megabytes
        if smart_status is not None:
            self.smart_status = smart_status
        if type is not None:
            self.type = type
        if partitions is not None:
            self.partitions = partitions

    @property
    def id(self):
        """Gets the id of this ComputerDisk.  # noqa: E501


        :return: The id of this ComputerDisk.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComputerDisk.


        :param id: The id of this ComputerDisk.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def device(self):
        """Gets the device of this ComputerDisk.  # noqa: E501


        :return: The device of this ComputerDisk.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ComputerDisk.


        :param device: The device of this ComputerDisk.  # noqa: E501
        :type device: str
        """

        self._device = device

    @property
    def model(self):
        """Gets the model of this ComputerDisk.  # noqa: E501


        :return: The model of this ComputerDisk.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ComputerDisk.


        :param model: The model of this ComputerDisk.  # noqa: E501
        :type model: str
        """

        self._model = model

    @property
    def revision(self):
        """Gets the revision of this ComputerDisk.  # noqa: E501


        :return: The revision of this ComputerDisk.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ComputerDisk.


        :param revision: The revision of this ComputerDisk.  # noqa: E501
        :type revision: str
        """

        self._revision = revision

    @property
    def serial_number(self):
        """Gets the serial_number of this ComputerDisk.  # noqa: E501


        :return: The serial_number of this ComputerDisk.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ComputerDisk.


        :param serial_number: The serial_number of this ComputerDisk.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def size_megabytes(self):
        """Gets the size_megabytes of this ComputerDisk.  # noqa: E501

        Disk Size in MB.  # noqa: E501

        :return: The size_megabytes of this ComputerDisk.  # noqa: E501
        :rtype: int
        """
        return self._size_megabytes

    @size_megabytes.setter
    def size_megabytes(self, size_megabytes):
        """Sets the size_megabytes of this ComputerDisk.

        Disk Size in MB.  # noqa: E501

        :param size_megabytes: The size_megabytes of this ComputerDisk.  # noqa: E501
        :type size_megabytes: int
        """

        self._size_megabytes = size_megabytes

    @property
    def smart_status(self):
        """Gets the smart_status of this ComputerDisk.  # noqa: E501

        S.M.A.R.T Status  # noqa: E501

        :return: The smart_status of this ComputerDisk.  # noqa: E501
        :rtype: str
        """
        return self._smart_status

    @smart_status.setter
    def smart_status(self, smart_status):
        """Sets the smart_status of this ComputerDisk.

        S.M.A.R.T Status  # noqa: E501

        :param smart_status: The smart_status of this ComputerDisk.  # noqa: E501
        :type smart_status: str
        """

        self._smart_status = smart_status

    @property
    def type(self):
        """Gets the type of this ComputerDisk.  # noqa: E501

        Connection type attribute.  # noqa: E501

        :return: The type of this ComputerDisk.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComputerDisk.

        Connection type attribute.  # noqa: E501

        :param type: The type of this ComputerDisk.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def partitions(self):
        """Gets the partitions of this ComputerDisk.  # noqa: E501


        :return: The partitions of this ComputerDisk.  # noqa: E501
        :rtype: list[ComputerPartition]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this ComputerDisk.


        :param partitions: The partitions of this ComputerDisk.  # noqa: E501
        :type partitions: list[ComputerPartition]
        """

        self._partitions = partitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerDisk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerDisk):
            return True

        return self.to_dict() != other.to_dict()
