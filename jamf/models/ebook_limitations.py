# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class EbookLimitations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'network_segments': 'list[str]',
        'users': 'list[EbookLimitationsUsers]',
        'user_groups': 'list[str]'
    }

    attribute_map = {
        'network_segments': 'networkSegments',
        'users': 'users',
        'user_groups': 'userGroups'
    }

    def __init__(self, network_segments=None, users=None, user_groups=None, local_vars_configuration=None):  # noqa: E501
        """EbookLimitations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._network_segments = None
        self._users = None
        self._user_groups = None
        self.discriminator = None

        if network_segments is not None:
            self.network_segments = network_segments
        if users is not None:
            self.users = users
        if user_groups is not None:
            self.user_groups = user_groups

    @property
    def network_segments(self):
        """Gets the network_segments of this EbookLimitations.  # noqa: E501


        :return: The network_segments of this EbookLimitations.  # noqa: E501
        :rtype: list[str]
        """
        return self._network_segments

    @network_segments.setter
    def network_segments(self, network_segments):
        """Sets the network_segments of this EbookLimitations.


        :param network_segments: The network_segments of this EbookLimitations.  # noqa: E501
        :type network_segments: list[str]
        """

        self._network_segments = network_segments

    @property
    def users(self):
        """Gets the users of this EbookLimitations.  # noqa: E501


        :return: The users of this EbookLimitations.  # noqa: E501
        :rtype: list[EbookLimitationsUsers]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this EbookLimitations.


        :param users: The users of this EbookLimitations.  # noqa: E501
        :type users: list[EbookLimitationsUsers]
        """

        self._users = users

    @property
    def user_groups(self):
        """Gets the user_groups of this EbookLimitations.  # noqa: E501


        :return: The user_groups of this EbookLimitations.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this EbookLimitations.


        :param user_groups: The user_groups of this EbookLimitations.  # noqa: E501
        :type user_groups: list[str]
        """

        self._user_groups = user_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EbookLimitations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EbookLimitations):
            return True

        return self.to_dict() != other.to_dict()
