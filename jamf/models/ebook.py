# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class Ebook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'kind': 'str',
        'url': 'str',
        'free': 'bool',
        'version': 'str',
        'author': 'str',
        'deploy_as_managed': 'bool',
        'install_automatically': 'bool',
        'category_id': 'str',
        'site_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'kind': 'kind',
        'url': 'url',
        'free': 'free',
        'version': 'version',
        'author': 'author',
        'deploy_as_managed': 'deployAsManaged',
        'install_automatically': 'installAutomatically',
        'category_id': 'categoryId',
        'site_id': 'siteId'
    }

    def __init__(self, id=None, name=None, kind=None, url=None, free=None, version=None, author=None, deploy_as_managed=None, install_automatically=None, category_id=None, site_id=None, local_vars_configuration=None):  # noqa: E501
        """Ebook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._kind = None
        self._url = None
        self._free = None
        self._version = None
        self._author = None
        self._deploy_as_managed = None
        self._install_automatically = None
        self._category_id = None
        self._site_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if kind is not None:
            self.kind = kind
        if url is not None:
            self.url = url
        if free is not None:
            self.free = free
        if version is not None:
            self.version = version
        if author is not None:
            self.author = author
        if deploy_as_managed is not None:
            self.deploy_as_managed = deploy_as_managed
        if install_automatically is not None:
            self.install_automatically = install_automatically
        if category_id is not None:
            self.category_id = category_id
        if site_id is not None:
            self.site_id = site_id

    @property
    def id(self):
        """Gets the id of this Ebook.  # noqa: E501


        :return: The id of this Ebook.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ebook.


        :param id: The id of this Ebook.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Ebook.  # noqa: E501


        :return: The name of this Ebook.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ebook.


        :param name: The name of this Ebook.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def kind(self):
        """Gets the kind of this Ebook.  # noqa: E501


        :return: The kind of this Ebook.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Ebook.


        :param kind: The kind of this Ebook.  # noqa: E501
        :type kind: str
        """
        allowed_values = ["UNKNOWN", "PDF", "EPUB", "IBOOKS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and kind not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def url(self):
        """Gets the url of this Ebook.  # noqa: E501


        :return: The url of this Ebook.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Ebook.


        :param url: The url of this Ebook.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def free(self):
        """Gets the free of this Ebook.  # noqa: E501


        :return: The free of this Ebook.  # noqa: E501
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this Ebook.


        :param free: The free of this Ebook.  # noqa: E501
        :type free: bool
        """

        self._free = free

    @property
    def version(self):
        """Gets the version of this Ebook.  # noqa: E501


        :return: The version of this Ebook.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Ebook.


        :param version: The version of this Ebook.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def author(self):
        """Gets the author of this Ebook.  # noqa: E501


        :return: The author of this Ebook.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Ebook.


        :param author: The author of this Ebook.  # noqa: E501
        :type author: str
        """

        self._author = author

    @property
    def deploy_as_managed(self):
        """Gets the deploy_as_managed of this Ebook.  # noqa: E501

        If true, it will be automatically installed  # noqa: E501

        :return: The deploy_as_managed of this Ebook.  # noqa: E501
        :rtype: bool
        """
        return self._deploy_as_managed

    @deploy_as_managed.setter
    def deploy_as_managed(self, deploy_as_managed):
        """Sets the deploy_as_managed of this Ebook.

        If true, it will be automatically installed  # noqa: E501

        :param deploy_as_managed: The deploy_as_managed of this Ebook.  # noqa: E501
        :type deploy_as_managed: bool
        """

        self._deploy_as_managed = deploy_as_managed

    @property
    def install_automatically(self):
        """Gets the install_automatically of this Ebook.  # noqa: E501


        :return: The install_automatically of this Ebook.  # noqa: E501
        :rtype: bool
        """
        return self._install_automatically

    @install_automatically.setter
    def install_automatically(self, install_automatically):
        """Sets the install_automatically of this Ebook.


        :param install_automatically: The install_automatically of this Ebook.  # noqa: E501
        :type install_automatically: bool
        """

        self._install_automatically = install_automatically

    @property
    def category_id(self):
        """Gets the category_id of this Ebook.  # noqa: E501


        :return: The category_id of this Ebook.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Ebook.


        :param category_id: The category_id of this Ebook.  # noqa: E501
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def site_id(self):
        """Gets the site_id of this Ebook.  # noqa: E501


        :return: The site_id of this Ebook.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Ebook.


        :param site_id: The site_id of this Ebook.  # noqa: E501
        :type site_id: str
        """

        self._site_id = site_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ebook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ebook):
            return True

        return self.to_dict() != other.to_dict()
