# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class VPPAdminAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'license_count': 'int',
        'used_license_count': 'int',
        'location': 'str',
        'expiration_date': 'str',
        'site': 'Site'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'license_count': 'licenseCount',
        'used_license_count': 'usedLicenseCount',
        'location': 'location',
        'expiration_date': 'expirationDate',
        'site': 'site'
    }

    def __init__(self, id=None, name=None, license_count=None, used_license_count=None, location=None, expiration_date=None, site=None, local_vars_configuration=None):  # noqa: E501
        """VPPAdminAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._license_count = None
        self._used_license_count = None
        self._location = None
        self._expiration_date = None
        self._site = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if license_count is not None:
            self.license_count = license_count
        if used_license_count is not None:
            self.used_license_count = used_license_count
        if location is not None:
            self.location = location
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if site is not None:
            self.site = site

    @property
    def id(self):
        """Gets the id of this VPPAdminAccount.  # noqa: E501


        :return: The id of this VPPAdminAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VPPAdminAccount.


        :param id: The id of this VPPAdminAccount.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VPPAdminAccount.  # noqa: E501


        :return: The name of this VPPAdminAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VPPAdminAccount.


        :param name: The name of this VPPAdminAccount.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def license_count(self):
        """Gets the license_count of this VPPAdminAccount.  # noqa: E501


        :return: The license_count of this VPPAdminAccount.  # noqa: E501
        :rtype: int
        """
        return self._license_count

    @license_count.setter
    def license_count(self, license_count):
        """Sets the license_count of this VPPAdminAccount.


        :param license_count: The license_count of this VPPAdminAccount.  # noqa: E501
        :type license_count: int
        """

        self._license_count = license_count

    @property
    def used_license_count(self):
        """Gets the used_license_count of this VPPAdminAccount.  # noqa: E501


        :return: The used_license_count of this VPPAdminAccount.  # noqa: E501
        :rtype: int
        """
        return self._used_license_count

    @used_license_count.setter
    def used_license_count(self, used_license_count):
        """Sets the used_license_count of this VPPAdminAccount.


        :param used_license_count: The used_license_count of this VPPAdminAccount.  # noqa: E501
        :type used_license_count: int
        """

        self._used_license_count = used_license_count

    @property
    def location(self):
        """Gets the location of this VPPAdminAccount.  # noqa: E501


        :return: The location of this VPPAdminAccount.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VPPAdminAccount.


        :param location: The location of this VPPAdminAccount.  # noqa: E501
        :type location: str
        """

        self._location = location

    @property
    def expiration_date(self):
        """Gets the expiration_date of this VPPAdminAccount.  # noqa: E501


        :return: The expiration_date of this VPPAdminAccount.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this VPPAdminAccount.


        :param expiration_date: The expiration_date of this VPPAdminAccount.  # noqa: E501
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def site(self):
        """Gets the site of this VPPAdminAccount.  # noqa: E501


        :return: The site of this VPPAdminAccount.  # noqa: E501
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this VPPAdminAccount.


        :param site: The site of this VPPAdminAccount.  # noqa: E501
        :type site: Site
        """

        self._site = site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VPPAdminAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VPPAdminAccount):
            return True

        return self.to_dict() != other.to_dict()
