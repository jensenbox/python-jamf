# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class TeacherFeatures(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_allow_app_lock': 'bool',
        'is_allow_web_lock': 'bool',
        'is_allow_restrictions': 'bool',
        'is_allow_attention_screen': 'bool',
        'is_allow_clear_passcode': 'bool'
    }

    attribute_map = {
        'is_allow_app_lock': 'isAllowAppLock',
        'is_allow_web_lock': 'isAllowWebLock',
        'is_allow_restrictions': 'isAllowRestrictions',
        'is_allow_attention_screen': 'isAllowAttentionScreen',
        'is_allow_clear_passcode': 'isAllowClearPasscode'
    }

    def __init__(self, is_allow_app_lock=None, is_allow_web_lock=None, is_allow_restrictions=None, is_allow_attention_screen=None, is_allow_clear_passcode=None, local_vars_configuration=None):  # noqa: E501
        """TeacherFeatures - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_allow_app_lock = None
        self._is_allow_web_lock = None
        self._is_allow_restrictions = None
        self._is_allow_attention_screen = None
        self._is_allow_clear_passcode = None
        self.discriminator = None

        if is_allow_app_lock is not None:
            self.is_allow_app_lock = is_allow_app_lock
        if is_allow_web_lock is not None:
            self.is_allow_web_lock = is_allow_web_lock
        if is_allow_restrictions is not None:
            self.is_allow_restrictions = is_allow_restrictions
        if is_allow_attention_screen is not None:
            self.is_allow_attention_screen = is_allow_attention_screen
        if is_allow_clear_passcode is not None:
            self.is_allow_clear_passcode = is_allow_clear_passcode

    @property
    def is_allow_app_lock(self):
        """Gets the is_allow_app_lock of this TeacherFeatures.  # noqa: E501


        :return: The is_allow_app_lock of this TeacherFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_app_lock

    @is_allow_app_lock.setter
    def is_allow_app_lock(self, is_allow_app_lock):
        """Sets the is_allow_app_lock of this TeacherFeatures.


        :param is_allow_app_lock: The is_allow_app_lock of this TeacherFeatures.  # noqa: E501
        :type is_allow_app_lock: bool
        """

        self._is_allow_app_lock = is_allow_app_lock

    @property
    def is_allow_web_lock(self):
        """Gets the is_allow_web_lock of this TeacherFeatures.  # noqa: E501


        :return: The is_allow_web_lock of this TeacherFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_web_lock

    @is_allow_web_lock.setter
    def is_allow_web_lock(self, is_allow_web_lock):
        """Sets the is_allow_web_lock of this TeacherFeatures.


        :param is_allow_web_lock: The is_allow_web_lock of this TeacherFeatures.  # noqa: E501
        :type is_allow_web_lock: bool
        """

        self._is_allow_web_lock = is_allow_web_lock

    @property
    def is_allow_restrictions(self):
        """Gets the is_allow_restrictions of this TeacherFeatures.  # noqa: E501


        :return: The is_allow_restrictions of this TeacherFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_restrictions

    @is_allow_restrictions.setter
    def is_allow_restrictions(self, is_allow_restrictions):
        """Sets the is_allow_restrictions of this TeacherFeatures.


        :param is_allow_restrictions: The is_allow_restrictions of this TeacherFeatures.  # noqa: E501
        :type is_allow_restrictions: bool
        """

        self._is_allow_restrictions = is_allow_restrictions

    @property
    def is_allow_attention_screen(self):
        """Gets the is_allow_attention_screen of this TeacherFeatures.  # noqa: E501


        :return: The is_allow_attention_screen of this TeacherFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_attention_screen

    @is_allow_attention_screen.setter
    def is_allow_attention_screen(self, is_allow_attention_screen):
        """Sets the is_allow_attention_screen of this TeacherFeatures.


        :param is_allow_attention_screen: The is_allow_attention_screen of this TeacherFeatures.  # noqa: E501
        :type is_allow_attention_screen: bool
        """

        self._is_allow_attention_screen = is_allow_attention_screen

    @property
    def is_allow_clear_passcode(self):
        """Gets the is_allow_clear_passcode of this TeacherFeatures.  # noqa: E501


        :return: The is_allow_clear_passcode of this TeacherFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_clear_passcode

    @is_allow_clear_passcode.setter
    def is_allow_clear_passcode(self, is_allow_clear_passcode):
        """Sets the is_allow_clear_passcode of this TeacherFeatures.


        :param is_allow_clear_passcode: The is_allow_clear_passcode of this TeacherFeatures.  # noqa: E501
        :type is_allow_clear_passcode: bool
        """

        self._is_allow_clear_passcode = is_allow_clear_passcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeacherFeatures):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeacherFeatures):
            return True

        return self.to_dict() != other.to_dict()
