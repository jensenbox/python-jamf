# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerContentCachingParentAlert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_caching_parent_alert_id': 'str',
        'addresses': 'list[str]',
        'class_name': 'str',
        'post_date': 'datetime'
    }

    attribute_map = {
        'content_caching_parent_alert_id': 'contentCachingParentAlertId',
        'addresses': 'addresses',
        'class_name': 'className',
        'post_date': 'postDate'
    }

    def __init__(self, content_caching_parent_alert_id=None, addresses=None, class_name=None, post_date=None, local_vars_configuration=None):  # noqa: E501
        """ComputerContentCachingParentAlert - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_caching_parent_alert_id = None
        self._addresses = None
        self._class_name = None
        self._post_date = None
        self.discriminator = None

        if content_caching_parent_alert_id is not None:
            self.content_caching_parent_alert_id = content_caching_parent_alert_id
        if addresses is not None:
            self.addresses = addresses
        if class_name is not None:
            self.class_name = class_name
        if post_date is not None:
            self.post_date = post_date

    @property
    def content_caching_parent_alert_id(self):
        """Gets the content_caching_parent_alert_id of this ComputerContentCachingParentAlert.  # noqa: E501


        :return: The content_caching_parent_alert_id of this ComputerContentCachingParentAlert.  # noqa: E501
        :rtype: str
        """
        return self._content_caching_parent_alert_id

    @content_caching_parent_alert_id.setter
    def content_caching_parent_alert_id(self, content_caching_parent_alert_id):
        """Sets the content_caching_parent_alert_id of this ComputerContentCachingParentAlert.


        :param content_caching_parent_alert_id: The content_caching_parent_alert_id of this ComputerContentCachingParentAlert.  # noqa: E501
        :type content_caching_parent_alert_id: str
        """

        self._content_caching_parent_alert_id = content_caching_parent_alert_id

    @property
    def addresses(self):
        """Gets the addresses of this ComputerContentCachingParentAlert.  # noqa: E501


        :return: The addresses of this ComputerContentCachingParentAlert.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this ComputerContentCachingParentAlert.


        :param addresses: The addresses of this ComputerContentCachingParentAlert.  # noqa: E501
        :type addresses: list[str]
        """

        self._addresses = addresses

    @property
    def class_name(self):
        """Gets the class_name of this ComputerContentCachingParentAlert.  # noqa: E501


        :return: The class_name of this ComputerContentCachingParentAlert.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this ComputerContentCachingParentAlert.


        :param class_name: The class_name of this ComputerContentCachingParentAlert.  # noqa: E501
        :type class_name: str
        """

        self._class_name = class_name

    @property
    def post_date(self):
        """Gets the post_date of this ComputerContentCachingParentAlert.  # noqa: E501


        :return: The post_date of this ComputerContentCachingParentAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._post_date

    @post_date.setter
    def post_date(self, post_date):
        """Sets the post_date of this ComputerContentCachingParentAlert.


        :param post_date: The post_date of this ComputerContentCachingParentAlert.  # noqa: E501
        :type post_date: datetime
        """

        self._post_date = post_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerContentCachingParentAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerContentCachingParentAlert):
            return True

        return self.to_dict() != other.to_dict()
