# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ApiErrorCause(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'field': 'str',
        'description': 'str',
        'id': 'str'
    }

    attribute_map = {
        'code': 'code',
        'field': 'field',
        'description': 'description',
        'id': 'id'
    }

    def __init__(self, code=None, field=None, description=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ApiErrorCause - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._field = None
        self._description = None
        self._id = None
        self.discriminator = None

        if code is not None:
            self.code = code
        self.field = field
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id

    @property
    def code(self):
        """Gets the code of this ApiErrorCause.  # noqa: E501

        Error-specific code that can be used to identify localization string, etc.  # noqa: E501

        :return: The code of this ApiErrorCause.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ApiErrorCause.

        Error-specific code that can be used to identify localization string, etc.  # noqa: E501

        :param code: The code of this ApiErrorCause.  # noqa: E501
        :type code: str
        """

        self._code = code

    @property
    def field(self):
        """Gets the field of this ApiErrorCause.  # noqa: E501

        Name of the field that caused the error.  # noqa: E501

        :return: The field of this ApiErrorCause.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this ApiErrorCause.

        Name of the field that caused the error.  # noqa: E501

        :param field: The field of this ApiErrorCause.  # noqa: E501
        :type field: str
        """
        if self.local_vars_configuration.client_side_validation and field is None:  # noqa: E501
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def description(self):
        """Gets the description of this ApiErrorCause.  # noqa: E501

        A general description of error for troubleshooting/debugging. Generally this text should not be displayed to a user; instead refer to errorCode and it's localized text  # noqa: E501

        :return: The description of this ApiErrorCause.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiErrorCause.

        A general description of error for troubleshooting/debugging. Generally this text should not be displayed to a user; instead refer to errorCode and it's localized text  # noqa: E501

        :param description: The description of this ApiErrorCause.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ApiErrorCause.  # noqa: E501

        id of object with error. Optional.  # noqa: E501

        :return: The id of this ApiErrorCause.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiErrorCause.

        id of object with error. Optional.  # noqa: E501

        :param id: The id of this ApiErrorCause.  # noqa: E501
        :type id: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiErrorCause):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiErrorCause):
            return True

        return self.to_dict() != other.to_dict()
