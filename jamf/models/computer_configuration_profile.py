# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerConfigurationProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'username': 'str',
        'last_installed': 'datetime',
        'removable': 'bool',
        'display_name': 'str',
        'profile_identifier': 'str'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'last_installed': 'lastInstalled',
        'removable': 'removable',
        'display_name': 'displayName',
        'profile_identifier': 'profileIdentifier'
    }

    def __init__(self, id=None, username=None, last_installed=None, removable=None, display_name=None, profile_identifier=None, local_vars_configuration=None):  # noqa: E501
        """ComputerConfigurationProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._username = None
        self._last_installed = None
        self._removable = None
        self._display_name = None
        self._profile_identifier = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if last_installed is not None:
            self.last_installed = last_installed
        if removable is not None:
            self.removable = removable
        if display_name is not None:
            self.display_name = display_name
        if profile_identifier is not None:
            self.profile_identifier = profile_identifier

    @property
    def id(self):
        """Gets the id of this ComputerConfigurationProfile.  # noqa: E501


        :return: The id of this ComputerConfigurationProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComputerConfigurationProfile.


        :param id: The id of this ComputerConfigurationProfile.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this ComputerConfigurationProfile.  # noqa: E501


        :return: The username of this ComputerConfigurationProfile.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ComputerConfigurationProfile.


        :param username: The username of this ComputerConfigurationProfile.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def last_installed(self):
        """Gets the last_installed of this ComputerConfigurationProfile.  # noqa: E501


        :return: The last_installed of this ComputerConfigurationProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._last_installed

    @last_installed.setter
    def last_installed(self, last_installed):
        """Sets the last_installed of this ComputerConfigurationProfile.


        :param last_installed: The last_installed of this ComputerConfigurationProfile.  # noqa: E501
        :type last_installed: datetime
        """

        self._last_installed = last_installed

    @property
    def removable(self):
        """Gets the removable of this ComputerConfigurationProfile.  # noqa: E501


        :return: The removable of this ComputerConfigurationProfile.  # noqa: E501
        :rtype: bool
        """
        return self._removable

    @removable.setter
    def removable(self, removable):
        """Sets the removable of this ComputerConfigurationProfile.


        :param removable: The removable of this ComputerConfigurationProfile.  # noqa: E501
        :type removable: bool
        """

        self._removable = removable

    @property
    def display_name(self):
        """Gets the display_name of this ComputerConfigurationProfile.  # noqa: E501


        :return: The display_name of this ComputerConfigurationProfile.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ComputerConfigurationProfile.


        :param display_name: The display_name of this ComputerConfigurationProfile.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def profile_identifier(self):
        """Gets the profile_identifier of this ComputerConfigurationProfile.  # noqa: E501


        :return: The profile_identifier of this ComputerConfigurationProfile.  # noqa: E501
        :rtype: str
        """
        return self._profile_identifier

    @profile_identifier.setter
    def profile_identifier(self, profile_identifier):
        """Sets the profile_identifier of this ComputerConfigurationProfile.


        :param profile_identifier: The profile_identifier of this ComputerConfigurationProfile.  # noqa: E501
        :type profile_identifier: str
        """

        self._profile_identifier = profile_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerConfigurationProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerConfigurationProfile):
            return True

        return self.to_dict() != other.to_dict()
