# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerHardware(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'make': 'str',
        'model': 'str',
        'model_identifier': 'str',
        'serial_number': 'str',
        'processor_speed_mhz': 'int',
        'processor_count': 'int',
        'core_count': 'int',
        'processor_type': 'str',
        'processor_architecture': 'str',
        'bus_speed_mhz': 'int',
        'cache_size_kilobytes': 'int',
        'network_adapter_type': 'str',
        'mac_address': 'str',
        'alt_network_adapter_type': 'str',
        'alt_mac_address': 'str',
        'total_ram_megabytes': 'int',
        'open_ram_slots': 'int',
        'battery_capacity_percent': 'int',
        'smc_version': 'str',
        'nic_speed': 'str',
        'optical_drive': 'str',
        'boot_rom': 'str',
        'ble_capable': 'bool',
        'extension_attributes': 'list[ComputerExtensionAttribute]'
    }

    attribute_map = {
        'make': 'make',
        'model': 'model',
        'model_identifier': 'modelIdentifier',
        'serial_number': 'serialNumber',
        'processor_speed_mhz': 'processorSpeedMhz',
        'processor_count': 'processorCount',
        'core_count': 'coreCount',
        'processor_type': 'processorType',
        'processor_architecture': 'processorArchitecture',
        'bus_speed_mhz': 'busSpeedMhz',
        'cache_size_kilobytes': 'cacheSizeKilobytes',
        'network_adapter_type': 'networkAdapterType',
        'mac_address': 'macAddress',
        'alt_network_adapter_type': 'altNetworkAdapterType',
        'alt_mac_address': 'altMacAddress',
        'total_ram_megabytes': 'totalRamMegabytes',
        'open_ram_slots': 'openRamSlots',
        'battery_capacity_percent': 'batteryCapacityPercent',
        'smc_version': 'smcVersion',
        'nic_speed': 'nicSpeed',
        'optical_drive': 'opticalDrive',
        'boot_rom': 'bootRom',
        'ble_capable': 'bleCapable',
        'extension_attributes': 'extensionAttributes'
    }

    def __init__(self, make=None, model=None, model_identifier=None, serial_number=None, processor_speed_mhz=None, processor_count=None, core_count=None, processor_type=None, processor_architecture=None, bus_speed_mhz=None, cache_size_kilobytes=None, network_adapter_type=None, mac_address=None, alt_network_adapter_type=None, alt_mac_address=None, total_ram_megabytes=None, open_ram_slots=None, battery_capacity_percent=None, smc_version=None, nic_speed=None, optical_drive=None, boot_rom=None, ble_capable=None, extension_attributes=None, local_vars_configuration=None):  # noqa: E501
        """ComputerHardware - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._make = None
        self._model = None
        self._model_identifier = None
        self._serial_number = None
        self._processor_speed_mhz = None
        self._processor_count = None
        self._core_count = None
        self._processor_type = None
        self._processor_architecture = None
        self._bus_speed_mhz = None
        self._cache_size_kilobytes = None
        self._network_adapter_type = None
        self._mac_address = None
        self._alt_network_adapter_type = None
        self._alt_mac_address = None
        self._total_ram_megabytes = None
        self._open_ram_slots = None
        self._battery_capacity_percent = None
        self._smc_version = None
        self._nic_speed = None
        self._optical_drive = None
        self._boot_rom = None
        self._ble_capable = None
        self._extension_attributes = None
        self.discriminator = None

        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if model_identifier is not None:
            self.model_identifier = model_identifier
        if serial_number is not None:
            self.serial_number = serial_number
        if processor_speed_mhz is not None:
            self.processor_speed_mhz = processor_speed_mhz
        if processor_count is not None:
            self.processor_count = processor_count
        if core_count is not None:
            self.core_count = core_count
        if processor_type is not None:
            self.processor_type = processor_type
        if processor_architecture is not None:
            self.processor_architecture = processor_architecture
        if bus_speed_mhz is not None:
            self.bus_speed_mhz = bus_speed_mhz
        if cache_size_kilobytes is not None:
            self.cache_size_kilobytes = cache_size_kilobytes
        if network_adapter_type is not None:
            self.network_adapter_type = network_adapter_type
        if mac_address is not None:
            self.mac_address = mac_address
        if alt_network_adapter_type is not None:
            self.alt_network_adapter_type = alt_network_adapter_type
        if alt_mac_address is not None:
            self.alt_mac_address = alt_mac_address
        if total_ram_megabytes is not None:
            self.total_ram_megabytes = total_ram_megabytes
        if open_ram_slots is not None:
            self.open_ram_slots = open_ram_slots
        if battery_capacity_percent is not None:
            self.battery_capacity_percent = battery_capacity_percent
        if smc_version is not None:
            self.smc_version = smc_version
        if nic_speed is not None:
            self.nic_speed = nic_speed
        if optical_drive is not None:
            self.optical_drive = optical_drive
        if boot_rom is not None:
            self.boot_rom = boot_rom
        if ble_capable is not None:
            self.ble_capable = ble_capable
        if extension_attributes is not None:
            self.extension_attributes = extension_attributes

    @property
    def make(self):
        """Gets the make of this ComputerHardware.  # noqa: E501


        :return: The make of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this ComputerHardware.


        :param make: The make of this ComputerHardware.  # noqa: E501
        :type make: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this ComputerHardware.  # noqa: E501


        :return: The model of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ComputerHardware.


        :param model: The model of this ComputerHardware.  # noqa: E501
        :type model: str
        """

        self._model = model

    @property
    def model_identifier(self):
        """Gets the model_identifier of this ComputerHardware.  # noqa: E501


        :return: The model_identifier of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._model_identifier

    @model_identifier.setter
    def model_identifier(self, model_identifier):
        """Sets the model_identifier of this ComputerHardware.


        :param model_identifier: The model_identifier of this ComputerHardware.  # noqa: E501
        :type model_identifier: str
        """

        self._model_identifier = model_identifier

    @property
    def serial_number(self):
        """Gets the serial_number of this ComputerHardware.  # noqa: E501


        :return: The serial_number of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ComputerHardware.


        :param serial_number: The serial_number of this ComputerHardware.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def processor_speed_mhz(self):
        """Gets the processor_speed_mhz of this ComputerHardware.  # noqa: E501

        Processor Speed in MHz.  # noqa: E501

        :return: The processor_speed_mhz of this ComputerHardware.  # noqa: E501
        :rtype: int
        """
        return self._processor_speed_mhz

    @processor_speed_mhz.setter
    def processor_speed_mhz(self, processor_speed_mhz):
        """Sets the processor_speed_mhz of this ComputerHardware.

        Processor Speed in MHz.  # noqa: E501

        :param processor_speed_mhz: The processor_speed_mhz of this ComputerHardware.  # noqa: E501
        :type processor_speed_mhz: int
        """

        self._processor_speed_mhz = processor_speed_mhz

    @property
    def processor_count(self):
        """Gets the processor_count of this ComputerHardware.  # noqa: E501


        :return: The processor_count of this ComputerHardware.  # noqa: E501
        :rtype: int
        """
        return self._processor_count

    @processor_count.setter
    def processor_count(self, processor_count):
        """Sets the processor_count of this ComputerHardware.


        :param processor_count: The processor_count of this ComputerHardware.  # noqa: E501
        :type processor_count: int
        """

        self._processor_count = processor_count

    @property
    def core_count(self):
        """Gets the core_count of this ComputerHardware.  # noqa: E501


        :return: The core_count of this ComputerHardware.  # noqa: E501
        :rtype: int
        """
        return self._core_count

    @core_count.setter
    def core_count(self, core_count):
        """Sets the core_count of this ComputerHardware.


        :param core_count: The core_count of this ComputerHardware.  # noqa: E501
        :type core_count: int
        """

        self._core_count = core_count

    @property
    def processor_type(self):
        """Gets the processor_type of this ComputerHardware.  # noqa: E501


        :return: The processor_type of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._processor_type

    @processor_type.setter
    def processor_type(self, processor_type):
        """Sets the processor_type of this ComputerHardware.


        :param processor_type: The processor_type of this ComputerHardware.  # noqa: E501
        :type processor_type: str
        """

        self._processor_type = processor_type

    @property
    def processor_architecture(self):
        """Gets the processor_architecture of this ComputerHardware.  # noqa: E501


        :return: The processor_architecture of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._processor_architecture

    @processor_architecture.setter
    def processor_architecture(self, processor_architecture):
        """Sets the processor_architecture of this ComputerHardware.


        :param processor_architecture: The processor_architecture of this ComputerHardware.  # noqa: E501
        :type processor_architecture: str
        """

        self._processor_architecture = processor_architecture

    @property
    def bus_speed_mhz(self):
        """Gets the bus_speed_mhz of this ComputerHardware.  # noqa: E501


        :return: The bus_speed_mhz of this ComputerHardware.  # noqa: E501
        :rtype: int
        """
        return self._bus_speed_mhz

    @bus_speed_mhz.setter
    def bus_speed_mhz(self, bus_speed_mhz):
        """Sets the bus_speed_mhz of this ComputerHardware.


        :param bus_speed_mhz: The bus_speed_mhz of this ComputerHardware.  # noqa: E501
        :type bus_speed_mhz: int
        """

        self._bus_speed_mhz = bus_speed_mhz

    @property
    def cache_size_kilobytes(self):
        """Gets the cache_size_kilobytes of this ComputerHardware.  # noqa: E501

        Cache Size in KB.  # noqa: E501

        :return: The cache_size_kilobytes of this ComputerHardware.  # noqa: E501
        :rtype: int
        """
        return self._cache_size_kilobytes

    @cache_size_kilobytes.setter
    def cache_size_kilobytes(self, cache_size_kilobytes):
        """Sets the cache_size_kilobytes of this ComputerHardware.

        Cache Size in KB.  # noqa: E501

        :param cache_size_kilobytes: The cache_size_kilobytes of this ComputerHardware.  # noqa: E501
        :type cache_size_kilobytes: int
        """

        self._cache_size_kilobytes = cache_size_kilobytes

    @property
    def network_adapter_type(self):
        """Gets the network_adapter_type of this ComputerHardware.  # noqa: E501


        :return: The network_adapter_type of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._network_adapter_type

    @network_adapter_type.setter
    def network_adapter_type(self, network_adapter_type):
        """Sets the network_adapter_type of this ComputerHardware.


        :param network_adapter_type: The network_adapter_type of this ComputerHardware.  # noqa: E501
        :type network_adapter_type: str
        """

        self._network_adapter_type = network_adapter_type

    @property
    def mac_address(self):
        """Gets the mac_address of this ComputerHardware.  # noqa: E501


        :return: The mac_address of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ComputerHardware.


        :param mac_address: The mac_address of this ComputerHardware.  # noqa: E501
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def alt_network_adapter_type(self):
        """Gets the alt_network_adapter_type of this ComputerHardware.  # noqa: E501


        :return: The alt_network_adapter_type of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._alt_network_adapter_type

    @alt_network_adapter_type.setter
    def alt_network_adapter_type(self, alt_network_adapter_type):
        """Sets the alt_network_adapter_type of this ComputerHardware.


        :param alt_network_adapter_type: The alt_network_adapter_type of this ComputerHardware.  # noqa: E501
        :type alt_network_adapter_type: str
        """

        self._alt_network_adapter_type = alt_network_adapter_type

    @property
    def alt_mac_address(self):
        """Gets the alt_mac_address of this ComputerHardware.  # noqa: E501


        :return: The alt_mac_address of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._alt_mac_address

    @alt_mac_address.setter
    def alt_mac_address(self, alt_mac_address):
        """Sets the alt_mac_address of this ComputerHardware.


        :param alt_mac_address: The alt_mac_address of this ComputerHardware.  # noqa: E501
        :type alt_mac_address: str
        """

        self._alt_mac_address = alt_mac_address

    @property
    def total_ram_megabytes(self):
        """Gets the total_ram_megabytes of this ComputerHardware.  # noqa: E501

        Total RAM Size in MB.  # noqa: E501

        :return: The total_ram_megabytes of this ComputerHardware.  # noqa: E501
        :rtype: int
        """
        return self._total_ram_megabytes

    @total_ram_megabytes.setter
    def total_ram_megabytes(self, total_ram_megabytes):
        """Sets the total_ram_megabytes of this ComputerHardware.

        Total RAM Size in MB.  # noqa: E501

        :param total_ram_megabytes: The total_ram_megabytes of this ComputerHardware.  # noqa: E501
        :type total_ram_megabytes: int
        """

        self._total_ram_megabytes = total_ram_megabytes

    @property
    def open_ram_slots(self):
        """Gets the open_ram_slots of this ComputerHardware.  # noqa: E501

        Available RAM slots.  # noqa: E501

        :return: The open_ram_slots of this ComputerHardware.  # noqa: E501
        :rtype: int
        """
        return self._open_ram_slots

    @open_ram_slots.setter
    def open_ram_slots(self, open_ram_slots):
        """Sets the open_ram_slots of this ComputerHardware.

        Available RAM slots.  # noqa: E501

        :param open_ram_slots: The open_ram_slots of this ComputerHardware.  # noqa: E501
        :type open_ram_slots: int
        """

        self._open_ram_slots = open_ram_slots

    @property
    def battery_capacity_percent(self):
        """Gets the battery_capacity_percent of this ComputerHardware.  # noqa: E501

        Remaining percentage of battery power.  # noqa: E501

        :return: The battery_capacity_percent of this ComputerHardware.  # noqa: E501
        :rtype: int
        """
        return self._battery_capacity_percent

    @battery_capacity_percent.setter
    def battery_capacity_percent(self, battery_capacity_percent):
        """Sets the battery_capacity_percent of this ComputerHardware.

        Remaining percentage of battery power.  # noqa: E501

        :param battery_capacity_percent: The battery_capacity_percent of this ComputerHardware.  # noqa: E501
        :type battery_capacity_percent: int
        """
        if (self.local_vars_configuration.client_side_validation and
                battery_capacity_percent is not None and battery_capacity_percent > 100):  # noqa: E501
            raise ValueError("Invalid value for `battery_capacity_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                battery_capacity_percent is not None and battery_capacity_percent < 0):  # noqa: E501
            raise ValueError("Invalid value for `battery_capacity_percent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._battery_capacity_percent = battery_capacity_percent

    @property
    def smc_version(self):
        """Gets the smc_version of this ComputerHardware.  # noqa: E501


        :return: The smc_version of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._smc_version

    @smc_version.setter
    def smc_version(self, smc_version):
        """Sets the smc_version of this ComputerHardware.


        :param smc_version: The smc_version of this ComputerHardware.  # noqa: E501
        :type smc_version: str
        """

        self._smc_version = smc_version

    @property
    def nic_speed(self):
        """Gets the nic_speed of this ComputerHardware.  # noqa: E501


        :return: The nic_speed of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._nic_speed

    @nic_speed.setter
    def nic_speed(self, nic_speed):
        """Sets the nic_speed of this ComputerHardware.


        :param nic_speed: The nic_speed of this ComputerHardware.  # noqa: E501
        :type nic_speed: str
        """

        self._nic_speed = nic_speed

    @property
    def optical_drive(self):
        """Gets the optical_drive of this ComputerHardware.  # noqa: E501


        :return: The optical_drive of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._optical_drive

    @optical_drive.setter
    def optical_drive(self, optical_drive):
        """Sets the optical_drive of this ComputerHardware.


        :param optical_drive: The optical_drive of this ComputerHardware.  # noqa: E501
        :type optical_drive: str
        """

        self._optical_drive = optical_drive

    @property
    def boot_rom(self):
        """Gets the boot_rom of this ComputerHardware.  # noqa: E501


        :return: The boot_rom of this ComputerHardware.  # noqa: E501
        :rtype: str
        """
        return self._boot_rom

    @boot_rom.setter
    def boot_rom(self, boot_rom):
        """Sets the boot_rom of this ComputerHardware.


        :param boot_rom: The boot_rom of this ComputerHardware.  # noqa: E501
        :type boot_rom: str
        """

        self._boot_rom = boot_rom

    @property
    def ble_capable(self):
        """Gets the ble_capable of this ComputerHardware.  # noqa: E501


        :return: The ble_capable of this ComputerHardware.  # noqa: E501
        :rtype: bool
        """
        return self._ble_capable

    @ble_capable.setter
    def ble_capable(self, ble_capable):
        """Sets the ble_capable of this ComputerHardware.


        :param ble_capable: The ble_capable of this ComputerHardware.  # noqa: E501
        :type ble_capable: bool
        """

        self._ble_capable = ble_capable

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this ComputerHardware.  # noqa: E501


        :return: The extension_attributes of this ComputerHardware.  # noqa: E501
        :rtype: list[ComputerExtensionAttribute]
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this ComputerHardware.


        :param extension_attributes: The extension_attributes of this ComputerHardware.  # noqa: E501
        :type extension_attributes: list[ComputerExtensionAttribute]
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerHardware):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerHardware):
            return True

        return self.to_dict() != other.to_dict()
