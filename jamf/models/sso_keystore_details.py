# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class SsoKeystoreDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'keys': 'list[str]',
        'serial_number': 'int',
        'subject': 'str',
        'issuer': 'str',
        'expiration': 'str'
    }

    attribute_map = {
        'keys': 'keys',
        'serial_number': 'serialNumber',
        'subject': 'subject',
        'issuer': 'issuer',
        'expiration': 'expiration'
    }

    def __init__(self, keys=None, serial_number=None, subject=None, issuer=None, expiration=None, local_vars_configuration=None):  # noqa: E501
        """SsoKeystoreDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._keys = None
        self._serial_number = None
        self._subject = None
        self._issuer = None
        self._expiration = None
        self.discriminator = None

        if keys is not None:
            self.keys = keys
        if serial_number is not None:
            self.serial_number = serial_number
        if subject is not None:
            self.subject = subject
        if issuer is not None:
            self.issuer = issuer
        if expiration is not None:
            self.expiration = expiration

    @property
    def keys(self):
        """Gets the keys of this SsoKeystoreDetails.  # noqa: E501


        :return: The keys of this SsoKeystoreDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this SsoKeystoreDetails.


        :param keys: The keys of this SsoKeystoreDetails.  # noqa: E501
        :type keys: list[str]
        """

        self._keys = keys

    @property
    def serial_number(self):
        """Gets the serial_number of this SsoKeystoreDetails.  # noqa: E501


        :return: The serial_number of this SsoKeystoreDetails.  # noqa: E501
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this SsoKeystoreDetails.


        :param serial_number: The serial_number of this SsoKeystoreDetails.  # noqa: E501
        :type serial_number: int
        """

        self._serial_number = serial_number

    @property
    def subject(self):
        """Gets the subject of this SsoKeystoreDetails.  # noqa: E501


        :return: The subject of this SsoKeystoreDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SsoKeystoreDetails.


        :param subject: The subject of this SsoKeystoreDetails.  # noqa: E501
        :type subject: str
        """

        self._subject = subject

    @property
    def issuer(self):
        """Gets the issuer of this SsoKeystoreDetails.  # noqa: E501


        :return: The issuer of this SsoKeystoreDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this SsoKeystoreDetails.


        :param issuer: The issuer of this SsoKeystoreDetails.  # noqa: E501
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def expiration(self):
        """Gets the expiration of this SsoKeystoreDetails.  # noqa: E501


        :return: The expiration of this SsoKeystoreDetails.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this SsoKeystoreDetails.


        :param expiration: The expiration of this SsoKeystoreDetails.  # noqa: E501
        :type expiration: str
        """

        self._expiration = expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SsoKeystoreDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SsoKeystoreDetails):
            return True

        return self.to_dict() != other.to_dict()
