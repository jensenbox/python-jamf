# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class JamfProInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_vpp_token_enabled': 'bool',
        'is_dep_account_enabled': 'bool',
        'is_byod_enabled': 'bool',
        'is_user_migration_enabled': 'bool',
        'is_cloud_deployments_enabled': 'bool',
        'is_patch_enabled': 'bool',
        'is_sso_saml_enabled': 'bool',
        'is_smtp_enabled': 'bool'
    }

    attribute_map = {
        'is_vpp_token_enabled': 'isVppTokenEnabled',
        'is_dep_account_enabled': 'isDepAccountEnabled',
        'is_byod_enabled': 'isByodEnabled',
        'is_user_migration_enabled': 'isUserMigrationEnabled',
        'is_cloud_deployments_enabled': 'isCloudDeploymentsEnabled',
        'is_patch_enabled': 'isPatchEnabled',
        'is_sso_saml_enabled': 'isSsoSamlEnabled',
        'is_smtp_enabled': 'isSmtpEnabled'
    }

    def __init__(self, is_vpp_token_enabled=None, is_dep_account_enabled=None, is_byod_enabled=None, is_user_migration_enabled=None, is_cloud_deployments_enabled=None, is_patch_enabled=None, is_sso_saml_enabled=None, is_smtp_enabled=None, local_vars_configuration=None):  # noqa: E501
        """JamfProInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_vpp_token_enabled = None
        self._is_dep_account_enabled = None
        self._is_byod_enabled = None
        self._is_user_migration_enabled = None
        self._is_cloud_deployments_enabled = None
        self._is_patch_enabled = None
        self._is_sso_saml_enabled = None
        self._is_smtp_enabled = None
        self.discriminator = None

        if is_vpp_token_enabled is not None:
            self.is_vpp_token_enabled = is_vpp_token_enabled
        if is_dep_account_enabled is not None:
            self.is_dep_account_enabled = is_dep_account_enabled
        if is_byod_enabled is not None:
            self.is_byod_enabled = is_byod_enabled
        if is_user_migration_enabled is not None:
            self.is_user_migration_enabled = is_user_migration_enabled
        if is_cloud_deployments_enabled is not None:
            self.is_cloud_deployments_enabled = is_cloud_deployments_enabled
        if is_patch_enabled is not None:
            self.is_patch_enabled = is_patch_enabled
        if is_sso_saml_enabled is not None:
            self.is_sso_saml_enabled = is_sso_saml_enabled
        if is_smtp_enabled is not None:
            self.is_smtp_enabled = is_smtp_enabled

    @property
    def is_vpp_token_enabled(self):
        """Gets the is_vpp_token_enabled of this JamfProInformation.  # noqa: E501


        :return: The is_vpp_token_enabled of this JamfProInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_vpp_token_enabled

    @is_vpp_token_enabled.setter
    def is_vpp_token_enabled(self, is_vpp_token_enabled):
        """Sets the is_vpp_token_enabled of this JamfProInformation.


        :param is_vpp_token_enabled: The is_vpp_token_enabled of this JamfProInformation.  # noqa: E501
        :type is_vpp_token_enabled: bool
        """

        self._is_vpp_token_enabled = is_vpp_token_enabled

    @property
    def is_dep_account_enabled(self):
        """Gets the is_dep_account_enabled of this JamfProInformation.  # noqa: E501


        :return: The is_dep_account_enabled of this JamfProInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_dep_account_enabled

    @is_dep_account_enabled.setter
    def is_dep_account_enabled(self, is_dep_account_enabled):
        """Sets the is_dep_account_enabled of this JamfProInformation.


        :param is_dep_account_enabled: The is_dep_account_enabled of this JamfProInformation.  # noqa: E501
        :type is_dep_account_enabled: bool
        """

        self._is_dep_account_enabled = is_dep_account_enabled

    @property
    def is_byod_enabled(self):
        """Gets the is_byod_enabled of this JamfProInformation.  # noqa: E501


        :return: The is_byod_enabled of this JamfProInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_byod_enabled

    @is_byod_enabled.setter
    def is_byod_enabled(self, is_byod_enabled):
        """Sets the is_byod_enabled of this JamfProInformation.


        :param is_byod_enabled: The is_byod_enabled of this JamfProInformation.  # noqa: E501
        :type is_byod_enabled: bool
        """

        self._is_byod_enabled = is_byod_enabled

    @property
    def is_user_migration_enabled(self):
        """Gets the is_user_migration_enabled of this JamfProInformation.  # noqa: E501


        :return: The is_user_migration_enabled of this JamfProInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_migration_enabled

    @is_user_migration_enabled.setter
    def is_user_migration_enabled(self, is_user_migration_enabled):
        """Sets the is_user_migration_enabled of this JamfProInformation.


        :param is_user_migration_enabled: The is_user_migration_enabled of this JamfProInformation.  # noqa: E501
        :type is_user_migration_enabled: bool
        """

        self._is_user_migration_enabled = is_user_migration_enabled

    @property
    def is_cloud_deployments_enabled(self):
        """Gets the is_cloud_deployments_enabled of this JamfProInformation.  # noqa: E501


        :return: The is_cloud_deployments_enabled of this JamfProInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_cloud_deployments_enabled

    @is_cloud_deployments_enabled.setter
    def is_cloud_deployments_enabled(self, is_cloud_deployments_enabled):
        """Sets the is_cloud_deployments_enabled of this JamfProInformation.


        :param is_cloud_deployments_enabled: The is_cloud_deployments_enabled of this JamfProInformation.  # noqa: E501
        :type is_cloud_deployments_enabled: bool
        """

        self._is_cloud_deployments_enabled = is_cloud_deployments_enabled

    @property
    def is_patch_enabled(self):
        """Gets the is_patch_enabled of this JamfProInformation.  # noqa: E501


        :return: The is_patch_enabled of this JamfProInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_patch_enabled

    @is_patch_enabled.setter
    def is_patch_enabled(self, is_patch_enabled):
        """Sets the is_patch_enabled of this JamfProInformation.


        :param is_patch_enabled: The is_patch_enabled of this JamfProInformation.  # noqa: E501
        :type is_patch_enabled: bool
        """

        self._is_patch_enabled = is_patch_enabled

    @property
    def is_sso_saml_enabled(self):
        """Gets the is_sso_saml_enabled of this JamfProInformation.  # noqa: E501


        :return: The is_sso_saml_enabled of this JamfProInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_sso_saml_enabled

    @is_sso_saml_enabled.setter
    def is_sso_saml_enabled(self, is_sso_saml_enabled):
        """Sets the is_sso_saml_enabled of this JamfProInformation.


        :param is_sso_saml_enabled: The is_sso_saml_enabled of this JamfProInformation.  # noqa: E501
        :type is_sso_saml_enabled: bool
        """

        self._is_sso_saml_enabled = is_sso_saml_enabled

    @property
    def is_smtp_enabled(self):
        """Gets the is_smtp_enabled of this JamfProInformation.  # noqa: E501


        :return: The is_smtp_enabled of this JamfProInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_smtp_enabled

    @is_smtp_enabled.setter
    def is_smtp_enabled(self, is_smtp_enabled):
        """Sets the is_smtp_enabled of this JamfProInformation.


        :param is_smtp_enabled: The is_smtp_enabled of this JamfProInformation.  # noqa: E501
        :type is_smtp_enabled: bool
        """

        self._is_smtp_enabled = is_smtp_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JamfProInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JamfProInformation):
            return True

        return self.to_dict() != other.to_dict()
