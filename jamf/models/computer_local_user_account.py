# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerLocalUserAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'username': 'str',
        'full_name': 'str',
        'admin': 'bool',
        'home_directory': 'str',
        'home_directory_size_mb': 'int',
        'file_vault2_enabled': 'bool',
        'user_account_type': 'str',
        'password_min_length': 'int',
        'password_max_age': 'int',
        'password_min_complex_characters': 'int',
        'password_history_depth': 'int',
        'password_require_alphanumeric': 'bool',
        'computer_azure_active_directory_id': 'str',
        'user_azure_active_directory_id': 'str',
        'azure_active_directory_id': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'username': 'username',
        'full_name': 'fullName',
        'admin': 'admin',
        'home_directory': 'homeDirectory',
        'home_directory_size_mb': 'homeDirectorySizeMb',
        'file_vault2_enabled': 'fileVault2Enabled',
        'user_account_type': 'userAccountType',
        'password_min_length': 'passwordMinLength',
        'password_max_age': 'passwordMaxAge',
        'password_min_complex_characters': 'passwordMinComplexCharacters',
        'password_history_depth': 'passwordHistoryDepth',
        'password_require_alphanumeric': 'passwordRequireAlphanumeric',
        'computer_azure_active_directory_id': 'computerAzureActiveDirectoryId',
        'user_azure_active_directory_id': 'userAzureActiveDirectoryId',
        'azure_active_directory_id': 'azureActiveDirectoryId'
    }

    def __init__(self, uid=None, username=None, full_name=None, admin=None, home_directory=None, home_directory_size_mb=None, file_vault2_enabled=None, user_account_type=None, password_min_length=None, password_max_age=None, password_min_complex_characters=None, password_history_depth=None, password_require_alphanumeric=None, computer_azure_active_directory_id=None, user_azure_active_directory_id=None, azure_active_directory_id=None, local_vars_configuration=None):  # noqa: E501
        """ComputerLocalUserAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._username = None
        self._full_name = None
        self._admin = None
        self._home_directory = None
        self._home_directory_size_mb = None
        self._file_vault2_enabled = None
        self._user_account_type = None
        self._password_min_length = None
        self._password_max_age = None
        self._password_min_complex_characters = None
        self._password_history_depth = None
        self._password_require_alphanumeric = None
        self._computer_azure_active_directory_id = None
        self._user_azure_active_directory_id = None
        self._azure_active_directory_id = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if username is not None:
            self.username = username
        if full_name is not None:
            self.full_name = full_name
        if admin is not None:
            self.admin = admin
        if home_directory is not None:
            self.home_directory = home_directory
        if home_directory_size_mb is not None:
            self.home_directory_size_mb = home_directory_size_mb
        if file_vault2_enabled is not None:
            self.file_vault2_enabled = file_vault2_enabled
        if user_account_type is not None:
            self.user_account_type = user_account_type
        if password_min_length is not None:
            self.password_min_length = password_min_length
        if password_max_age is not None:
            self.password_max_age = password_max_age
        if password_min_complex_characters is not None:
            self.password_min_complex_characters = password_min_complex_characters
        if password_history_depth is not None:
            self.password_history_depth = password_history_depth
        if password_require_alphanumeric is not None:
            self.password_require_alphanumeric = password_require_alphanumeric
        if computer_azure_active_directory_id is not None:
            self.computer_azure_active_directory_id = computer_azure_active_directory_id
        if user_azure_active_directory_id is not None:
            self.user_azure_active_directory_id = user_azure_active_directory_id
        if azure_active_directory_id is not None:
            self.azure_active_directory_id = azure_active_directory_id

    @property
    def uid(self):
        """Gets the uid of this ComputerLocalUserAccount.  # noqa: E501


        :return: The uid of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ComputerLocalUserAccount.


        :param uid: The uid of this ComputerLocalUserAccount.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    @property
    def username(self):
        """Gets the username of this ComputerLocalUserAccount.  # noqa: E501


        :return: The username of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ComputerLocalUserAccount.


        :param username: The username of this ComputerLocalUserAccount.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def full_name(self):
        """Gets the full_name of this ComputerLocalUserAccount.  # noqa: E501


        :return: The full_name of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ComputerLocalUserAccount.


        :param full_name: The full_name of this ComputerLocalUserAccount.  # noqa: E501
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def admin(self):
        """Gets the admin of this ComputerLocalUserAccount.  # noqa: E501


        :return: The admin of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this ComputerLocalUserAccount.


        :param admin: The admin of this ComputerLocalUserAccount.  # noqa: E501
        :type admin: bool
        """

        self._admin = admin

    @property
    def home_directory(self):
        """Gets the home_directory of this ComputerLocalUserAccount.  # noqa: E501


        :return: The home_directory of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: str
        """
        return self._home_directory

    @home_directory.setter
    def home_directory(self, home_directory):
        """Sets the home_directory of this ComputerLocalUserAccount.


        :param home_directory: The home_directory of this ComputerLocalUserAccount.  # noqa: E501
        :type home_directory: str
        """

        self._home_directory = home_directory

    @property
    def home_directory_size_mb(self):
        """Gets the home_directory_size_mb of this ComputerLocalUserAccount.  # noqa: E501

        Home directory size in MB.  # noqa: E501

        :return: The home_directory_size_mb of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: int
        """
        return self._home_directory_size_mb

    @home_directory_size_mb.setter
    def home_directory_size_mb(self, home_directory_size_mb):
        """Sets the home_directory_size_mb of this ComputerLocalUserAccount.

        Home directory size in MB.  # noqa: E501

        :param home_directory_size_mb: The home_directory_size_mb of this ComputerLocalUserAccount.  # noqa: E501
        :type home_directory_size_mb: int
        """

        self._home_directory_size_mb = home_directory_size_mb

    @property
    def file_vault2_enabled(self):
        """Gets the file_vault2_enabled of this ComputerLocalUserAccount.  # noqa: E501


        :return: The file_vault2_enabled of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: bool
        """
        return self._file_vault2_enabled

    @file_vault2_enabled.setter
    def file_vault2_enabled(self, file_vault2_enabled):
        """Sets the file_vault2_enabled of this ComputerLocalUserAccount.


        :param file_vault2_enabled: The file_vault2_enabled of this ComputerLocalUserAccount.  # noqa: E501
        :type file_vault2_enabled: bool
        """

        self._file_vault2_enabled = file_vault2_enabled

    @property
    def user_account_type(self):
        """Gets the user_account_type of this ComputerLocalUserAccount.  # noqa: E501


        :return: The user_account_type of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: str
        """
        return self._user_account_type

    @user_account_type.setter
    def user_account_type(self, user_account_type):
        """Sets the user_account_type of this ComputerLocalUserAccount.


        :param user_account_type: The user_account_type of this ComputerLocalUserAccount.  # noqa: E501
        :type user_account_type: str
        """
        allowed_values = ["LOCAL", "MOBILE", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and user_account_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `user_account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(user_account_type, allowed_values)
            )

        self._user_account_type = user_account_type

    @property
    def password_min_length(self):
        """Gets the password_min_length of this ComputerLocalUserAccount.  # noqa: E501


        :return: The password_min_length of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: int
        """
        return self._password_min_length

    @password_min_length.setter
    def password_min_length(self, password_min_length):
        """Sets the password_min_length of this ComputerLocalUserAccount.


        :param password_min_length: The password_min_length of this ComputerLocalUserAccount.  # noqa: E501
        :type password_min_length: int
        """

        self._password_min_length = password_min_length

    @property
    def password_max_age(self):
        """Gets the password_max_age of this ComputerLocalUserAccount.  # noqa: E501


        :return: The password_max_age of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: int
        """
        return self._password_max_age

    @password_max_age.setter
    def password_max_age(self, password_max_age):
        """Sets the password_max_age of this ComputerLocalUserAccount.


        :param password_max_age: The password_max_age of this ComputerLocalUserAccount.  # noqa: E501
        :type password_max_age: int
        """

        self._password_max_age = password_max_age

    @property
    def password_min_complex_characters(self):
        """Gets the password_min_complex_characters of this ComputerLocalUserAccount.  # noqa: E501


        :return: The password_min_complex_characters of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: int
        """
        return self._password_min_complex_characters

    @password_min_complex_characters.setter
    def password_min_complex_characters(self, password_min_complex_characters):
        """Sets the password_min_complex_characters of this ComputerLocalUserAccount.


        :param password_min_complex_characters: The password_min_complex_characters of this ComputerLocalUserAccount.  # noqa: E501
        :type password_min_complex_characters: int
        """

        self._password_min_complex_characters = password_min_complex_characters

    @property
    def password_history_depth(self):
        """Gets the password_history_depth of this ComputerLocalUserAccount.  # noqa: E501


        :return: The password_history_depth of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: int
        """
        return self._password_history_depth

    @password_history_depth.setter
    def password_history_depth(self, password_history_depth):
        """Sets the password_history_depth of this ComputerLocalUserAccount.


        :param password_history_depth: The password_history_depth of this ComputerLocalUserAccount.  # noqa: E501
        :type password_history_depth: int
        """

        self._password_history_depth = password_history_depth

    @property
    def password_require_alphanumeric(self):
        """Gets the password_require_alphanumeric of this ComputerLocalUserAccount.  # noqa: E501


        :return: The password_require_alphanumeric of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: bool
        """
        return self._password_require_alphanumeric

    @password_require_alphanumeric.setter
    def password_require_alphanumeric(self, password_require_alphanumeric):
        """Sets the password_require_alphanumeric of this ComputerLocalUserAccount.


        :param password_require_alphanumeric: The password_require_alphanumeric of this ComputerLocalUserAccount.  # noqa: E501
        :type password_require_alphanumeric: bool
        """

        self._password_require_alphanumeric = password_require_alphanumeric

    @property
    def computer_azure_active_directory_id(self):
        """Gets the computer_azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501


        :return: The computer_azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: str
        """
        return self._computer_azure_active_directory_id

    @computer_azure_active_directory_id.setter
    def computer_azure_active_directory_id(self, computer_azure_active_directory_id):
        """Sets the computer_azure_active_directory_id of this ComputerLocalUserAccount.


        :param computer_azure_active_directory_id: The computer_azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501
        :type computer_azure_active_directory_id: str
        """

        self._computer_azure_active_directory_id = computer_azure_active_directory_id

    @property
    def user_azure_active_directory_id(self):
        """Gets the user_azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501


        :return: The user_azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: str
        """
        return self._user_azure_active_directory_id

    @user_azure_active_directory_id.setter
    def user_azure_active_directory_id(self, user_azure_active_directory_id):
        """Sets the user_azure_active_directory_id of this ComputerLocalUserAccount.


        :param user_azure_active_directory_id: The user_azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501
        :type user_azure_active_directory_id: str
        """

        self._user_azure_active_directory_id = user_azure_active_directory_id

    @property
    def azure_active_directory_id(self):
        """Gets the azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501


        :return: The azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501
        :rtype: str
        """
        return self._azure_active_directory_id

    @azure_active_directory_id.setter
    def azure_active_directory_id(self, azure_active_directory_id):
        """Sets the azure_active_directory_id of this ComputerLocalUserAccount.


        :param azure_active_directory_id: The azure_active_directory_id of this ComputerLocalUserAccount.  # noqa: E501
        :type azure_active_directory_id: str
        """
        allowed_values = ["ACTIVATED", "DEACTIVATED", "UNRESPONSIVE", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and azure_active_directory_id not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `azure_active_directory_id` ({0}), must be one of {1}"  # noqa: E501
                .format(azure_active_directory_id, allowed_values)
            )

        self._azure_active_directory_id = azure_active_directory_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerLocalUserAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerLocalUserAccount):
            return True

        return self.to_dict() != other.to_dict()
