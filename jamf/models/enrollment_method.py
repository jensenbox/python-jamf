# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class EnrollmentMethod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'object_name': 'str',
        'object_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'object_name': 'objectName',
        'object_type': 'objectType'
    }

    def __init__(self, id=None, object_name=None, object_type=None, local_vars_configuration=None):  # noqa: E501
        """EnrollmentMethod - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._object_name = None
        self._object_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if object_name is not None:
            self.object_name = object_name
        if object_type is not None:
            self.object_type = object_type

    @property
    def id(self):
        """Gets the id of this EnrollmentMethod.  # noqa: E501


        :return: The id of this EnrollmentMethod.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnrollmentMethod.


        :param id: The id of this EnrollmentMethod.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def object_name(self):
        """Gets the object_name of this EnrollmentMethod.  # noqa: E501


        :return: The object_name of this EnrollmentMethod.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this EnrollmentMethod.


        :param object_name: The object_name of this EnrollmentMethod.  # noqa: E501
        :type object_name: str
        """

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this EnrollmentMethod.  # noqa: E501


        :return: The object_type of this EnrollmentMethod.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this EnrollmentMethod.


        :param object_type: The object_type of this EnrollmentMethod.  # noqa: E501
        :type object_type: str
        """

        self._object_type = object_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentMethod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentMethod):
            return True

        return self.to_dict() != other.to_dict()
