# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerPrinter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'str',
        'uri': 'str',
        'location': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'uri': 'uri',
        'location': 'location'
    }

    def __init__(self, name=None, type=None, uri=None, location=None, local_vars_configuration=None):  # noqa: E501
        """ComputerPrinter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._type = None
        self._uri = None
        self._location = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri
        if location is not None:
            self.location = location

    @property
    def name(self):
        """Gets the name of this ComputerPrinter.  # noqa: E501


        :return: The name of this ComputerPrinter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputerPrinter.


        :param name: The name of this ComputerPrinter.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ComputerPrinter.  # noqa: E501


        :return: The type of this ComputerPrinter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComputerPrinter.


        :param type: The type of this ComputerPrinter.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this ComputerPrinter.  # noqa: E501


        :return: The uri of this ComputerPrinter.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ComputerPrinter.


        :param uri: The uri of this ComputerPrinter.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    @property
    def location(self):
        """Gets the location of this ComputerPrinter.  # noqa: E501


        :return: The location of this ComputerPrinter.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ComputerPrinter.


        :param location: The location of this ComputerPrinter.  # noqa: E501
        :type location: str
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerPrinter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerPrinter):
            return True

        return self.to_dict() != other.to_dict()
