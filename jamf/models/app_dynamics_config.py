# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class AppDynamicsConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable_eum': 'bool',
        'app_key': 'str',
        'adrum_ext_url_http': 'str',
        'adrum_ext_url_https': 'str',
        'adrum_script_http': 'str',
        'adrum_script_https': 'str',
        'beacon_url_http': 'str',
        'beacon_url_https': 'str'
    }

    attribute_map = {
        'enable_eum': 'enableEum',
        'app_key': 'appKey',
        'adrum_ext_url_http': 'adrumExtUrlHttp',
        'adrum_ext_url_https': 'adrumExtUrlHttps',
        'adrum_script_http': 'adrumScriptHttp',
        'adrum_script_https': 'adrumScriptHttps',
        'beacon_url_http': 'beaconUrlHttp',
        'beacon_url_https': 'beaconUrlHttps'
    }

    def __init__(self, enable_eum=False, app_key=None, adrum_ext_url_http=None, adrum_ext_url_https=None, adrum_script_http=None, adrum_script_https=None, beacon_url_http=None, beacon_url_https=None, local_vars_configuration=None):  # noqa: E501
        """AppDynamicsConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enable_eum = None
        self._app_key = None
        self._adrum_ext_url_http = None
        self._adrum_ext_url_https = None
        self._adrum_script_http = None
        self._adrum_script_https = None
        self._beacon_url_http = None
        self._beacon_url_https = None
        self.discriminator = None

        self.enable_eum = enable_eum
        self.app_key = app_key
        self.adrum_ext_url_http = adrum_ext_url_http
        self.adrum_ext_url_https = adrum_ext_url_https
        self.adrum_script_http = adrum_script_http
        self.adrum_script_https = adrum_script_https
        self.beacon_url_http = beacon_url_http
        self.beacon_url_https = beacon_url_https

    @property
    def enable_eum(self):
        """Gets the enable_eum of this AppDynamicsConfig.  # noqa: E501


        :return: The enable_eum of this AppDynamicsConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enable_eum

    @enable_eum.setter
    def enable_eum(self, enable_eum):
        """Sets the enable_eum of this AppDynamicsConfig.


        :param enable_eum: The enable_eum of this AppDynamicsConfig.  # noqa: E501
        :type enable_eum: bool
        """
        if self.local_vars_configuration.client_side_validation and enable_eum is None:  # noqa: E501
            raise ValueError("Invalid value for `enable_eum`, must not be `None`")  # noqa: E501

        self._enable_eum = enable_eum

    @property
    def app_key(self):
        """Gets the app_key of this AppDynamicsConfig.  # noqa: E501


        :return: The app_key of this AppDynamicsConfig.  # noqa: E501
        :rtype: str
        """
        return self._app_key

    @app_key.setter
    def app_key(self, app_key):
        """Sets the app_key of this AppDynamicsConfig.


        :param app_key: The app_key of this AppDynamicsConfig.  # noqa: E501
        :type app_key: str
        """
        if self.local_vars_configuration.client_side_validation and app_key is None:  # noqa: E501
            raise ValueError("Invalid value for `app_key`, must not be `None`")  # noqa: E501

        self._app_key = app_key

    @property
    def adrum_ext_url_http(self):
        """Gets the adrum_ext_url_http of this AppDynamicsConfig.  # noqa: E501


        :return: The adrum_ext_url_http of this AppDynamicsConfig.  # noqa: E501
        :rtype: str
        """
        return self._adrum_ext_url_http

    @adrum_ext_url_http.setter
    def adrum_ext_url_http(self, adrum_ext_url_http):
        """Sets the adrum_ext_url_http of this AppDynamicsConfig.


        :param adrum_ext_url_http: The adrum_ext_url_http of this AppDynamicsConfig.  # noqa: E501
        :type adrum_ext_url_http: str
        """
        if self.local_vars_configuration.client_side_validation and adrum_ext_url_http is None:  # noqa: E501
            raise ValueError("Invalid value for `adrum_ext_url_http`, must not be `None`")  # noqa: E501

        self._adrum_ext_url_http = adrum_ext_url_http

    @property
    def adrum_ext_url_https(self):
        """Gets the adrum_ext_url_https of this AppDynamicsConfig.  # noqa: E501


        :return: The adrum_ext_url_https of this AppDynamicsConfig.  # noqa: E501
        :rtype: str
        """
        return self._adrum_ext_url_https

    @adrum_ext_url_https.setter
    def adrum_ext_url_https(self, adrum_ext_url_https):
        """Sets the adrum_ext_url_https of this AppDynamicsConfig.


        :param adrum_ext_url_https: The adrum_ext_url_https of this AppDynamicsConfig.  # noqa: E501
        :type adrum_ext_url_https: str
        """
        if self.local_vars_configuration.client_side_validation and adrum_ext_url_https is None:  # noqa: E501
            raise ValueError("Invalid value for `adrum_ext_url_https`, must not be `None`")  # noqa: E501

        self._adrum_ext_url_https = adrum_ext_url_https

    @property
    def adrum_script_http(self):
        """Gets the adrum_script_http of this AppDynamicsConfig.  # noqa: E501


        :return: The adrum_script_http of this AppDynamicsConfig.  # noqa: E501
        :rtype: str
        """
        return self._adrum_script_http

    @adrum_script_http.setter
    def adrum_script_http(self, adrum_script_http):
        """Sets the adrum_script_http of this AppDynamicsConfig.


        :param adrum_script_http: The adrum_script_http of this AppDynamicsConfig.  # noqa: E501
        :type adrum_script_http: str
        """
        if self.local_vars_configuration.client_side_validation and adrum_script_http is None:  # noqa: E501
            raise ValueError("Invalid value for `adrum_script_http`, must not be `None`")  # noqa: E501

        self._adrum_script_http = adrum_script_http

    @property
    def adrum_script_https(self):
        """Gets the adrum_script_https of this AppDynamicsConfig.  # noqa: E501


        :return: The adrum_script_https of this AppDynamicsConfig.  # noqa: E501
        :rtype: str
        """
        return self._adrum_script_https

    @adrum_script_https.setter
    def adrum_script_https(self, adrum_script_https):
        """Sets the adrum_script_https of this AppDynamicsConfig.


        :param adrum_script_https: The adrum_script_https of this AppDynamicsConfig.  # noqa: E501
        :type adrum_script_https: str
        """
        if self.local_vars_configuration.client_side_validation and adrum_script_https is None:  # noqa: E501
            raise ValueError("Invalid value for `adrum_script_https`, must not be `None`")  # noqa: E501

        self._adrum_script_https = adrum_script_https

    @property
    def beacon_url_http(self):
        """Gets the beacon_url_http of this AppDynamicsConfig.  # noqa: E501


        :return: The beacon_url_http of this AppDynamicsConfig.  # noqa: E501
        :rtype: str
        """
        return self._beacon_url_http

    @beacon_url_http.setter
    def beacon_url_http(self, beacon_url_http):
        """Sets the beacon_url_http of this AppDynamicsConfig.


        :param beacon_url_http: The beacon_url_http of this AppDynamicsConfig.  # noqa: E501
        :type beacon_url_http: str
        """
        if self.local_vars_configuration.client_side_validation and beacon_url_http is None:  # noqa: E501
            raise ValueError("Invalid value for `beacon_url_http`, must not be `None`")  # noqa: E501

        self._beacon_url_http = beacon_url_http

    @property
    def beacon_url_https(self):
        """Gets the beacon_url_https of this AppDynamicsConfig.  # noqa: E501


        :return: The beacon_url_https of this AppDynamicsConfig.  # noqa: E501
        :rtype: str
        """
        return self._beacon_url_https

    @beacon_url_https.setter
    def beacon_url_https(self, beacon_url_https):
        """Sets the beacon_url_https of this AppDynamicsConfig.


        :param beacon_url_https: The beacon_url_https of this AppDynamicsConfig.  # noqa: E501
        :type beacon_url_https: str
        """
        if self.local_vars_configuration.client_side_validation and beacon_url_https is None:  # noqa: E501
            raise ValueError("Invalid value for `beacon_url_https`, must not be `None`")  # noqa: E501

        self._beacon_url_https = beacon_url_https

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppDynamicsConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppDynamicsConfig):
            return True

        return self.to_dict() != other.to_dict()
