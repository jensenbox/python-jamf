# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerContentCachingAlert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cache_bytes_limit': 'int',
        'class_name': 'str',
        'path_preventing_access': 'str',
        'post_date': 'datetime',
        'reserved_volume_bytes': 'int',
        'resource': 'str'
    }

    attribute_map = {
        'cache_bytes_limit': 'cacheBytesLimit',
        'class_name': 'className',
        'path_preventing_access': 'pathPreventingAccess',
        'post_date': 'postDate',
        'reserved_volume_bytes': 'reservedVolumeBytes',
        'resource': 'resource'
    }

    def __init__(self, cache_bytes_limit=None, class_name=None, path_preventing_access=None, post_date=None, reserved_volume_bytes=None, resource=None, local_vars_configuration=None):  # noqa: E501
        """ComputerContentCachingAlert - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cache_bytes_limit = None
        self._class_name = None
        self._path_preventing_access = None
        self._post_date = None
        self._reserved_volume_bytes = None
        self._resource = None
        self.discriminator = None

        if cache_bytes_limit is not None:
            self.cache_bytes_limit = cache_bytes_limit
        if class_name is not None:
            self.class_name = class_name
        if path_preventing_access is not None:
            self.path_preventing_access = path_preventing_access
        if post_date is not None:
            self.post_date = post_date
        if reserved_volume_bytes is not None:
            self.reserved_volume_bytes = reserved_volume_bytes
        if resource is not None:
            self.resource = resource

    @property
    def cache_bytes_limit(self):
        """Gets the cache_bytes_limit of this ComputerContentCachingAlert.  # noqa: E501


        :return: The cache_bytes_limit of this ComputerContentCachingAlert.  # noqa: E501
        :rtype: int
        """
        return self._cache_bytes_limit

    @cache_bytes_limit.setter
    def cache_bytes_limit(self, cache_bytes_limit):
        """Sets the cache_bytes_limit of this ComputerContentCachingAlert.


        :param cache_bytes_limit: The cache_bytes_limit of this ComputerContentCachingAlert.  # noqa: E501
        :type cache_bytes_limit: int
        """

        self._cache_bytes_limit = cache_bytes_limit

    @property
    def class_name(self):
        """Gets the class_name of this ComputerContentCachingAlert.  # noqa: E501


        :return: The class_name of this ComputerContentCachingAlert.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this ComputerContentCachingAlert.


        :param class_name: The class_name of this ComputerContentCachingAlert.  # noqa: E501
        :type class_name: str
        """

        self._class_name = class_name

    @property
    def path_preventing_access(self):
        """Gets the path_preventing_access of this ComputerContentCachingAlert.  # noqa: E501


        :return: The path_preventing_access of this ComputerContentCachingAlert.  # noqa: E501
        :rtype: str
        """
        return self._path_preventing_access

    @path_preventing_access.setter
    def path_preventing_access(self, path_preventing_access):
        """Sets the path_preventing_access of this ComputerContentCachingAlert.


        :param path_preventing_access: The path_preventing_access of this ComputerContentCachingAlert.  # noqa: E501
        :type path_preventing_access: str
        """

        self._path_preventing_access = path_preventing_access

    @property
    def post_date(self):
        """Gets the post_date of this ComputerContentCachingAlert.  # noqa: E501


        :return: The post_date of this ComputerContentCachingAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._post_date

    @post_date.setter
    def post_date(self, post_date):
        """Sets the post_date of this ComputerContentCachingAlert.


        :param post_date: The post_date of this ComputerContentCachingAlert.  # noqa: E501
        :type post_date: datetime
        """

        self._post_date = post_date

    @property
    def reserved_volume_bytes(self):
        """Gets the reserved_volume_bytes of this ComputerContentCachingAlert.  # noqa: E501


        :return: The reserved_volume_bytes of this ComputerContentCachingAlert.  # noqa: E501
        :rtype: int
        """
        return self._reserved_volume_bytes

    @reserved_volume_bytes.setter
    def reserved_volume_bytes(self, reserved_volume_bytes):
        """Sets the reserved_volume_bytes of this ComputerContentCachingAlert.


        :param reserved_volume_bytes: The reserved_volume_bytes of this ComputerContentCachingAlert.  # noqa: E501
        :type reserved_volume_bytes: int
        """

        self._reserved_volume_bytes = reserved_volume_bytes

    @property
    def resource(self):
        """Gets the resource of this ComputerContentCachingAlert.  # noqa: E501


        :return: The resource of this ComputerContentCachingAlert.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ComputerContentCachingAlert.


        :param resource: The resource of this ComputerContentCachingAlert.  # noqa: E501
        :type resource: str
        """

        self._resource = resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerContentCachingAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerContentCachingAlert):
            return True

        return self.to_dict() != other.to_dict()
