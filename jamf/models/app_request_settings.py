# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class AppRequestSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_enabled': 'bool',
        'app_store_locale': 'str',
        'requester_user_group_id': 'int',
        'approver_emails': 'list[str]'
    }

    attribute_map = {
        'is_enabled': 'isEnabled',
        'app_store_locale': 'appStoreLocale',
        'requester_user_group_id': 'requesterUserGroupId',
        'approver_emails': 'approverEmails'
    }

    def __init__(self, is_enabled=None, app_store_locale=None, requester_user_group_id=None, approver_emails=None, local_vars_configuration=None):  # noqa: E501
        """AppRequestSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_enabled = None
        self._app_store_locale = None
        self._requester_user_group_id = None
        self._approver_emails = None
        self.discriminator = None

        if is_enabled is not None:
            self.is_enabled = is_enabled
        if app_store_locale is not None:
            self.app_store_locale = app_store_locale
        if requester_user_group_id is not None:
            self.requester_user_group_id = requester_user_group_id
        if approver_emails is not None:
            self.approver_emails = approver_emails

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AppRequestSettings.  # noqa: E501


        :return: The is_enabled of this AppRequestSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AppRequestSettings.


        :param is_enabled: The is_enabled of this AppRequestSettings.  # noqa: E501
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def app_store_locale(self):
        """Gets the app_store_locale of this AppRequestSettings.  # noqa: E501

        Can be any of the country codes from /v1/app-store-country-codes or \"deviceLocale\" to use each individual device's locale  # noqa: E501

        :return: The app_store_locale of this AppRequestSettings.  # noqa: E501
        :rtype: str
        """
        return self._app_store_locale

    @app_store_locale.setter
    def app_store_locale(self, app_store_locale):
        """Sets the app_store_locale of this AppRequestSettings.

        Can be any of the country codes from /v1/app-store-country-codes or \"deviceLocale\" to use each individual device's locale  # noqa: E501

        :param app_store_locale: The app_store_locale of this AppRequestSettings.  # noqa: E501
        :type app_store_locale: str
        """

        self._app_store_locale = app_store_locale

    @property
    def requester_user_group_id(self):
        """Gets the requester_user_group_id of this AppRequestSettings.  # noqa: E501


        :return: The requester_user_group_id of this AppRequestSettings.  # noqa: E501
        :rtype: int
        """
        return self._requester_user_group_id

    @requester_user_group_id.setter
    def requester_user_group_id(self, requester_user_group_id):
        """Sets the requester_user_group_id of this AppRequestSettings.


        :param requester_user_group_id: The requester_user_group_id of this AppRequestSettings.  # noqa: E501
        :type requester_user_group_id: int
        """

        self._requester_user_group_id = requester_user_group_id

    @property
    def approver_emails(self):
        """Gets the approver_emails of this AppRequestSettings.  # noqa: E501


        :return: The approver_emails of this AppRequestSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._approver_emails

    @approver_emails.setter
    def approver_emails(self, approver_emails):
        """Sets the approver_emails of this AppRequestSettings.


        :param approver_emails: The approver_emails of this AppRequestSettings.  # noqa: E501
        :type approver_emails: list[str]
        """

        self._approver_emails = approver_emails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppRequestSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppRequestSettings):
            return True

        return self.to_dict() != other.to_dict()
