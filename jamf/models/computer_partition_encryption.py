# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerPartitionEncryption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'partition_name': 'str',
        'partition_file_vault2_state': 'ComputerPartitionFileVault2State',
        'partition_file_vault2_percent': 'int'
    }

    attribute_map = {
        'partition_name': 'partitionName',
        'partition_file_vault2_state': 'partitionFileVault2State',
        'partition_file_vault2_percent': 'partitionFileVault2Percent'
    }

    def __init__(self, partition_name=None, partition_file_vault2_state=None, partition_file_vault2_percent=None, local_vars_configuration=None):  # noqa: E501
        """ComputerPartitionEncryption - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._partition_name = None
        self._partition_file_vault2_state = None
        self._partition_file_vault2_percent = None
        self.discriminator = None

        if partition_name is not None:
            self.partition_name = partition_name
        if partition_file_vault2_state is not None:
            self.partition_file_vault2_state = partition_file_vault2_state
        if partition_file_vault2_percent is not None:
            self.partition_file_vault2_percent = partition_file_vault2_percent

    @property
    def partition_name(self):
        """Gets the partition_name of this ComputerPartitionEncryption.  # noqa: E501


        :return: The partition_name of this ComputerPartitionEncryption.  # noqa: E501
        :rtype: str
        """
        return self._partition_name

    @partition_name.setter
    def partition_name(self, partition_name):
        """Sets the partition_name of this ComputerPartitionEncryption.


        :param partition_name: The partition_name of this ComputerPartitionEncryption.  # noqa: E501
        :type partition_name: str
        """

        self._partition_name = partition_name

    @property
    def partition_file_vault2_state(self):
        """Gets the partition_file_vault2_state of this ComputerPartitionEncryption.  # noqa: E501


        :return: The partition_file_vault2_state of this ComputerPartitionEncryption.  # noqa: E501
        :rtype: ComputerPartitionFileVault2State
        """
        return self._partition_file_vault2_state

    @partition_file_vault2_state.setter
    def partition_file_vault2_state(self, partition_file_vault2_state):
        """Sets the partition_file_vault2_state of this ComputerPartitionEncryption.


        :param partition_file_vault2_state: The partition_file_vault2_state of this ComputerPartitionEncryption.  # noqa: E501
        :type partition_file_vault2_state: ComputerPartitionFileVault2State
        """

        self._partition_file_vault2_state = partition_file_vault2_state

    @property
    def partition_file_vault2_percent(self):
        """Gets the partition_file_vault2_percent of this ComputerPartitionEncryption.  # noqa: E501


        :return: The partition_file_vault2_percent of this ComputerPartitionEncryption.  # noqa: E501
        :rtype: int
        """
        return self._partition_file_vault2_percent

    @partition_file_vault2_percent.setter
    def partition_file_vault2_percent(self, partition_file_vault2_percent):
        """Sets the partition_file_vault2_percent of this ComputerPartitionEncryption.


        :param partition_file_vault2_percent: The partition_file_vault2_percent of this ComputerPartitionEncryption.  # noqa: E501
        :type partition_file_vault2_percent: int
        """

        self._partition_file_vault2_percent = partition_file_vault2_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerPartitionEncryption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerPartitionEncryption):
            return True

        return self.to_dict() != other.to_dict()
