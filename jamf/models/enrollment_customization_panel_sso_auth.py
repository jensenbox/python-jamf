# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class EnrollmentCustomizationPanelSsoAuth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'rank': 'int',
        'is_use_jamf_connect': 'bool',
        'long_name_attribute': 'str',
        'short_name_attribute': 'str',
        'is_group_enrollment_access_enabled': 'bool',
        'group_enrollment_access_name': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'rank': 'rank',
        'is_use_jamf_connect': 'isUseJamfConnect',
        'long_name_attribute': 'longNameAttribute',
        'short_name_attribute': 'shortNameAttribute',
        'is_group_enrollment_access_enabled': 'isGroupEnrollmentAccessEnabled',
        'group_enrollment_access_name': 'groupEnrollmentAccessName'
    }

    def __init__(self, display_name=None, rank=None, is_use_jamf_connect=None, long_name_attribute=None, short_name_attribute=None, is_group_enrollment_access_enabled=None, group_enrollment_access_name='', local_vars_configuration=None):  # noqa: E501
        """EnrollmentCustomizationPanelSsoAuth - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._rank = None
        self._is_use_jamf_connect = None
        self._long_name_attribute = None
        self._short_name_attribute = None
        self._is_group_enrollment_access_enabled = None
        self._group_enrollment_access_name = None
        self.discriminator = None

        self.display_name = display_name
        self.rank = rank
        self.is_use_jamf_connect = is_use_jamf_connect
        self.long_name_attribute = long_name_attribute
        self.short_name_attribute = short_name_attribute
        self.is_group_enrollment_access_enabled = is_group_enrollment_access_enabled
        self.group_enrollment_access_name = group_enrollment_access_name

    @property
    def display_name(self):
        """Gets the display_name of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501


        :return: The display_name of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EnrollmentCustomizationPanelSsoAuth.


        :param display_name: The display_name of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :type display_name: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def rank(self):
        """Gets the rank of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501


        :return: The rank of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this EnrollmentCustomizationPanelSsoAuth.


        :param rank: The rank of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :type rank: int
        """
        if self.local_vars_configuration.client_side_validation and rank is None:  # noqa: E501
            raise ValueError("Invalid value for `rank`, must not be `None`")  # noqa: E501

        self._rank = rank

    @property
    def is_use_jamf_connect(self):
        """Gets the is_use_jamf_connect of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501


        :return: The is_use_jamf_connect of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :rtype: bool
        """
        return self._is_use_jamf_connect

    @is_use_jamf_connect.setter
    def is_use_jamf_connect(self, is_use_jamf_connect):
        """Sets the is_use_jamf_connect of this EnrollmentCustomizationPanelSsoAuth.


        :param is_use_jamf_connect: The is_use_jamf_connect of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :type is_use_jamf_connect: bool
        """
        if self.local_vars_configuration.client_side_validation and is_use_jamf_connect is None:  # noqa: E501
            raise ValueError("Invalid value for `is_use_jamf_connect`, must not be `None`")  # noqa: E501

        self._is_use_jamf_connect = is_use_jamf_connect

    @property
    def long_name_attribute(self):
        """Gets the long_name_attribute of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501


        :return: The long_name_attribute of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :rtype: str
        """
        return self._long_name_attribute

    @long_name_attribute.setter
    def long_name_attribute(self, long_name_attribute):
        """Sets the long_name_attribute of this EnrollmentCustomizationPanelSsoAuth.


        :param long_name_attribute: The long_name_attribute of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :type long_name_attribute: str
        """
        if self.local_vars_configuration.client_side_validation and long_name_attribute is None:  # noqa: E501
            raise ValueError("Invalid value for `long_name_attribute`, must not be `None`")  # noqa: E501

        self._long_name_attribute = long_name_attribute

    @property
    def short_name_attribute(self):
        """Gets the short_name_attribute of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501


        :return: The short_name_attribute of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :rtype: str
        """
        return self._short_name_attribute

    @short_name_attribute.setter
    def short_name_attribute(self, short_name_attribute):
        """Sets the short_name_attribute of this EnrollmentCustomizationPanelSsoAuth.


        :param short_name_attribute: The short_name_attribute of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :type short_name_attribute: str
        """
        if self.local_vars_configuration.client_side_validation and short_name_attribute is None:  # noqa: E501
            raise ValueError("Invalid value for `short_name_attribute`, must not be `None`")  # noqa: E501

        self._short_name_attribute = short_name_attribute

    @property
    def is_group_enrollment_access_enabled(self):
        """Gets the is_group_enrollment_access_enabled of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501


        :return: The is_group_enrollment_access_enabled of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :rtype: bool
        """
        return self._is_group_enrollment_access_enabled

    @is_group_enrollment_access_enabled.setter
    def is_group_enrollment_access_enabled(self, is_group_enrollment_access_enabled):
        """Sets the is_group_enrollment_access_enabled of this EnrollmentCustomizationPanelSsoAuth.


        :param is_group_enrollment_access_enabled: The is_group_enrollment_access_enabled of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :type is_group_enrollment_access_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and is_group_enrollment_access_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_group_enrollment_access_enabled`, must not be `None`")  # noqa: E501

        self._is_group_enrollment_access_enabled = is_group_enrollment_access_enabled

    @property
    def group_enrollment_access_name(self):
        """Gets the group_enrollment_access_name of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501


        :return: The group_enrollment_access_name of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :rtype: str
        """
        return self._group_enrollment_access_name

    @group_enrollment_access_name.setter
    def group_enrollment_access_name(self, group_enrollment_access_name):
        """Sets the group_enrollment_access_name of this EnrollmentCustomizationPanelSsoAuth.


        :param group_enrollment_access_name: The group_enrollment_access_name of this EnrollmentCustomizationPanelSsoAuth.  # noqa: E501
        :type group_enrollment_access_name: str
        """
        if self.local_vars_configuration.client_side_validation and group_enrollment_access_name is None:  # noqa: E501
            raise ValueError("Invalid value for `group_enrollment_access_name`, must not be `None`")  # noqa: E501

        self._group_enrollment_access_name = group_enrollment_access_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentCustomizationPanelSsoAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentCustomizationPanelSsoAuth):
            return True

        return self.to_dict() != other.to_dict()
