# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class MobileDevicePrestageAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_allow_pairing': 'bool',
        'is_multi_user': 'bool',
        'is_supervised': 'bool',
        'maximum_shared_accounts': 'int',
        'is_auto_advance_setup': 'bool',
        'is_configure_device_before_setup_assistant': 'bool',
        'language': 'str',
        'region': 'str',
        'names': 'MobileDevicePrestageNames'
    }

    attribute_map = {
        'is_allow_pairing': 'isAllowPairing',
        'is_multi_user': 'isMultiUser',
        'is_supervised': 'isSupervised',
        'maximum_shared_accounts': 'maximumSharedAccounts',
        'is_auto_advance_setup': 'isAutoAdvanceSetup',
        'is_configure_device_before_setup_assistant': 'isConfigureDeviceBeforeSetupAssistant',
        'language': 'language',
        'region': 'region',
        'names': 'names'
    }

    def __init__(self, is_allow_pairing=None, is_multi_user=None, is_supervised=None, maximum_shared_accounts=None, is_auto_advance_setup=None, is_configure_device_before_setup_assistant=None, language=None, region=None, names=None, local_vars_configuration=None):  # noqa: E501
        """MobileDevicePrestageAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_allow_pairing = None
        self._is_multi_user = None
        self._is_supervised = None
        self._maximum_shared_accounts = None
        self._is_auto_advance_setup = None
        self._is_configure_device_before_setup_assistant = None
        self._language = None
        self._region = None
        self._names = None
        self.discriminator = None

        self.is_allow_pairing = is_allow_pairing
        self.is_multi_user = is_multi_user
        self.is_supervised = is_supervised
        self.maximum_shared_accounts = maximum_shared_accounts
        self.is_auto_advance_setup = is_auto_advance_setup
        self.is_configure_device_before_setup_assistant = is_configure_device_before_setup_assistant
        if language is not None:
            self.language = language
        if region is not None:
            self.region = region
        if names is not None:
            self.names = names

    @property
    def is_allow_pairing(self):
        """Gets the is_allow_pairing of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The is_allow_pairing of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_allow_pairing

    @is_allow_pairing.setter
    def is_allow_pairing(self, is_allow_pairing):
        """Sets the is_allow_pairing of this MobileDevicePrestageAllOf.


        :param is_allow_pairing: The is_allow_pairing of this MobileDevicePrestageAllOf.  # noqa: E501
        :type is_allow_pairing: bool
        """
        if self.local_vars_configuration.client_side_validation and is_allow_pairing is None:  # noqa: E501
            raise ValueError("Invalid value for `is_allow_pairing`, must not be `None`")  # noqa: E501

        self._is_allow_pairing = is_allow_pairing

    @property
    def is_multi_user(self):
        """Gets the is_multi_user of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The is_multi_user of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_multi_user

    @is_multi_user.setter
    def is_multi_user(self, is_multi_user):
        """Sets the is_multi_user of this MobileDevicePrestageAllOf.


        :param is_multi_user: The is_multi_user of this MobileDevicePrestageAllOf.  # noqa: E501
        :type is_multi_user: bool
        """
        if self.local_vars_configuration.client_side_validation and is_multi_user is None:  # noqa: E501
            raise ValueError("Invalid value for `is_multi_user`, must not be `None`")  # noqa: E501

        self._is_multi_user = is_multi_user

    @property
    def is_supervised(self):
        """Gets the is_supervised of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The is_supervised of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_supervised

    @is_supervised.setter
    def is_supervised(self, is_supervised):
        """Sets the is_supervised of this MobileDevicePrestageAllOf.


        :param is_supervised: The is_supervised of this MobileDevicePrestageAllOf.  # noqa: E501
        :type is_supervised: bool
        """
        if self.local_vars_configuration.client_side_validation and is_supervised is None:  # noqa: E501
            raise ValueError("Invalid value for `is_supervised`, must not be `None`")  # noqa: E501

        self._is_supervised = is_supervised

    @property
    def maximum_shared_accounts(self):
        """Gets the maximum_shared_accounts of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The maximum_shared_accounts of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: int
        """
        return self._maximum_shared_accounts

    @maximum_shared_accounts.setter
    def maximum_shared_accounts(self, maximum_shared_accounts):
        """Sets the maximum_shared_accounts of this MobileDevicePrestageAllOf.


        :param maximum_shared_accounts: The maximum_shared_accounts of this MobileDevicePrestageAllOf.  # noqa: E501
        :type maximum_shared_accounts: int
        """
        if self.local_vars_configuration.client_side_validation and maximum_shared_accounts is None:  # noqa: E501
            raise ValueError("Invalid value for `maximum_shared_accounts`, must not be `None`")  # noqa: E501

        self._maximum_shared_accounts = maximum_shared_accounts

    @property
    def is_auto_advance_setup(self):
        """Gets the is_auto_advance_setup of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The is_auto_advance_setup of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_advance_setup

    @is_auto_advance_setup.setter
    def is_auto_advance_setup(self, is_auto_advance_setup):
        """Sets the is_auto_advance_setup of this MobileDevicePrestageAllOf.


        :param is_auto_advance_setup: The is_auto_advance_setup of this MobileDevicePrestageAllOf.  # noqa: E501
        :type is_auto_advance_setup: bool
        """
        if self.local_vars_configuration.client_side_validation and is_auto_advance_setup is None:  # noqa: E501
            raise ValueError("Invalid value for `is_auto_advance_setup`, must not be `None`")  # noqa: E501

        self._is_auto_advance_setup = is_auto_advance_setup

    @property
    def is_configure_device_before_setup_assistant(self):
        """Gets the is_configure_device_before_setup_assistant of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The is_configure_device_before_setup_assistant of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_configure_device_before_setup_assistant

    @is_configure_device_before_setup_assistant.setter
    def is_configure_device_before_setup_assistant(self, is_configure_device_before_setup_assistant):
        """Sets the is_configure_device_before_setup_assistant of this MobileDevicePrestageAllOf.


        :param is_configure_device_before_setup_assistant: The is_configure_device_before_setup_assistant of this MobileDevicePrestageAllOf.  # noqa: E501
        :type is_configure_device_before_setup_assistant: bool
        """
        if self.local_vars_configuration.client_side_validation and is_configure_device_before_setup_assistant is None:  # noqa: E501
            raise ValueError("Invalid value for `is_configure_device_before_setup_assistant`, must not be `None`")  # noqa: E501

        self._is_configure_device_before_setup_assistant = is_configure_device_before_setup_assistant

    @property
    def language(self):
        """Gets the language of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The language of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this MobileDevicePrestageAllOf.


        :param language: The language of this MobileDevicePrestageAllOf.  # noqa: E501
        :type language: str
        """

        self._language = language

    @property
    def region(self):
        """Gets the region of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The region of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this MobileDevicePrestageAllOf.


        :param region: The region of this MobileDevicePrestageAllOf.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def names(self):
        """Gets the names of this MobileDevicePrestageAllOf.  # noqa: E501


        :return: The names of this MobileDevicePrestageAllOf.  # noqa: E501
        :rtype: MobileDevicePrestageNames
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this MobileDevicePrestageAllOf.


        :param names: The names of this MobileDevicePrestageAllOf.  # noqa: E501
        :type names: MobileDevicePrestageNames
        """

        self._names = names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MobileDevicePrestageAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MobileDevicePrestageAllOf):
            return True

        return self.to_dict() != other.to_dict()
