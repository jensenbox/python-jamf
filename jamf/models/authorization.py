# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class Authorization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'AuthAccount',
        'account_groups': 'list[AccountGroup]',
        'sites': 'list[Site]',
        'authentication_type': 'str'
    }

    attribute_map = {
        'account': 'account',
        'account_groups': 'accountGroups',
        'sites': 'sites',
        'authentication_type': 'authenticationType'
    }

    def __init__(self, account=None, account_groups=None, sites=None, authentication_type=None, local_vars_configuration=None):  # noqa: E501
        """Authorization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._account_groups = None
        self._sites = None
        self._authentication_type = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if account_groups is not None:
            self.account_groups = account_groups
        if sites is not None:
            self.sites = sites
        if authentication_type is not None:
            self.authentication_type = authentication_type

    @property
    def account(self):
        """Gets the account of this Authorization.  # noqa: E501


        :return: The account of this Authorization.  # noqa: E501
        :rtype: AuthAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Authorization.


        :param account: The account of this Authorization.  # noqa: E501
        :type account: AuthAccount
        """

        self._account = account

    @property
    def account_groups(self):
        """Gets the account_groups of this Authorization.  # noqa: E501


        :return: The account_groups of this Authorization.  # noqa: E501
        :rtype: list[AccountGroup]
        """
        return self._account_groups

    @account_groups.setter
    def account_groups(self, account_groups):
        """Sets the account_groups of this Authorization.


        :param account_groups: The account_groups of this Authorization.  # noqa: E501
        :type account_groups: list[AccountGroup]
        """

        self._account_groups = account_groups

    @property
    def sites(self):
        """Gets the sites of this Authorization.  # noqa: E501


        :return: The sites of this Authorization.  # noqa: E501
        :rtype: list[Site]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this Authorization.


        :param sites: The sites of this Authorization.  # noqa: E501
        :type sites: list[Site]
        """

        self._sites = sites

    @property
    def authentication_type(self):
        """Gets the authentication_type of this Authorization.  # noqa: E501


        :return: The authentication_type of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this Authorization.


        :param authentication_type: The authentication_type of this Authorization.  # noqa: E501
        :type authentication_type: str
        """
        allowed_values = ["JSS", "LDAP", "SAML", "INVITE", "OAUTH", "DEVICE_SIGNATURE", "CLOUD_CONNECTOR", "SYSTEM_ACCOUNT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and authentication_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `authentication_type` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication_type, allowed_values)
            )

        self._authentication_type = authentication_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Authorization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Authorization):
            return True

        return self.to_dict() != other.to_dict()
