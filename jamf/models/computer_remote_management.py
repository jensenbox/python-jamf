# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class ComputerRemoteManagement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'managed': 'bool',
        'management_username': 'str',
        'management_password': 'str'
    }

    attribute_map = {
        'managed': 'managed',
        'management_username': 'managementUsername',
        'management_password': 'managementPassword'
    }

    def __init__(self, managed=None, management_username=None, management_password=None, local_vars_configuration=None):  # noqa: E501
        """ComputerRemoteManagement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._managed = None
        self._management_username = None
        self._management_password = None
        self.discriminator = None

        if managed is not None:
            self.managed = managed
        if management_username is not None:
            self.management_username = management_username
        if management_password is not None:
            self.management_password = management_password

    @property
    def managed(self):
        """Gets the managed of this ComputerRemoteManagement.  # noqa: E501


        :return: The managed of this ComputerRemoteManagement.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this ComputerRemoteManagement.


        :param managed: The managed of this ComputerRemoteManagement.  # noqa: E501
        :type managed: bool
        """

        self._managed = managed

    @property
    def management_username(self):
        """Gets the management_username of this ComputerRemoteManagement.  # noqa: E501


        :return: The management_username of this ComputerRemoteManagement.  # noqa: E501
        :rtype: str
        """
        return self._management_username

    @management_username.setter
    def management_username(self, management_username):
        """Sets the management_username of this ComputerRemoteManagement.


        :param management_username: The management_username of this ComputerRemoteManagement.  # noqa: E501
        :type management_username: str
        """

        self._management_username = management_username

    @property
    def management_password(self):
        """Gets the management_password of this ComputerRemoteManagement.  # noqa: E501


        :return: The management_password of this ComputerRemoteManagement.  # noqa: E501
        :rtype: str
        """
        return self._management_password

    @management_password.setter
    def management_password(self, management_password):
        """Sets the management_password of this ComputerRemoteManagement.


        :param management_password: The management_password of this ComputerRemoteManagement.  # noqa: E501
        :type management_password: str
        """

        self._management_password = management_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputerRemoteManagement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputerRemoteManagement):
            return True

        return self.to_dict() != other.to_dict()
