# coding: utf-8

"""
    Jamf Pro API

    ## Overview This is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.   # noqa: E501

    The version of the OpenAPI document: 10.25.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jamf.configuration import Configuration


class LdapGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'uuid': 'str',
        'ldap_server_id': 'int',
        'name': 'str',
        'distinguished_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'ldap_server_id': 'ldapServerId',
        'name': 'name',
        'distinguished_name': 'distinguishedName'
    }

    def __init__(self, id=None, uuid=None, ldap_server_id=None, name=None, distinguished_name=None, local_vars_configuration=None):  # noqa: E501
        """LdapGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._uuid = None
        self._ldap_server_id = None
        self._name = None
        self._distinguished_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if ldap_server_id is not None:
            self.ldap_server_id = ldap_server_id
        if name is not None:
            self.name = name
        if distinguished_name is not None:
            self.distinguished_name = distinguished_name

    @property
    def id(self):
        """Gets the id of this LdapGroup.  # noqa: E501


        :return: The id of this LdapGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LdapGroup.


        :param id: The id of this LdapGroup.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this LdapGroup.  # noqa: E501


        :return: The uuid of this LdapGroup.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this LdapGroup.


        :param uuid: The uuid of this LdapGroup.  # noqa: E501
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def ldap_server_id(self):
        """Gets the ldap_server_id of this LdapGroup.  # noqa: E501


        :return: The ldap_server_id of this LdapGroup.  # noqa: E501
        :rtype: int
        """
        return self._ldap_server_id

    @ldap_server_id.setter
    def ldap_server_id(self, ldap_server_id):
        """Sets the ldap_server_id of this LdapGroup.


        :param ldap_server_id: The ldap_server_id of this LdapGroup.  # noqa: E501
        :type ldap_server_id: int
        """

        self._ldap_server_id = ldap_server_id

    @property
    def name(self):
        """Gets the name of this LdapGroup.  # noqa: E501


        :return: The name of this LdapGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LdapGroup.


        :param name: The name of this LdapGroup.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def distinguished_name(self):
        """Gets the distinguished_name of this LdapGroup.  # noqa: E501


        :return: The distinguished_name of this LdapGroup.  # noqa: E501
        :rtype: str
        """
        return self._distinguished_name

    @distinguished_name.setter
    def distinguished_name(self, distinguished_name):
        """Sets the distinguished_name of this LdapGroup.


        :param distinguished_name: The distinguished_name of this LdapGroup.  # noqa: E501
        :type distinguished_name: str
        """

        self._distinguished_name = distinguished_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LdapGroup):
            return True

        return self.to_dict() != other.to_dict()
